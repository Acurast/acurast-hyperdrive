import smartpy as sp

from contracts.tezos.IBCF_Eth_Validator import IBCF_Eth_Validator
from contracts.tezos.blueprints.Counter import IBCF_Client
from contracts.tezos.libs.utils import RLP

# There values can be generated with "scripts/validate_eth_proof.js"
ETH_BLOCK_NUMBER = 8338770
ETH_BLOCK_ROOT_STATE = sp.bytes(
    "0xd5f94295e9e22df3995bd119a6a15a6b0318f271f13d6919d289c2b30be5bdf7"
)
EVM_CLIENT_ADDRESS = sp.bytes("0x715E4360a220a5e021dE5413F5c6314EDC234AC3")
EVM_ACCOUNT_PROOF = sp.bytes(
    "0xf90c21f90211a007427a3ef246fd4345eedd98d83fe2a8b377b76baf04c5e110e6e20f47593549a0f1cdcbd11ed13f178a3389e3b7c89244317f6511826c31ba0a40a08d4432dbeea09dcecd272d59de013c9ff1ba1c234e2f29e18c1c4e26b69b0b24d7dc285abad6a0b10efa928f675f944cee88ab1c667725c7332a265d93ebdbadf9e3dd77766852a00c4b8980bb240bd0815cc8f4f4aaa9b14f12d5b2a2dc9fa9c67445570f900450a0e3d62c634255c78461c2aa50dc46f4eacdf75dc025ab655e7ec133453f5a50eda0a69ad4b8f69274a9147c920ea7b2e793cf7ebd99f69c7d8a070def045c16e5d3a0335df70fcccb44bc28e41f19dc74b2ca10e6e10496b9831b784367464e8aacaba047ea2f4da87916723da98e4b9211131ba1ac160814809493feffbed12374d844a0a3820dc3c256a9da2b6a02e4f79db1299de001e07310c12c92239fc54c1aac61a0550b1c781e72d51ea076b75ae6eb6bf4ef3d7b64e717cf8079f8e815b44044a2a096ed7997528ddd864818c78d878cccb21b0d050560c875713dafc74ad04e5a36a0334ea35c0cbd68d2118b15b63619e106594bdd29af5ae487237a8065577170eba0a91dc4fc090af8accba7bfe80bd6a96df8b6c44bd26c2a66658ae08f34c05bf2a03ecba4fb6f14ce4de44a630e5361bfdc1d7db2a7c52dbaa40c1fa68fd8c737aea0e277c001ad2fde53413c7b87e30845e7ca9f845e5a257db4198a1917d411f4a380f90211a03258fa373dab4d9b1c76ef2e4dc93ece1e87170720791f55dab6558c3474ce38a01c5fa1e7453f5957954e49eca2bb5b42e253a7253e26d87bba6bfcbb1a25bf62a0b7b9dbdbf00591c67ff80cc33eac8544330f49cd71cba5f9c807facadf3d9e3ba03f9c8b5f2e91ef30d8b954c725380cd8ce77a4f1f3dbeca263d0cdceeb6eb200a02887174d6e5263ed17ca9391ee241674069ecc0a44ab0c239278bf8989df4ea3a0fade851d2f3417b5feb2afb2005105e482f8c85dab06d8863c57288e7b49bdaba029ed07e07c435140bb38fbd8009cb6d35ff082bdb8a117f15eddaa4a565846cba0282f2ec54963344163bd39d3f1d70ec5fdf07e9c0b1f2a90c42e52c608225392a0ef401cc8c6fba18a7f487a40a3f4133d13de04be91efe8873f38514d461ee42ba027fb8a62d5117d56d611988ef041ebcebb3b445f5a9f8580b0f54761ac829597a0ddf73996a1660c0f488c88103710bc1160a2817bf37b02c6f3d1c4e822c25b4ca015db4566ad193caae52384f1486a6770e1c11d217adfe2239f9956b41d560ea9a08cb2d711f7a49642b4f5ecaf8574f3ba4ccab1a773e37f6b0062640e1fe37b01a0af4251f87194fe67a0f279bacc0f6cd069f273238529fa83c2414208c05e2e88a0e8f1c9cabf5fdc353a2940d42ca225811a742223f052acefa455f755d6034f58a0138183bde7652b232b103d4656e4acb93e2f3c9381dd2c1b68c9e708286738ea80f90211a01018dd339544ea490fa1b46c6f973f84cd92396daaba13be55ea208a208ef399a013d7329a935bbe0e37aacac1d5ff0308cfff4bea2a3bed88d7ab912c74f8e54ba0486a8349357b6e9d59d4dc975e5c4a09931eee0a4cf5f1bde719512651dbf865a037b1e6408c7be1058e9c332ea5f56421fd841ad20d78f48a53cc43976482c4d8a0eb5cce41867a8fb9b1a53ab9e58268db9a22ad58b0432c2cc7e6927ab9c2621ba0de34e3dc781da7feb4505a4b8942cc3724598be51d78e6ea9019184554cde420a0f48814310996bf7069040faf14e65cb4ebc50de6d3cd9f7e4a18b605eba0a1f4a055f52cfd6090e321432928c44e6d903520a1b0b8477441a0a260819e2d0b3d6aa0724c8407effd6d64c3b60e23441ffaff7076e5896717fb1321b2554737e9d37fa000a31a0a24843e916197fcdd43465819436fd3db5bf959539912a43301efed2ca0f2706d050a7381ad5490c8c0a9d42c9b1b4d5fadb2bfb9f77da7c05faee94f03a0b7c3884b30737e41e76582dac05dc4635d5c59f9dad2550397a432b8e0be2371a07d836b610e9d9cf8c87d8c4e727e44f2556251b72bd8fb5873107e14f0a0cb5ba0d7f6a085250b242b18c0b06fc1f72a8afc4f6579ebbeb721287225d6edad0e84a017b79a0885ede258ee0042bc227a41fc41268066a3f1dc37cd73e432e385f8e6a06734c90473adfff71e54ed52f3ddfc349fb3d199bd8ea9a26d3e9d574010de4780f90211a0070d54dc357c5e79a5af3d1078f9ee48911f248c9061c3e5affedbc285fd914ca0edd50e358240e2ee6d0dc2447473873bea73fbbb6347887f0ec059c9974d6c04a0bae43c662033a7d8f2fea67b8f811327627f04d8b575579982e63b638f5494e4a0fa2157165bbe4e2243df28c282305700cd235de4df642ed46ea46463d1d45c4ca04b4f4de99eee04ac0109fd077c33ec75e3c3465b015cbe388782bf24ad739ed9a016cd92234e9c6e74dce5912cd877eb64b40baea3638aa44edfcaee8e9ad4e3c9a0b69ec8b03c8d81bdf3b48aeabb58558574ba23a93a70f363961b2169e6b2eb6ea0b3944329a62940319bd077447804f930053e934af2327bc2959685ce4e6646c5a0180fab853e8657b3a55b12960ba8783c37534f0202e1bf1e8bd350dc30cc5eaaa058397ed6b699d0f5f5fda1fbb67f5c4069724becfd72e66545dfb00f4b6d4a1da046cc30acf280d6d3da05dfa937aae3cee1f044674f98b329f6536d7bbe2199e5a0e718ba8ae52d4b4175429d814638164ba1e0b26b8b8f800dbc7a4bf936074b9ba0f87a931563105d7e4936edd8de17eaacc97bd65c9a204b822ba1ec453dfedecba0e82dd43b29940f0f7ea430ec745bba835298ce36985ef7fdbc6243f5c5c36d9ca06d42440c401576b15b2598a730b941bb5847735559ba244e841c58c0b181b32ca0d2cfa26b1a3512d6cbe2727f7aaaf8514c2242b64607a2cdaf20c871754ba97780f90211a0da2a1d3745c752f49a021af89950ce412fb32afbca78dd576bc339f0e54d813da0a0cced22421ee347c39f8d2620e9e5288daf772ef979ff0c2acbe2a6b20d7920a0fe5671c7c4880bd3eb329c38d7f6fb6d938dc6311f758c3f16ba8ad19a6270afa000ec671c46d85e520e922379723b08da4c52cb1244562753b81be3ca3d596f00a0ca5a117a114992c9dc618088e6f5be6ef31cd444014ebb70dfc18e770c80cbb8a0bfd9a006b6272559bab3d2e154ca6f0d2d0822c230f58b790d9409a558b1dad6a0f0df757a442591eb88c5145885d4dcbcbad45a21db72eda7c9b71e7fe6bb0c05a09e1f725af7ea7d73b441ccb52cbaed46e49d96d34d85353c90c53ca79c279913a06db1d5a69588bff72287c775606747c856a03dd18ff60bc429e20ff9c12f3015a049bd0d8417ceb06480b13a7602c90e59eee5e1d4095e2c11f51581675e57d496a02b73205826e216c7d72d597481c5bacc4effc4bdbde223610799c52eac5207b1a0a17afa14304b4fadceb3f4c9f1cb7f8dfe4f7785a5c5ecb691cba3d5bb466ad8a00414101ace57b5167f63a525c8a7a05afccd5d6dd118c5c0da37242473263edea03966dacd864c0c938ed7ab87593445462aea20a4ddb758421882aca272059bc3a0de8bf739688d87de55d115fddbc2c74903e8d28ce24c61a9fbe68ed64a9e02bda0475f63ca9e82ce467390a7dc588751447d692db9e95a5190b815fd3ed6c90c7880f9015180a0afaf518ebaa9a7043db9a2e7595a9498faa2262ec97c3546a75f53a6a9530ed4a0c57b06c4c3b853cc335da7706ac61de6956ee4e9cc6b92a599193a2f82a97cdba0663e1268a245bc67339199d395668bd5a7faa23de45580bf4a654217b67094cc80a081f78eec004c33938d62abccdc68626514f413b83f515e2e8091caa8670b2e7da0d34df61ebf10b2056e7c147a849f7700d7f0f751463a005ccb1f0888e4c81937808080a06d7311d4de4eadda5daeab6884d5334ead68b52180e942e24e95099987fa324b80a0698a333f2e0c2f0c18955a47ec1caafbeb3bb498169d24013500c754a671d1bca06b21b63c96ce078df602d4db10b389536d8097f8215fc1a75cae441ce14139dba00bd18bbee09461506ec2dc0b9fd01a5ff30f50decd1b8f9ecf0f63828c828742a0a5b026f6b2907e4c2ee220942b8d7a7fc986c7714e217084297f77ebe9fa777180f8679e2007ebdf168585d2280190be66a7ffbc6143ed885c9322c7ec96d8d32c01b846f8440180a0f07b2fce9729d2ce5b8e1d27960b2b40a90139519ac122a267b3a8f0285105c9a003644ecee9c13aa77193d5a4ad89b2700c0e59442e082c52e6df1cdc3445ff6f"
)
EVM_STORAGE_PROOF = sp.bytes(
    "0xf8b8f8718080a04e918b76be51be2f02df0ac6191ec2765d401d2229e47291806815da755f5b5e808080a0b01f9cbc6d7940cae9809affc8fd140cb605613952adb215365a9f76ff96a7258080a0902c1b26e70fcdc4d44e19f92f5db5c134ee0da5857e0bb8f9401a5b84b1782f80808080808080f843a036b32740ad8041bcc3b909c72d7e1afe60094ec55e3cde329b4b3a28501d826ca1a0494e4352454d454e540000000000000000000000000000000000000000000012"
)


def get_nonce(n):
    return sp.bytes("0x{:0>64}".format(hex(n)[2:]))


@sp.add_test(name="IBCF_Bridge")
def test():
    scenario = sp.test_scenario()

    BLOCK_LEVEL_1 = 1
    admin = sp.test_account("admin")
    alice = sp.test_account("alice")
    bob = sp.test_account("bob")
    claus = sp.test_account("claus")
    eth_alice_address = sp.bytes("0x" + "11" * 20)
    eth_bob_address = sp.bytes("0x" + "22" * 20)

    scenario.show(alice.address)

    validator = IBCF_Eth_Validator()
    validator.update_initial_storage(
        config=sp.record(
            administrator=admin.address,
            validators=sp.set([alice.address, bob.address, claus.address]),
            minimum_endorsements=2,
            history_length=5,
            snapshot_interval=5,
        ),
        current_snapshot=0,
        state_root=sp.big_map(),
        history=sp.set(),
    )
    scenario += validator

    client = IBCF_Client()
    client.update_initial_storage(
        sp.record(
            ibcf=sp.record(
                action_counter=0,
                proof_validator=validator.address,
                evm_address=EVM_CLIENT_ADDRESS,
            ),
            performed_actions=[],
        )
    )
    scenario += client

    # Submit account proof for a given block (validator: alice)
    validator.submit_block_state_root(
        block_number=ETH_BLOCK_NUMBER,
        state_root=ETH_BLOCK_ROOT_STATE,
    ).run(sender=alice.address)

    # Submit account proof for a given block (validator: bob)
    validator.submit_block_state_root(
        block_number=ETH_BLOCK_NUMBER,
        state_root=ETH_BLOCK_ROOT_STATE,
    ).run(sender=bob.address)

    client.perform(
        sp.record(
            block_number=ETH_BLOCK_NUMBER,
            account_proof_rlp=EVM_ACCOUNT_PROOF,
            action_proof_rlp=EVM_STORAGE_PROOF,
        )
    )

    # The registry should be empty at the start
    scenario.show(client.data.performed_actions)
