"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[92],{3905:(t,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>v});var a=r(67294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var s=a.createContext({}),p=function(t){var e=a.useContext(s),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},c=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,o=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=p(r),d=n,v=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return r?a.createElement(v,i(i({ref:e},c),{},{components:r})):a.createElement(v,i({ref:e},c))}));function v(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[m]="string"==typeof t?t:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},46891:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const o={title:"Proof Validator",slug:"/relay-contracts/evm/validator",hide_title:!0},i=void 0,l={unversionedId:"relay-contracts/evm/validator",id:"relay-contracts/evm/validator",title:"Proof Validator",description:"Implementations",source:"@site/docs/relay-contracts/evm/validator.mdx",sourceDirName:"relay-contracts/evm",slug:"/relay-contracts/evm/validator",permalink:"/acurast-hyperdrive/relay-contracts/evm/validator",draft:!1,editUrl:"https://github.com/Acurast/acurast-hyperdrive/tree/main/apps/documentation/docs/relay-contracts/evm/validator.mdx",tags:[],version:"current",frontMatter:{title:"Proof Validator",slug:"/relay-contracts/evm/validator",hide_title:!0},sidebar:"docs",previous:{title:"EIP-1186 Proof Validator",permalink:"/acurast-hyperdrive/relay-contracts/tezos/validator"},next:{title:"Deployed Contracts",permalink:"/acurast-hyperdrive/deployments"}},s={},p=[{value:"Implementations",id:"implementations",level:2},{value:"ABI",id:"abi",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>submit_state_root</code>",id:"submit_state_root",level:3},{value:"Views",id:"views",level:2},{value:"<code>verify_proof</code>",id:"verify_proof",level:3}],c={toc:p};function m(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"implementations"},"Implementations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Acurast/acurast-hyperdrive/blob/main/contracts/evm/IBCF_Validator.sol"},"IBCF_Validator.sol"))),(0,n.kt)("h2",{id:"abi"},"ABI"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Acurast/acurast-hyperdrive/blob/main/__SNAPSHOTS__/compilation/evm/IBCF_Validator.json"},"IBCF_Validator.json"))),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"submit_state_root"},(0,n.kt)("inlineCode",{parentName:"h3"},"submit_state_root")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Signature:")," ",(0,n.kt)("inlineCode",{parentName:"p"},"submit_state_root(uint snapshot_number, bytes32 state_root)")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Validators call this method with the snapshot state roots of a Tezos chain."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Requires permissions?")," Yes, only ",(0,n.kt)("inlineCode",{parentName:"p"},"validators")," can call this method."),(0,n.kt)("div",{class:"padding-vert--md"}),(0,n.kt)("h2",{id:"views"},"Views"),(0,n.kt)("h3",{id:"verify_proof"},(0,n.kt)("inlineCode",{parentName:"h3"},"verify_proof")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Signature:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"function verify_proof(\n    uint snapshot_number,\n    bytes memory owner,\n    bytes memory key,\n    bytes memory value,\n    bytes32[2][] memory proof\n);\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Output type:")," ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:"),"\nContracts in a EVM chain can call this method to validate that a given state exists on the Tezos blockchain at a snapshot."),(0,n.kt)("p",null,"It first asserts that the snapshot state was signed by at least ",(0,n.kt)("inlineCode",{parentName:"p"},"X")," validators and then validates the proof against the snapshot state."))}m.isMDXComponent=!0}}]);