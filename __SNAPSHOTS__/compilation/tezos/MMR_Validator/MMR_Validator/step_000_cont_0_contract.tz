parameter (or (list %configure (or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))))) (or (pair %remove_old_roots (nat %from) (nat %to)) (pair %submit_root (bytes %root) (nat %snapshot))));
storage   (pair (pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot)) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SENDER;     # @sender : @parameter%configure : @storage
        DUP 3;      # @storage : @sender : @parameter%configure : @storage
        CAR;        # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : @sender : @parameter%configure : @storage
        CAR;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : @sender : @parameter%configure : @storage
        CAR;        # address : @sender : @parameter%configure : @storage
        COMPARE;    # int : @parameter%configure : @storage
        EQ;         # bool : @parameter%configure : @storage
        IF
          {}
          {
            PUSH string "NOT_GOVERNANCE_ADDRESS"; # string : @parameter%configure : @storage
            FAILWITH;   # FAILED
          }; # @parameter%configure : @storage
        DUP;        # @parameter%configure : @parameter%configure : @storage
        ITER
          {
            DUP;        # or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure : @storage
            IF_LEFT
              {
                SWAP;       # or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : address : @parameter%configure : @storage
                DROP;       # address : @parameter%configure : @storage
                DIG 2;      # @storage : address : @parameter%configure
                UNPAIR;     # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : @parameter%configure
                UNPAIR;     # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : @parameter%configure
                DIG 3;      # address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                UPDATE 1;   # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                PAIR;       # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                PAIR;       # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : @parameter%configure
                SWAP;       # @parameter%configure : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
              }
              {
                IF_LEFT
                  {
                    DROP 2;     # @parameter%configure : @storage
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : nat : @parameter%configure : @storage
                        DROP;       # nat : @parameter%configure : @storage
                        DIG 2;      # @storage : nat : @parameter%configure
                        UNPAIR;     # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : nat : @parameter%configure
                        UNPAIR;     # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : nat : @parameter%configure
                        DIG 3;      # nat : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                        UPDATE 3;   # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                        PAIR;       # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : @parameter%configure
                        PAIR;       # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : @parameter%configure
                        SWAP;       # @parameter%configure : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                      }
                      {
                        DUP;        # set (or (address %add) (address %remove)) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure : @storage
                        ITER
                          {
                            IF_LEFT
                              {
                                DIG 4;      # @storage : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UNPAIR;     # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UNPAIR;     # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DUP;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                GET 4;      # set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PUSH bool True; # bool : set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DIG 5;      # address : bool : set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UPDATE;     # set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UPDATE 4;   # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PAIR;       # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PAIR;       # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DUG 3;      # set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                              }
                              {
                                DIG 4;      # @storage : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UNPAIR;     # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UNPAIR;     # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DUP;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                GET 4;      # set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PUSH bool False; # bool : set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : address : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DIG 5;      # address : bool : set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UPDATE;     # set address : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                UPDATE 4;   # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PAIR;       # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                PAIR;       # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure
                                DUG 3;      # set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                              }; # set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : list (or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove)))))) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                          }; # set (or (address %add) (address %remove)) : or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove))))) : @parameter%configure : @storage
                        DROP 2;     # @parameter%configure : @storage
                      }; # list (or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove)))))) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                  }; # list (or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove)))))) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
              }; # list (or (address %update_governance_address) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (set %update_validators (or (address %add) (address %remove)))))) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
          }; # @parameter%configure : @storage
        DROP;       # @storage
      }
      {
        IF_LEFT
          {
            SENDER;     # @sender : @parameter%remove_old_roots : @storage
            DUP 3;      # @storage : @sender : @parameter%remove_old_roots : @storage
            CAR;        # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : @sender : @parameter%remove_old_roots : @storage
            CAR;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : @sender : @parameter%remove_old_roots : @storage
            CAR;        # address : @sender : @parameter%remove_old_roots : @storage
            COMPARE;    # int : @parameter%remove_old_roots : @storage
            EQ;         # bool : @parameter%remove_old_roots : @storage
            IF
              {}
              {
                PUSH string "NOT_GOVERNANCE_ADDRESS"; # string : @parameter%remove_old_roots : @storage
                FAILWITH;   # FAILED
              }; # @parameter%remove_old_roots : @storage
            DUP;        # @parameter%remove_old_roots : @parameter%remove_old_roots : @storage
            CAR;        # nat : @parameter%remove_old_roots : @storage
            DUP 2;      # @parameter%remove_old_roots : nat : @parameter%remove_old_roots : @storage
            CDR;        # nat : nat : @parameter%remove_old_roots : @storage
            DUP 2;      # nat : nat : nat : @parameter%remove_old_roots : @storage
            COMPARE;    # int : nat : @parameter%remove_old_roots : @storage
            LT;         # bool : nat : @parameter%remove_old_roots : @storage
            LOOP
              {
                DIG 2;      # @storage : nat : @parameter%remove_old_roots
                DUP;        # @storage : @storage : nat : @parameter%remove_old_roots
                GET 3;      # big_map nat bytes : @storage : nat : @parameter%remove_old_roots
                NONE bytes; # option bytes : big_map nat bytes : @storage : nat : @parameter%remove_old_roots
                DUP 4;      # nat : option bytes : big_map nat bytes : @storage : nat : @parameter%remove_old_roots
                UPDATE;     # big_map nat bytes : @storage : nat : @parameter%remove_old_roots
                UPDATE 3;   # @storage : nat : @parameter%remove_old_roots
                DUG 2;      # nat : @parameter%remove_old_roots : @storage
                PUSH nat 1; # nat : nat : @parameter%remove_old_roots : @storage
                ADD;        # nat : @parameter%remove_old_roots : @storage
                DUP 2;      # @parameter%remove_old_roots : nat : @parameter%remove_old_roots : @storage
                CDR;        # nat : nat : @parameter%remove_old_roots : @storage
                DUP 2;      # nat : nat : nat : @parameter%remove_old_roots : @storage
                COMPARE;    # int : nat : @parameter%remove_old_roots : @storage
                LT;         # bool : nat : @parameter%remove_old_roots : @storage
              }; # nat : @parameter%remove_old_roots : @storage
            DROP 2;     # @storage
          }
          {
            DUP;        # @parameter%submit_root : @parameter%submit_root : @storage
            UNPAIR;     # bytes : nat : @parameter%submit_root : @storage
            DUP 4;      # @storage : bytes : nat : @parameter%submit_root : @storage
            CAR;        # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : bytes : nat : @parameter%submit_root : @storage
            CAR;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : bytes : nat : @parameter%submit_root : @storage
            GET 4;      # set address : bytes : nat : @parameter%submit_root : @storage
            SENDER;     # @sender : set address : bytes : nat : @parameter%submit_root : @storage
            MEM;        # bool : bytes : nat : @parameter%submit_root : @storage
            IF
              {}
              {
                PUSH string "NOT_VALIDATOR"; # string : bytes : nat : @parameter%submit_root : @storage
                FAILWITH;   # FAILED
              }; # bytes : nat : @parameter%submit_root : @storage
            DUP 2;      # nat : bytes : nat : @parameter%submit_root : @storage
            DUP 5;      # @storage : nat : bytes : nat : @parameter%submit_root : @storage
            CAR;        # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : nat : bytes : nat : @parameter%submit_root : @storage
            CDR;        # nat : nat : bytes : nat : @parameter%submit_root : @storage
            COMPARE;    # int : bytes : nat : @parameter%submit_root : @storage
            EQ;         # bool : bytes : nat : @parameter%submit_root : @storage
            IF
              {}
              {
                PUSH string "INVALID_SNAPSHOT"; # string : bytes : nat : @parameter%submit_root : @storage
                FAILWITH;   # FAILED
              }; # bytes : nat : @parameter%submit_root : @storage
            DIG 3;      # @storage : bytes : nat : @parameter%submit_root
            DUP;        # @storage : @storage : bytes : nat : @parameter%submit_root
            GET 4;      # map address bytes : @storage : bytes : nat : @parameter%submit_root
            DUP 3;      # bytes : map address bytes : @storage : bytes : nat : @parameter%submit_root
            SOME;       # option bytes : map address bytes : @storage : bytes : nat : @parameter%submit_root
            SENDER;     # @sender : option bytes : map address bytes : @storage : bytes : nat : @parameter%submit_root
            UPDATE;     # map address bytes : @storage : bytes : nat : @parameter%submit_root
            UPDATE 4;   # @storage : bytes : nat : @parameter%submit_root
            DUG 3;      # bytes : nat : @parameter%submit_root : @storage
            LAMBDA
              (pair nat (map address bytes))
              (option bytes)
              {
                DUP;        # pair nat (map address bytes) : pair nat (map address bytes)
                UNPAIR;     # nat : map address bytes : pair nat (map address bytes)
                EMPTY_MAP bytes nat; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 3;      # map address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                ITER
                  {
                    DUP 2;      # map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    PUSH nat 1; # nat : map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DIG 3;      # map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    DUP 4;      # pair address bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    CDR;        # bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    GET;        # option nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    IF_NONE
                      {
                        PUSH nat 0; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                      }
                      {}; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    ADD;        # nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    SOME;       # option nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                    DIG 2;      # pair address bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    CDR;        # bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    UPDATE;     # map bytes nat : nat : map address bytes : pair nat (map address bytes)
                  }; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
                PUSH bytes 0x; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 2;      # map bytes nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                ITER
                  {
                    CAR;        # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DUP 3;      # map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DUP 3;      # bytes : map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    GET;        # option nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    IF_NONE
                      {
                        PUSH nat 0; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                      }
                      {}; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DUP 4;      # map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DUP 3;      # bytes : map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    GET;        # option nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    IF_NONE
                      {
                        PUSH int 636; # int : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    COMPARE;    # int : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    GT;         # bool : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    IF
                      {
                        SWAP;       # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                        DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                      }
                      {
                        DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                      }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                  }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                PUSH nat 0; # nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 3;      # map bytes nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                SIZE;       # nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                COMPARE;    # int : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                EQ;         # bool : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                IF
                  {
                    SWAP;       # map bytes nat : bytes : nat : map address bytes : pair nat (map address bytes)
                    DROP;       # bytes : nat : map address bytes : pair nat (map address bytes)
                    SWAP;       # nat : bytes : map address bytes : pair nat (map address bytes)
                    DROP;       # bytes : map address bytes : pair nat (map address bytes)
                    SWAP;       # map address bytes : bytes : pair nat (map address bytes)
                    DROP;       # bytes : pair nat (map address bytes)
                    SWAP;       # pair nat (map address bytes) : bytes
                    DROP;       # bytes
                    PUSH bool True; # bool : bytes
                  }
                  {
                    DIG 3;      # map address bytes : bytes : map bytes nat : nat : pair nat (map address bytes)
                    DROP;       # bytes : map bytes nat : nat : pair nat (map address bytes)
                    DIG 3;      # pair nat (map address bytes) : bytes : map bytes nat : nat
                    DROP;       # bytes : map bytes nat : nat
                    DUG 2;      # map bytes nat : nat : bytes
                    DUP 3;      # bytes : map bytes nat : nat : bytes
                    GET;        # option nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 643; # int : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : bytes
                    COMPARE;    # int : bytes
                    LT;         # bool : bytes
                  }; # bool : bytes
                IF
                  {
                    DROP;       # 
                    NONE bytes; # option bytes
                  }
                  {
                    SOME;       # option bytes
                  }; # option bytes
              }; # lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            DUP 5;      # @storage : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            GET 4;      # map address bytes : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            DUP 6;      # @storage : map address bytes : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            CAR;        # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : map address bytes : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            CAR;        # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : map address bytes : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            GET 3;      # nat : map address bytes : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            PAIR;       # pair nat (map address bytes) : lambda (pair nat (map address bytes)) (option bytes) : bytes : nat : @parameter%submit_root : @storage
            EXEC;       # option bytes : bytes : nat : @parameter%submit_root : @storage
            IF_NONE
              {
                DROP 3;     # @storage
              }
              {
                DROP;       # bytes : nat : @parameter%submit_root : @storage
                SWAP;       # nat : bytes : @parameter%submit_root : @storage
                DROP;       # bytes : @parameter%submit_root : @storage
                SWAP;       # @parameter%submit_root : bytes : @storage
                DROP;       # bytes : @storage
                SWAP;       # @storage : bytes
                UNPAIR;     # pair (pair %config (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) (nat %current_snapshot) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                UNPAIR;     # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                SWAP;       # nat : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                PUSH nat 1; # nat : nat : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                ADD;        # nat : pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                SWAP;       # pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address)) : nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                PAIR;       # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : pair (big_map %root nat bytes) (map %snapshot_submissions address bytes) : bytes
                PAIR;       # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : bytes
                SWAP;       # bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                DUP 2;      # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                DUP;        # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                GET 3;      # big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                DIG 2;      # bytes : big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                SOME;       # option bytes : big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                DIG 3;      # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)) : option bytes : big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                CAR;        # pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat : option bytes : big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                CDR;        # nat : option bytes : big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                UPDATE;     # big_map nat bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                UPDATE 3;   # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                EMPTY_MAP address bytes; # map address bytes : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
                UPDATE 4;   # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
              }; # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
          }; # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
      }; # pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
    NIL operation; # list operation : pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes))
    PAIR;       # pair (list operation) (pair (pair (pair (address %governance_address) (pair (nat %minimum_endorsements) (set %validators address))) nat) (pair (big_map %root nat bytes) (map %snapshot_submissions address bytes)))
  };
view
  "verify_proof" (pair (list %leaves (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos)))) (pair (nat %mmr_size) (pair (list %proof bytes) (nat %snapshot)))) bool
  {
    UNPAIR;     # @parameter : @storage
    DUP;        # @parameter : @parameter : @storage
    UNPAIR 4;   # list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH int 0; # int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    EMPTY_MAP int (pair bytes (pair nat nat)); # map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 7;      # @parameter : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    CAR;        # list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    ITER
      {
        SOME;       # option (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 3;      # int : option (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE;     # map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # int : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 1; # int : int : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        ADD;        # int : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
      }; # map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    SWAP;       # int : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP;       # map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH int 0; # int : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    SWAP;       # map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    EMPTY_MAP int bytes; # map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 8;      # @parameter : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    GET 5;      # list bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    ITER
      {
        SOME;       # option bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 4;      # int : option bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE;     # map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 2;      # int : map int bytes : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 1; # int : int : map int bytes : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        ADD;        # int : map int bytes : map int (pair bytes (pair nat nat)) : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUG 2;      # map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
      }; # map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 9;      # @storage : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    GET 3;      # big_map nat bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 9;      # @parameter : big_map nat bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    GET 6;      # nat : big_map nat bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    GET;        # option bytes : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    IF_NONE
      {
        PUSH string "UNKNOWN_SNAPSHOT"; # string : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 7;      # list bytes : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    ITER
      {
        DUP 2;      # @some : bytes : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        COMPARE;    # int : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        NEQ;        # bool : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        IF
          {}
          {
            PUSH string "INVALID_PROOF"; # string : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }; # @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
      }; # @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    LAMBDA
      nat
      (list nat)
      {
        LAMBDA
          nat
          nat
          {
            PUSH nat 2; # nat : nat
            PUSH nat 1; # nat : nat : nat
            DIG 2;      # nat : nat : nat
            ADD;        # nat : nat
            PUSH nat 1; # nat : nat : nat
            LSL;        # nat : nat
            SUB;        # int
            ISNAT;      # option nat
            IF_NONE
              {
                PUSH string "NEGATIVE_RESULT"; # string
                FAILWITH;   # FAILED
              }
              {}; # @some
          }; # lambda nat nat : nat
        PUSH nat 1; # nat : lambda nat nat : nat
        DUP 2;      # lambda nat nat : nat : lambda nat nat : nat
        DUP 2;      # nat : lambda nat nat : nat : lambda nat nat : nat
        EXEC;       # nat : nat : lambda nat nat : nat
        PUSH nat 0; # nat : nat : nat : lambda nat nat : nat
        DUP 5;      # nat : nat : nat : nat : lambda nat nat : nat
        DUP 3;      # nat : nat : nat : nat : nat : lambda nat nat : nat
        COMPARE;    # int : nat : nat : nat : lambda nat nat : nat
        LT;         # bool : nat : nat : nat : lambda nat nat : nat
        LOOP
          {
            DROP;       # nat : nat : lambda nat nat : nat
            SWAP;       # nat : nat : lambda nat nat : nat
            PUSH nat 1; # nat : nat : nat : lambda nat nat : nat
            ADD;        # nat : nat : lambda nat nat : nat
            SWAP;       # nat : nat : lambda nat nat : nat
            DUP 3;      # lambda nat nat : nat : nat : lambda nat nat : nat
            DUP 3;      # nat : lambda nat nat : nat : nat : lambda nat nat : nat
            EXEC;       # nat : nat : nat : lambda nat nat : nat
            SWAP;       # nat : nat : nat : lambda nat nat : nat
            DUP 5;      # nat : nat : nat : nat : lambda nat nat : nat
            DUP 3;      # nat : nat : nat : nat : nat : lambda nat nat : nat
            COMPARE;    # int : nat : nat : nat : lambda nat nat : nat
            LT;         # bool : nat : nat : nat : lambda nat nat : nat
          }; # nat : nat : nat : lambda nat nat : nat
        DUP;        # nat : nat : nat : nat : lambda nat nat : nat
        PUSH nat 1; # nat : nat : nat : nat : nat : lambda nat nat : nat
        DUP 5;      # nat : nat : nat : nat : nat : nat : lambda nat nat : nat
        SUB;        # int : nat : nat : nat : nat : lambda nat nat : nat
        ISNAT;      # option nat : nat : nat : nat : nat : lambda nat nat : nat
        IF_NONE
          {
            PUSH int 487; # int : nat : nat : nat : nat : lambda nat nat : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : lambda nat nat : nat
        NIL nat;    # list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        DUP 3;      # nat : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        CONS;       # list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        DUP 2;      # @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        DUP 4;      # nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        PUSH bool True; # bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        PUSH nat 0; # nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        DUP 4;      # @some : nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        COMPARE;    # int : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        GT;         # bool : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        LOOP
          {
            PUSH nat 1; # nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP 12;     # nat : nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            SUB;        # int : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            ISNAT;      # option nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF_NONE
              {
                PUSH int 456; # int : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            PUSH nat 1; # nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP 5;      # @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            PUSH nat 2; # nat : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            LSL;        # nat : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            SUB;        # int : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            ISNAT;      # option nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF_NONE
              {
                PUSH int 504; # int : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP 4;      # nat : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            ADD;        # nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP 5;      # @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            NONE (pair nat nat); # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            NONE (pair nat nat); # option (pair nat nat) : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF_NONE
              {
                DUP 4;      # @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 4;      # nat : @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                COMPARE;    # int : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                GT;         # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }
              {
                DROP;       # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                PUSH bool False; # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            LOOP
              {
                PUSH nat 0; # nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 3;      # @some : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                COMPARE;    # int : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                EQ;         # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                IF
                  {
                    DROP;       # @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    PUSH (option (pair nat nat)) (Some (Pair 0 0)); # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                  }
                  {
                    PUSH nat 1; # nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    DIG 2;      # @some : nat : option (pair nat nat) : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    SUB;        # int : option (pair nat nat) : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    ISNAT;      # option nat : option (pair nat nat) : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    IF_NONE
                      {
                        PUSH int 464; # int : option (pair nat nat) : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : option (pair nat nat) : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    SWAP;       # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    DUP 2;      # @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    PUSH nat 2; # nat : @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    LSL;        # nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    DIG 3;      # nat : nat : option (pair nat nat) : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    SUB;        # int : option (pair nat nat) : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    ISNAT;      # option nat : option (pair nat nat) : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    IF_NONE
                      {
                        PUSH int 465; # int : option (pair nat nat) : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : option (pair nat nat) : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    DUG 2;      # option (pair nat nat) : @some : @some : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                  }; # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP;        # option (pair nat nat) : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                IF_NONE
                  {
                    DUP 4;      # @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    DUP 4;      # nat : @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    COMPARE;    # int : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    GT;         # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                  }
                  {
                    DROP;       # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                    PUSH bool False; # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                  }; # bool : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP;        # option (pair nat nat) : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF_NONE
              {
                DROP;       # @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 2;      # nat : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 2;      # @some : nat : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                PAIR;       # pair @some nat : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SOME;       # option (pair @some nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }
              {
                DROP;       # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP;        # option (pair nat nat) : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF_NONE
              {
                PUSH int 470; # int : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            UNPAIR;     # nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            PUSH nat 0; # nat : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP 2;      # nat : nat : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            COMPARE;    # int : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            EQ;         # bool : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF
              {
                PUSH nat 0; # nat : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 3;      # nat : nat : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                COMPARE;    # int : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                EQ;         # bool : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }
              {
                PUSH bool False; # bool : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # bool : nat : nat : option (pair nat nat) : @some : nat : @some : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF
              {
                DIG 6;      # bool : nat : nat : option (pair nat nat) : @some : nat : @some : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP 7;     # nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                PUSH bool False; # bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }
              {
                DIG 7;      # nat : nat : nat : option (pair nat nat) : @some : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP 2;     # nat : option (pair nat nat) : @some : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SWAP;       # option (pair nat nat) : nat : @some : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP;       # nat : @some : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SWAP;       # @some : nat : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP;       # nat : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SWAP;       # nat : nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP;       # nat : @some : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SWAP;       # @some : nat : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DROP;       # nat : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DIG 3;      # list nat : nat : bool : @some : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 2;      # nat : list nat : nat : bool : @some : @some : nat : nat : nat : nat : lambda nat nat : nat
                CONS;       # list nat : nat : bool : @some : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUG 3;      # nat : bool : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                SWAP;       # bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            DUP;        # bool : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
            IF
              {
                PUSH nat 0; # nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                DUP 4;      # @some : nat : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                COMPARE;    # int : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
                GT;         # bool : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }
              {
                PUSH bool False; # bool : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
              }; # bool : bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
          }; # bool : nat : @some : list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        DROP 3;     # list nat : @some : nat : nat : nat : nat : lambda nat nat : nat
        SWAP;       # @some : list nat : nat : nat : nat : nat : lambda nat nat : nat
        DROP;       # list nat : nat : nat : nat : nat : lambda nat nat : nat
        SWAP;       # nat : list nat : nat : nat : nat : lambda nat nat : nat
        DROP;       # list nat : nat : nat : nat : lambda nat nat : nat
        SWAP;       # nat : list nat : nat : nat : lambda nat nat : nat
        DROP;       # list nat : nat : nat : lambda nat nat : nat
        SWAP;       # nat : list nat : nat : lambda nat nat : nat
        DROP;       # list nat : nat : lambda nat nat : nat
        SWAP;       # nat : list nat : lambda nat nat : nat
        DROP;       # list nat : lambda nat nat : nat
        SWAP;       # lambda nat nat : list nat : nat
        DROP;       # list nat : nat
        SWAP;       # nat : list nat
        DROP;       # list nat
        NIL nat;    # list nat : list nat
        SWAP;       # list nat : list nat
        ITER
          {
            CONS;       # list nat
          }; # list nat
      }; # lambda nat (list nat) : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 10;     # @parameter : lambda nat (list nat) : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    GET 3;      # nat : lambda nat (list nat) : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    EXEC;       # list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH (pair (map int bytes) int) (Pair {} 0); # pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH int 0; # int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 5;      # map int bytes : int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PAIR;       # pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 6;      # map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH bool True; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 5;      # list nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    ITER
      {
        DUP 2;      # bool : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        IF
          {
            EMPTY_MAP nat (pair bytes (pair nat nat)); # map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            PUSH nat 0; # nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            DUP 5;      # map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            SIZE;       # nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            COMPARE;    # int : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            GT;         # bool : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            IF
              {
                EMPTY_MAP nat (pair bytes (pair nat nat)); # map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                PUSH nat 0; # nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                EMPTY_MAP int (pair bytes (pair nat nat)); # map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                PUSH int 0; # int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DUP;        # int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                PUSH bool False; # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DUP 10;     # map int (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                ITER
                  {
                    CDR;        # pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 2;      # bool : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF
                      {
                        PUSH bool True; # bool : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }
                      {
                        DUP;        # pair bytes (pair nat nat) : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GET 4;      # nat : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 10;     # nat : nat : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF
                      {
                        SWAP;       # bool : pair bytes (pair nat nat) : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # pair bytes (pair nat nat) : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 3;      # map int (pair bytes (pair nat nat)) : pair bytes (pair nat nat) : int : int : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # pair bytes (pair nat nat) : map int (pair bytes (pair nat nat)) : int : int : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SOME;       # option (pair bytes (pair nat nat)) : map int (pair bytes (pair nat nat)) : int : int : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 4;      # int : option (pair bytes (pair nat nat)) : map int (pair bytes (pair nat nat)) : int : int : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        UPDATE;     # map int (pair bytes (pair nat nat)) : int : int : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 2;      # int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 1; # int : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH bool True; # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }
                      {
                        DIG 6;      # map nat (pair bytes (pair nat nat)) : pair bytes (pair nat nat) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # pair bytes (pair nat nat) : map nat (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SOME;       # option (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 7;      # nat : option (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        UPDATE;     # map nat (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 5;      # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 4;      # nat : bool : int : int : map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : nat : bool : int : int : map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # nat : bool : int : int : map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 4;      # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }; # bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DIG 6;      # map nat (pair bytes (pair nat nat)) : bool : int : int : map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DROP 4;     # map int (pair bytes (pair nat nat)) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                SWAP;       # nat : map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DROP;       # map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DIG 4;      # map int (pair bytes (pair nat nat)) : map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DROP;       # map int (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DUG 3;      # map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
              }
              {}; # map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            DUP;        # map nat (pair bytes (pair nat nat)) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            SIZE;       # nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            PUSH nat 0; # nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            DUP 2;      # nat : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            COMPARE;    # int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            EQ;         # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            IF
              {
                DUP 6;      # pair (map int bytes) int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                CDR;        # int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DUP 7;      # pair (map int bytes) int : int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                CAR;        # map int bytes : int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                SIZE;       # nat : int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                INT;        # int : int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                COMPARE;    # int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                EQ;         # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                IF
                  {
                    DIG 3;      # bool : nat : map nat (pair bytes (pair nat nat)) : nat : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP 4;     # map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH bool False; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }
                  {
                    DROP 3;     # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 4;      # pair (map int bytes) int : map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    GET;        # option bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF_NONE
                      {
                        PUSH int 66; # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 3;      # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 1; # int : int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ADD;        # int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 2;   # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUG 3;      # @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 5;      # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # map int bytes : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # @some : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SOME;       # option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 6;      # pair (map int bytes) int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE;     # map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 1;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 1; # int : int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ADD;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 2;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUG 3;      # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
              }
              {
                PUSH nat 1; # nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                DUP 2;      # nat : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                COMPARE;    # int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                EQ;         # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                IF
                  {
                    DUP 3;      # nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # map nat (pair bytes (pair nat nat)) : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : map nat (pair bytes (pair nat nat)) : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    GET;        # option (pair bytes (pair nat nat)) : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF_NONE
                      {
                        PUSH int 254; # int : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    GET 4;      # nat : nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    EQ;         # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }
                  {
                    PUSH bool False; # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }; # bool : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                IF
                  {
                    DROP;       # map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map nat (pair bytes (pair nat nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map nat (pair bytes (pair nat nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 5;      # pair (map int bytes) int : map nat (pair bytes (pair nat nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : map nat (pair bytes (pair nat nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # map int bytes : pair (map int bytes) int : map nat (pair bytes (pair nat nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # map nat (pair bytes (pair nat nat)) : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : map nat (pair bytes (pair nat nat)) : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    GET;        # option (pair bytes (pair nat nat)) : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF_NONE
                      {
                        PUSH int 255; # int : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SOME;       # option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 6;      # pair (map int bytes) int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE;     # map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 1;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 1; # int : int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ADD;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 2;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUG 3;      # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }
                  {
                    EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    EMPTY_MAP nat nat; # map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 5;      # map nat (pair bytes (pair nat nat)) : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SIZE;       # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # nat : nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LT;         # bool : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        DUP 6;      # map nat (pair bytes (pair nat nat)) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : map nat (pair bytes (pair nat nat)) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GET;        # option (pair bytes (pair nat nat)) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF_NONE
                          {
                            PUSH int 397; # int : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 4;      # map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # @some : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GET 3;      # nat : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # @some : nat : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        CAR;        # bytes : nat : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PAIR;       # pair bytes nat : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 5;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        UPDATE;     # map nat (pair bytes nat) : @some : nat : nat : map nat nat : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 4;      # @some : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 3;      # map nat nat : @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # @some : map nat nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GET 3;      # nat : map nat nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SOME;       # option nat : map nat nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 4;      # nat : option nat : map nat nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        UPDATE;     # map nat nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 2;      # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # map nat nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 5;      # map nat (pair bytes nat) : map nat nat : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PAIR;       # pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map nat (pair bytes nat)) (map nat nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 2;      # pair (map nat (pair bytes nat)) (map nat nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 1; # nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 11;     # nat : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ADD;        # nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 0; # int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 2;      # nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 2;      # nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    GT;         # bool : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        DUP;        # nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 2;      # nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ABS;        # nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        AND;        # nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # int : nat : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 1; # int : int : nat : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # int : nat : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GT;         # bool : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 2;      # int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 64; # int : int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SUB;        # int : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ISNAT;      # option nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF_NONE
                      {
                        PUSH string "NEGATIVE_RESULT"; # string : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH bool False; # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 64; # nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LT;         # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        PUSH nat 0; # nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 9223372036854775808; # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 4;      # nat : nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 10;     # nat : nat : nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LSL;        # nat : nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        AND;        # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        NEQ;        # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            DROP;       # nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH bool True; # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            DIG 2;      # nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUG 2;      # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # nat : bool : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            PUSH bool False; # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            PUSH nat 64; # nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 9;      # nat : nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    NEQ;        # bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    IF
                      {
                        DUP;        # nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 6;      # @some : nat : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        EQ;         # bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }
                      {
                        PUSH bool False; # bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # bool : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    NOT;        # bool : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        PUSH nat 0; # nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH bool False; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 64; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            PUSH nat 0; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 9223372036854775808; # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 4;      # nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 15;     # nat : nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LSL;        # nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            AND;        # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            NEQ;        # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                DROP;       # nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH bool True; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                DIG 2;      # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 2;      # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP;        # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                PUSH bool False; # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                PUSH nat 64; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 3;      # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                LT;         # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 8;      # @some : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 5;      # nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 64; # nat : nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ISNAT;      # option nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF_NONE
                          {
                            PUSH string "NEGATIVE_RESULT"; # string : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ISNAT;      # option nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF_NONE
                          {
                            PUSH string "NEGATIVE_RESULT"; # string : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : @some : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LSL;        # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 11;     # nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        INT;        # int : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ISNAT;      # option nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF_NONE
                          {
                            PUSH string "NEGATIVE_RESULT"; # string : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 10;     # bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 0; # int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 12;     # @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # @some : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        GT;         # bool : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            DUP;        # @some : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : @some : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DIG 2;      # @some : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SUB;        # int : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ABS;        # nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            AND;        # nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # int : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH int 1; # int : int : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # int : nat : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 0; # nat : nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # nat : nat : nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            GT;         # bool : nat : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # int : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 64; # int : int : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SUB;        # int : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ISNAT;      # option nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF_NONE
                          {
                            PUSH string "NEGATIVE_RESULT"; # string : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 10;     # @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH bool False; # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 64; # nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            PUSH nat 0; # nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 9223372036854775808; # nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 4;      # nat : nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 20;     # @some : nat : nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LSL;        # nat : nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            AND;        # nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            NEQ;        # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                DROP;       # nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH bool True; # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                DIG 2;      # nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 2;      # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : bool : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP;        # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                PUSH bool False; # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                PUSH nat 64; # nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 3;      # nat : nat : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                COMPARE;    # int : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                LT;         # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # bool : bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : nat : nat : @some : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DIG 9;      # nat : bool : nat : nat : @some : int : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP 3;     # nat : @some : int : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # @some : nat : int : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : int : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # int : nat : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : bool : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # bool : nat : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : bool : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DROP;       # nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 9;      # @some : nat : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        NEQ;        # bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            DUP;        # nat : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 6;      # @some : nat : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            EQ;         # bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            PUSH bool False; # bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # bool : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        NOT;        # bool : bool : nat : bool : nat : nat : @some : nat : int : @some : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 0; # nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH bool False; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 64; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LT;         # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        PUSH nat 0; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 9223372036854775808; # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 4;      # nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 15;     # nat : nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LSL;        # nat : nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        AND;        # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        NEQ;        # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            DROP;       # nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH bool True; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            DIG 2;      # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUG 2;      # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 1; # nat : nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # nat : bool : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            PUSH bool False; # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            PUSH nat 64; # nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # nat : nat : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 1; # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 4;      # nat : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH nat 64; # nat : nat : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SUB;        # int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SUB;        # int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    EMPTY_MAP int (map nat (pair bytes nat)); # map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 0; # int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH bool True; # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 4;      # int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 3;      # int : int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    COMPARE;    # int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LT;         # bool : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LOOP
                      {
                        DIG 2;      # map int (map nat (pair bytes nat)) : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH (option (map nat (pair bytes nat))) (Some {}); # option (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 4;      # int : option (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        UPDATE;     # map int (map nat (pair bytes nat)) : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUG 2;      # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        EMPTY_MAP nat nat; # map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 18;     # map nat nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SIZE;       # nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # nat : nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            DUP 20;     # map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            GET;        # option nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF_NONE
                              {
                                PUSH int 356; # int : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 0; # nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 2; # nat : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # @some : nat : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            EDIV;       # option (pair nat nat) : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF_NONE
                              {
                                PUSH int 357; # int : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                FAILWITH;   # FAILED
                              }
                              {
                                CDR;        # nat : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : nat : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            EQ;         # bool : @some : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                DIG 3;      # map nat nat : @some : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : map nat nat : @some : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 2;      # @some : nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 3;      # nat : option nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 2;      # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                DIG 3;      # map nat nat : @some : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : map nat nat : @some : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 2;      # @some : nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SUB;        # int : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ISNAT;      # option nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF_NONE
                                  {
                                    PUSH int 360; # int : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 3;      # nat : option nat : map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map nat nat : nat : nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 2;      # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # nat : nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        EMPTY_MAP int nat; # map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 0; # int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # map nat nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SIZE;       # nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 25;     # map nat nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SIZE;       # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 3;      # nat : nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            DUP 6;      # map nat nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # nat : map nat nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            GET;        # option nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF_NONE
                              {
                                PUSH int 322; # int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH bool False; # bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 0; # nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 4;      # nat : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # nat : nat : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LOOP
                              {
                                SWAP;       # bool : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF
                                  {
                                    PUSH bool True; # bool : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                  }
                                  {
                                    DUP 28;     # map nat nat : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    DUP 2;      # nat : map nat nat : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    GET;        # option nat : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    IF_NONE
                                      {
                                        PUSH int 327; # int : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    DUP 3;      # @some : @some : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    COMPARE;    # int : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    EQ;         # bool : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                  }; # bool : nat : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SWAP;       # nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 4;      # nat : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 2;      # nat : nat : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                COMPARE;    # int : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                LT;         # bool : nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # bool : @some : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF
                              {
                                DROP;       # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }
                              {
                                DIG 5;      # map int nat : @some : nat : nat : nat : int : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SWAP;       # @some : map int nat : nat : nat : nat : int : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option nat : map int nat : nat : nat : nat : int : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 6;      # int : option nat : map int nat : nat : nat : nat : int : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map int nat : nat : nat : nat : int : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 4;      # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 3;      # int : nat : nat : nat : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH int 1; # int : int : nat : nat : nat : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # int : nat : nat : nat : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 3;      # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 1; # nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # nat : nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        EMPTY_SET nat; # set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 0; # int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 6;      # int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # int : int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LT;         # bool : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        LOOP
                          {
                            SWAP;       # set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH bool True; # bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 8;      # map int nat : bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 4;      # int : map int nat : bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            GET;        # option nat : bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            IF_NONE
                              {
                                PUSH int 339; # int : bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : bool : set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            UPDATE;     # set nat : int : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH int 1; # int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ADD;        # int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 6;      # int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 2;      # int : int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # set nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SIZE;       # nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH nat 0; # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP 2;      # nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        COMPARE;    # int : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        EQ;         # bool : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            DIG 13;     # bool : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP 14;    # int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH bool False; # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            PUSH nat 0; # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # set nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            ITER
                              {
                                DUP 44;     # pair (map int bytes) int : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                CAR;        # map int bytes : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 45;     # pair (map int bytes) int : map int bytes : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                CDR;        # int : map int bytes : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                GET;        # option bytes : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF_NONE
                                  {
                                    PUSH int 66; # int : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 44;     # pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                CDR;        # int : pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH int 1; # int : int : pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # int : pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE 2;   # pair (map int bytes) int : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 44;     # @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 18;     # map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP;        # map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 20;     # int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP;        # int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 2;      # int : map int (map nat (pair bytes nat)) : int : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                GET;        # option (map nat (pair bytes nat)) : int : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF_NONE
                                  {
                                    PUSH int 302; # int : int : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : int : map int (map nat (pair bytes nat)) : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 4;      # nat : @some : int : map int (map nat (pair bytes nat)) : @some : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 4;      # @some : nat : @some : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PAIR;       # pair @some nat : @some : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option (pair @some nat) : @some : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 5;      # nat : option (pair @some nat) : @some : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map nat (pair bytes nat) : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option (map nat (pair bytes nat)) : int : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SWAP;       # int : option (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map int (map nat (pair bytes nat)) : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 16;     # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DIG 11;     # nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            EMPTY_MAP nat nat; # map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 12;     # map nat nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SIZE;       # nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            PUSH nat 0; # nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUG 13;     # nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP;        # nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 15;     # nat : nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LOOP
                              {
                                DUP 13;     # map nat nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 15;     # nat : map nat nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                GET;        # option nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF_NONE
                                  {
                                    PUSH int 378; # int : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 2;      # map nat nat : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 2; # nat : map nat nat : @some : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 2;      # @some : nat : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                EDIV;       # option (pair nat nat) : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                IF_NONE
                                  {
                                    PUSH int 379; # int : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    CAR;        # nat : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                  }; # nat : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SOME;       # option nat : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 15;     # nat : option nat : map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                UPDATE;     # map nat nat : nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                SWAP;       # nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DIG 13;     # nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                PUSH nat 1; # nat : nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                ADD;        # nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUG 13;     # nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP;        # nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                DUP 15;     # nat : nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                COMPARE;    # int : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                                LT;         # bool : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                              }; # nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DIG 32;     # map nat nat : nat : map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP 2;     # map nat nat : nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : set nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # set nat : map nat nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : int : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # int : map nat nat : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : set nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # set nat : map nat nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : int : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # int : map nat nat : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : map int nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # map int nat : map nat nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # map nat nat : map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # nat : map nat nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            SWAP;       # map nat nat : map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DROP;       # map nat nat : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUG 16;     # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # int : bool : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        PUSH int 1; # int : int : bool : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        ADD;        # int : bool : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        SWAP;       # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        DUP;        # bool : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                        IF
                          {
                            DUP 4;      # int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            DUP 3;      # int : int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            COMPARE;    # int : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                            LT;         # bool : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }
                          {
                            PUSH bool False; # bool : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                          }; # bool : bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                      }; # bool : int : map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP 2;     # map int (map nat (pair bytes nat)) : int : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # int : map int (map nat (pair bytes nat)) : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : bool : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # bool : map int (map nat (pair bytes nat)) : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : bool : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # bool : map int (map nat (pair bytes nat)) : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : bool : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # bool : map int (map nat (pair bytes nat)) : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : @some : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # @some : map int (map nat (pair bytes nat)) : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : int : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # int : map int (map nat (pair bytes nat)) : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : nat : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # nat : map int (map nat (pair bytes nat)) : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat nat : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SWAP;       # map nat nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # pair (map nat (pair bytes nat)) (map nat nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat nat : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # map nat nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes (pair nat nat)) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # map nat (pair bytes (pair nat nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : nat : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 2;      # nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DROP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP 6;      # pair (map int bytes) int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CAR;        # map int bytes : pair (map int bytes) int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    LAMBDA
                      (pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat)))
                      bytes
                      {
                        LAMBDA_REC
                          (map nat (pair bytes nat))
                          (map nat (pair bytes nat))
                          {
                            DUP;        # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SIZE;       # nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            PUSH nat 1; # nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP 2;      # nat : nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            COMPARE;    # int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            GT;         # bool : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            IF
                              {
                                PUSH nat 2; # nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 2;      # nat : nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                EDIV;       # option (pair nat nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                IF_NONE
                                  {
                                    PUSH int 133; # int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    CAR;        # nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                  }; # nat : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                INT;        # int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                PUSH nat 0; # nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                PUSH nat 0; # nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP;        # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 7;      # nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 2;      # nat : nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                COMPARE;    # int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                LT;         # bool : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                LOOP
                                  {
                                    DUP 8;      # map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 2;      # nat : map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    GET;        # option (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    IF_NONE
                                      {
                                        PUSH int 141; # int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    PUSH int 0; # int : @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 8;      # int : int : @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    COMPARE;    # int : @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    GT;         # bool : @some : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    IF
                                      {
                                        DIG 5;      # map nat (pair bytes nat) : @some : nat : nat : map nat (pair bytes nat) : nat : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SWAP;       # @some : map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 6;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        UPDATE;     # map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : nat : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 4;      # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 3;      # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 3;      # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }
                                      {
                                        DIG 3;      # map nat (pair bytes nat) : @some : nat : nat : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SWAP;       # @some : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 4;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 2;      # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SWAP;       # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SWAP;       # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }; # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    PUSH nat 1; # nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    ADD;        # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DIG 5;      # int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    PUSH int 1; # int : int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SWAP;       # int : int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SUB;        # int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUG 5;      # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 7;      # nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 2;      # nat : nat : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    COMPARE;    # int : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    LT;         # bool : nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                  }; # nat : nat : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DROP 2;     # map nat (pair bytes nat) : nat : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                SWAP;       # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : int : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DIG 2;      # int : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DIG 2;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DIG 2;      # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 3;      # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DIG 2;      # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                EXEC;       # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUG 2;      # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                                EXEC;       # map nat (pair bytes nat) : map nat (pair bytes nat)
                                LAMBDA
                                  (pair (map nat (pair bytes nat)) (map nat (pair bytes nat)))
                                  (map nat (pair bytes nat))
                                  {
                                    DUP;        # pair (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    UNPAIR;     # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    PUSH nat 0; # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP;        # nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP;        # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 5;      # map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SIZE;       # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 7;      # map nat (pair bytes nat) : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SIZE;       # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 4;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 3;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    IF
                                      {
                                        DUP 3;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 2;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }
                                      {
                                        PUSH bool False; # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }; # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    LOOP
                                      {
                                        DUP 8;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 4;      # nat : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GET;        # option (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF_NONE
                                          {
                                            PUSH int 107; # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            FAILWITH;   # FAILED
                                          }
                                          {}; # @some : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        CDR;        # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 8;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 6;      # nat : map nat (pair bytes nat) : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GET;        # option (pair bytes nat) : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF_NONE
                                          {
                                            PUSH int 106; # int : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            FAILWITH;   # FAILED
                                          }
                                          {}; # @some : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        CDR;        # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        LT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF
                                          {
                                            DIG 5;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 7;      # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 6;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            GET;        # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            IF_NONE
                                              {
                                                PUSH int 106; # int : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                                FAILWITH;   # FAILED
                                              }
                                              {}; # @some : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 7;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUG 5;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DIG 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUG 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                          }
                                          {
                                            DIG 5;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 8;      # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 5;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            GET;        # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            IF_NONE
                                              {
                                                PUSH int 107; # int : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                                FAILWITH;   # FAILED
                                              }
                                              {}; # @some : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 7;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUG 5;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DIG 2;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUG 2;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                          }; # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 4;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF
                                          {
                                            DUP 3;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            DUP 2;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                          }
                                          {
                                            PUSH bool False; # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                          }; # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }; # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 4;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 3;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    LOOP
                                      {
                                        DIG 5;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 7;      # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 6;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GET;        # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF_NONE
                                          {
                                            PUSH int 119; # int : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            FAILWITH;   # FAILED
                                          }
                                          {}; # @some : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 7;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 5;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 4;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }; # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 3;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DUP 2;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    LOOP
                                      {
                                        DIG 5;      # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 8;      # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 5;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GET;        # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        IF_NONE
                                          {
                                            PUSH int 123; # int : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                            FAILWITH;   # FAILED
                                          }
                                          {}; # @some : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 7;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 5;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 2;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 2;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DIG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        PUSH nat 1; # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        ADD;        # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUG 4;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 3;      # nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        DUP 2;      # nat : nat : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        COMPARE;    # int : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                        GT;         # bool : nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                      }; # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DROP 5;     # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SWAP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SWAP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    DROP;       # map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    SWAP;       # pair (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                                    DROP;       # map nat (pair bytes nat)
                                  }; # lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes nat)
                                SWAP;       # map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                                DIG 2;      # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                PAIR;       # pair (map nat (pair bytes nat)) (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                EXEC;       # map nat (pair bytes nat)
                              }
                              {
                                DROP;       # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                SWAP;       # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                                DROP;       # map nat (pair bytes nat)
                              }; # map nat (pair bytes nat)
                          }; # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        LAMBDA
                          (pair (map nat (pair bytes nat)) (map nat (pair bytes nat)))
                          (map nat (pair bytes nat))
                          {
                            DUP;        # pair (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            UNPAIR;     # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP;        # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            PUSH nat 0; # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP 2;      # map nat (pair bytes nat) : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SIZE;       # nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP 5;      # map nat (pair bytes nat) : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SIZE;       # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP 5;      # map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SIZE;       # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            ADD;        # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP;        # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DUP 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            COMPARE;    # int : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            LT;         # bool : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            LOOP
                              {
                                DIG 3;      # map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 6;      # map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 5;      # nat : map nat (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                GET;        # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                IF_NONE
                                  {
                                    PUSH int 88; # int : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 4;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUG 3;      # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DIG 2;      # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                PUSH nat 1; # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                ADD;        # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUG 2;      # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                SWAP;       # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                PUSH nat 1; # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                ADD;        # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                SWAP;       # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP;        # nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                DUP 3;      # nat : nat : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                COMPARE;    # int : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                                LT;         # bool : nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                              }; # nat : nat : nat : map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DROP 3;     # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SWAP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SWAP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            DROP;       # map nat (pair bytes nat) : pair (map nat (pair bytes nat)) (map nat (pair bytes nat))
                            SWAP;       # pair (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                            DROP;       # map nat (pair bytes nat)
                          }; # lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 3;      # pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        UNPAIR;     # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 2;      # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 6;      # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 6;      # lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 5;      # map int (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        PUSH int 0; # int : map int (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        GET;        # option (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        IF_NONE
                          {
                            PUSH int 181; # int : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 7;      # map nat (pair bytes nat) : @some : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        PAIR;       # pair (map nat (pair bytes nat)) @some : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        EXEC;       # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        EXEC;       # map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SOME;       # option (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        PUSH int 0; # int : option (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        UPDATE;     # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP;        # map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SIZE;       # nat : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        INT;        # int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        PUSH int 0; # int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 2;      # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DUP 2;      # int : int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        COMPARE;    # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        LT;         # bool : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        LOOP
                          {
                            DUP 3;      # map int (map nat (pair bytes nat)) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 2;      # int : map int (map nat (pair bytes nat)) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            GET;        # option (map nat (pair bytes nat)) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            IF_NONE
                              {
                                PUSH int 187; # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            PUSH nat 0; # nat : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 6;      # map nat (pair bytes nat) : nat : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            SIZE;       # nat : nat : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            COMPARE;    # int : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            EQ;         # bool : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            IF
                              {
                                DIG 4;      # map nat (pair bytes nat) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DROP;       # @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP;        # @some : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                              }
                              {
                                DUP 9;      # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 9;      # lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DIG 6;      # map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 4;      # @some : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                PAIR;       # pair @some (map nat (pair bytes nat)) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                EXEC;       # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                EXEC;       # map nat (pair bytes nat) : @some : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                SWAP;       # @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                              }; # @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            EMPTY_MAP nat (pair bytes nat); # map nat (pair bytes nat) : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUG 5;      # @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            PUSH nat 0; # nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 3;      # map nat (pair bytes nat) : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            SIZE;       # nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            PUSH nat 0; # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 2;      # nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 2;      # nat : nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            COMPARE;    # int : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            LT;         # bool : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            LOOP
                              {
                                DUP 5;      # map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 2;      # nat : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                GET;        # option (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                IF_NONE
                                  {
                                    PUSH int 199; # int : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP;        # @some : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                CDR;        # nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                PUSH nat 2; # nat : nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                SWAP;       # nat : nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                EDIV;       # option (pair nat nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                IF_NONE
                                  {
                                    PUSH int 200; # int : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    CAR;        # nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                  }; # nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                UPDATE 2;   # @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 3;      # nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                PUSH nat 1; # nat : nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 4;      # nat : nat : nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                ADD;        # nat : nat : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                COMPARE;    # int : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                GE;         # bool : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                IF
                                  {
                                    DIG 9;      # map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    SWAP;       # @some : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUP 5;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUG 8;      # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                  }
                                  {
                                    DUP 6;      # map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    PUSH nat 1; # nat : map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUP 4;      # nat : nat : map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    ADD;        # nat : map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    GET;        # option (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    IF_NONE
                                      {
                                        PUSH int 204; # int : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    CAR;        # bytes : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUP 2;      # @some : bytes : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    CAR;        # bytes : bytes : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    CONCAT;     # bytes : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    KECCAK;     # bytes : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    UPDATE 1;   # @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DIG 9;      # map nat (pair bytes nat) : @some : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    SWAP;       # @some : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    SOME;       # option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUP 5;      # nat : option (pair bytes nat) : map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    UPDATE;     # map nat (pair bytes nat) : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUG 8;      # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DIG 2;      # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    PUSH nat 1; # nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    ADD;        # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                    DUG 2;      # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                  }; # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                PUSH nat 2; # nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                ADD;        # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 2;      # nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                DUP 2;      # nat : nat : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                COMPARE;    # int : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                                LT;         # bool : nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                              }; # nat : nat : nat : @some : map nat (pair bytes nat) : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DROP 5;     # int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            PUSH int 1; # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            ADD;        # int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 2;      # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            DUP 2;      # int : int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            COMPARE;    # int : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                            LT;         # bool : int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                          }; # int : int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DROP 3;     # map nat (pair bytes nat) : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SWAP;       # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DROP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SWAP;       # map nat (pair bytes nat) : map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DROP;       # map nat (pair bytes nat) : lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SWAP;       # lambda (pair (map nat (pair bytes nat)) (map nat (pair bytes nat))) (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DROP;       # map nat (pair bytes nat) : lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SWAP;       # lambda (map nat (pair bytes nat)) (map nat (pair bytes nat)) : map nat (pair bytes nat) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        DROP;       # map nat (pair bytes nat) : pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))
                        SWAP;       # pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat)) : map nat (pair bytes nat)
                        DROP;       # map nat (pair bytes nat)
                        PUSH nat 1; # nat : map nat (pair bytes nat)
                        DUP 2;      # map nat (pair bytes nat) : nat : map nat (pair bytes nat)
                        SIZE;       # nat : nat : map nat (pair bytes nat)
                        COMPARE;    # int : map nat (pair bytes nat)
                        EQ;         # bool : map nat (pair bytes nat)
                        IF
                          {}
                          {
                            PUSH string "NOT_ROOT_NODE"; # string : map nat (pair bytes nat)
                            FAILWITH;   # FAILED
                          }; # map nat (pair bytes nat)
                        PUSH nat 0; # nat : map nat (pair bytes nat)
                        GET;        # option (pair bytes nat)
                        IF_NONE
                          {
                            PUSH int 216; # int
                            FAILWITH;   # FAILED
                          }
                          {}; # @some
                        CAR;        # bytes
                      }; # lambda (pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))) bytes : map int bytes : pair (map int bytes) int : map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 4;      # map nat (pair bytes nat) : lambda (pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))) bytes : map int bytes : pair (map int bytes) int : map int (map nat (pair bytes nat)) : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 4;      # map int (map nat (pair bytes nat)) : map nat (pair bytes nat) : lambda (pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))) bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PAIR;       # pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat)) : lambda (pair (map int (map nat (pair bytes nat))) (map nat (pair bytes nat))) bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    EXEC;       # bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    SOME;       # option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DIG 6;      # pair (map int bytes) int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE;     # map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 1;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUP;        # pair (map int bytes) int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    CDR;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    PUSH int 1; # int : int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    ADD;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    UPDATE 2;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                    DUG 3;      # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
                  }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
              }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
          }
          {
            DROP;       # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
          }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
      }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DIG 3;      # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP;        # pair (map int bytes) int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    CDR;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH int 1; # int : int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    SWAP;       # int : int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    SUB;        # int : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    UPDATE 2;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUG 3;      # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    PUSH int 0; # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DUP 5;      # pair (map int bytes) int : int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    CDR;        # int : int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    COMPARE;    # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    NEQ;        # bool : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    LOOP
      {
        DUP 4;      # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CAR;        # map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 5;      # pair (map int bytes) int : map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : map int bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        GET;        # option bytes : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 73; # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 4;      # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 1; # int : int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # int : int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SUB;        # int : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE 2;   # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUG 4;      # @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 5;      # pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CAR;        # map int bytes : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 6;      # pair (map int bytes) int : map int bytes : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : map int bytes : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        GET;        # option bytes : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 73; # int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 5;      # pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 1; # int : int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # int : int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SUB;        # int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE 2;   # pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUG 5;      # @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SWAP;       # @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 5;      # pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 1; # int : int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        ADD;        # int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE 2;   # pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUG 5;      # @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 6;      # pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP;        # pair (map int bytes) int : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CAR;        # map int bytes : pair (map int bytes) int : @some : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 2;      # @some : map int bytes : pair (map int bytes) int : @some : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 3;      # @some : @some : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CONCAT;     # bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        KECCAK;     # bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        SOME;       # option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DIG 6;      # pair (map int bytes) int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : option bytes : map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE;     # map int bytes : pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        UPDATE 1;   # pair (map int bytes) int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUG 3;      # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        PUSH int 0; # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        DUP 5;      # pair (map int bytes) int : int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        CDR;        # int : int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        COMPARE;    # int : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
        NEQ;        # bool : bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
      }; # bool : map int (pair bytes (pair nat nat)) : pair (map int bytes) int : pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP 3;     # pair (map int bytes) int : list nat : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    SWAP;       # list nat : pair (map int bytes) int : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : map int bytes : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DIG 2;      # map int bytes : pair (map int bytes) int : @some : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : map int (pair bytes (pair nat nat)) : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DIG 2;      # map int (pair bytes (pair nat nat)) : pair (map int bytes) int : @some : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : int : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DIG 2;      # int : pair (map int bytes) int : @some : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : nat : list bytes : nat : @parameter : @storage
    DIG 2;      # list (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos))) : pair (map int bytes) int : @some : nat : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : nat : list bytes : nat : @parameter : @storage
    DIG 2;      # nat : pair (map int bytes) int : @some : list bytes : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : list bytes : nat : @parameter : @storage
    DIG 2;      # list bytes : pair (map int bytes) int : @some : nat : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : nat : @parameter : @storage
    DIG 2;      # nat : pair (map int bytes) int : @some : @parameter : @storage
    DROP;       # pair (map int bytes) int : @some : @parameter : @storage
    DIG 2;      # @parameter : pair (map int bytes) int : @some : @storage
    DROP;       # pair (map int bytes) int : @some : @storage
    DIG 2;      # @storage : pair (map int bytes) int : @some
    DROP;       # pair (map int bytes) int : @some
    CAR;        # map int bytes : @some
    PUSH int 0; # int : map int bytes : @some
    GET;        # option bytes : @some
    IF_NONE
      {
        PUSH int 270; # int : @some
        FAILWITH;   # FAILED
      }
      {}; # @some : @some
    COMPARE;    # int
    EQ;         # bool
  };