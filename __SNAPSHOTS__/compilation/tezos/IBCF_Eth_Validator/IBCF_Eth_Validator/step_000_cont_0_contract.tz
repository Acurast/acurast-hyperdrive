parameter (or (list %configure (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))))) (pair %submit_block_state_root (nat %block_number) (bytes %state_root)));
storage   (pair (pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot)) (pair (set %history nat) (big_map %state_root nat (map address bytes))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SENDER;     # @sender : @parameter%configure : @storage
        DUP 3;      # @storage : @sender : @parameter%configure : @storage
        CAR;        # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : @sender : @parameter%configure : @storage
        CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : @sender : @parameter%configure : @storage
        CAR;        # pair (address %administrator) (nat %history_length) : @sender : @parameter%configure : @storage
        CAR;        # address : @sender : @parameter%configure : @storage
        COMPARE;    # int : @parameter%configure : @storage
        EQ;         # bool : @parameter%configure : @storage
        IF
          {}
          {
            PUSH string "NOT_ADMINISTRATOR"; # string : @parameter%configure : @storage
            FAILWITH;   # FAILED
          }; # @parameter%configure : @storage
        DUP;        # @parameter%configure : @parameter%configure : @storage
        ITER
          {
            DUP;        # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure : @storage
            IF_LEFT
              {
                SWAP;       # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : address : @parameter%configure : @storage
                DROP;       # address : @parameter%configure : @storage
                DIG 2;      # @storage : address : @parameter%configure
                UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : @parameter%configure
                UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : @parameter%configure
                UNPAIR;     # pair (address %administrator) (nat %history_length) : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : @parameter%configure
                CDR;        # nat : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : @parameter%configure
                DIG 4;      # address : nat : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                PAIR;       # pair address nat : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                PAIR;       # pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                PAIR;       # pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                PAIR;       # pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @parameter%configure
                SWAP;       # @parameter%configure : pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : nat : @parameter%configure : @storage
                    DROP;       # nat : @parameter%configure : @storage
                    DIG 2;      # @storage : nat : @parameter%configure
                    UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                    CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                    DIG 2;      # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                    SWAP;       # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                    PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                    PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @parameter%configure
                    SWAP;       # @parameter%configure : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : nat : @parameter%configure : @storage
                        DROP;       # nat : @parameter%configure : @storage
                        DIG 2;      # @storage : nat : @parameter%configure
                        UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                        UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                        UNPAIR;     # pair (address %administrator) (nat %history_length) : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                        CAR;        # address : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                        DIG 4;      # nat : address : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                        SWAP;       # address : nat : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                        PAIR;       # pair address nat : pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                        PAIR;       # pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                        PAIR;       # pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                        PAIR;       # pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @parameter%configure
                        SWAP;       # @parameter%configure : pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : nat : @parameter%configure : @storage
                            DROP;       # nat : @parameter%configure : @storage
                            DIG 2;      # @storage : nat : @parameter%configure
                            UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                            UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                            DIG 3;      # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                            UPDATE 3;   # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                            PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                            PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @parameter%configure
                            SWAP;       # @parameter%configure : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                          }
                          {
                            IF_LEFT
                              {
                                SWAP;       # or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : nat : @parameter%configure : @storage
                                DROP;       # nat : @parameter%configure : @storage
                                DIG 2;      # @storage : nat : @parameter%configure
                                UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                                UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : @parameter%configure
                                DIG 3;      # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                                UPDATE 5;   # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                                PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : @parameter%configure
                                PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @parameter%configure
                                SWAP;       # @parameter%configure : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                              }
                              {
                                DUP;        # set (or (address %add) (address %remove)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure : @storage
                                ITER
                                  {
                                    IF_LEFT
                                      {
                                        DIG 4;      # @storage : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DUP;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        GET 6;      # set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PUSH bool True; # bool : set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DIG 5;      # address : bool : set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UPDATE;     # set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UPDATE 6;   # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DUG 3;      # set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                                      }
                                      {
                                        DIG 4;      # @storage : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DUP;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        GET 6;      # set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PUSH bool False; # bool : set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : address : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DIG 5;      # address : bool : set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UPDATE;     # set address : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        UPDATE 6;   # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure
                                        DUG 3;      # set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                                      }; # set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                                  }; # set (or (address %add) (address %remove)) : or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove))))))) : @parameter%configure : @storage
                                DROP 2;     # @parameter%configure : @storage
                              }; # list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                          }; # list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                      }; # list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                  }; # list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
              }; # list (or (address %update_administrator) (or (nat %update_current_snapshot) (or (nat %update_history_length) (or (nat %update_minimum_endorsements) (or (nat %update_snapshot_interval) (set %update_validators (or (address %add) (address %remove)))))))) : pair (pair (pair (pair address nat) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }; # @parameter%configure : @storage
        DROP;       # @storage
      }
      {
        DUP;        # @parameter%submit_block_state_root : @parameter%submit_block_state_root : @storage
        UNPAIR;     # nat : bytes : @parameter%submit_block_state_root : @storage
        DUP 4;      # @storage : nat : bytes : @parameter%submit_block_state_root : @storage
        CAR;        # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : nat : bytes : @parameter%submit_block_state_root : @storage
        CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : bytes : @parameter%submit_block_state_root : @storage
        GET 6;      # set address : nat : bytes : @parameter%submit_block_state_root : @storage
        SENDER;     # @sender : set address : nat : bytes : @parameter%submit_block_state_root : @storage
        MEM;        # bool : nat : bytes : @parameter%submit_block_state_root : @storage
        IF
          {}
          {
            PUSH string "NOT_VALIDATOR"; # string : nat : bytes : @parameter%submit_block_state_root : @storage
            FAILWITH;   # FAILED
          }; # nat : bytes : @parameter%submit_block_state_root : @storage
        PUSH nat 0; # nat : nat : bytes : @parameter%submit_block_state_root : @storage
        DUP 5;      # @storage : nat : nat : bytes : @parameter%submit_block_state_root : @storage
        CAR;        # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : nat : nat : bytes : @parameter%submit_block_state_root : @storage
        CDR;        # nat : nat : nat : bytes : @parameter%submit_block_state_root : @storage
        COMPARE;    # int : nat : bytes : @parameter%submit_block_state_root : @storage
        EQ;         # bool : nat : bytes : @parameter%submit_block_state_root : @storage
        IF
          {
            DIG 3;      # @storage : nat : bytes : @parameter%submit_block_state_root
            UNPAIR;     # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            DUP 3;      # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            SWAP;       # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUG 3;      # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }
          {
            DUP;        # nat : nat : bytes : @parameter%submit_block_state_root : @storage
            DUP 5;      # @storage : nat : nat : bytes : @parameter%submit_block_state_root : @storage
            CAR;        # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : nat : nat : bytes : @parameter%submit_block_state_root : @storage
            CDR;        # nat : nat : nat : bytes : @parameter%submit_block_state_root : @storage
            COMPARE;    # int : nat : bytes : @parameter%submit_block_state_root : @storage
            EQ;         # bool : nat : bytes : @parameter%submit_block_state_root : @storage
            IF
              {}
              {
                PUSH string "INVALID_SNAPSHOT"; # string : nat : bytes : @parameter%submit_block_state_root : @storage
                FAILWITH;   # FAILED
              }; # nat : bytes : @parameter%submit_block_state_root : @storage
          }; # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUP 4;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        GET 4;      # big_map nat (map address bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        SWAP;       # nat : big_map nat (map address bytes) : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUP;        # nat : nat : big_map nat (map address bytes) : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUG 2;      # nat : big_map nat (map address bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        MEM;        # bool : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        IF
          {
            DIG 3;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            GET 4;      # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # big_map nat (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP 4;      # nat : big_map nat (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # nat : nat : big_map nat (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUG 2;      # nat : big_map nat (map address bytes) : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            GET;        # option (map address bytes) : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            IF_NONE
              {
                PUSH int 444; # int : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP 6;      # bytes : @some : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SOME;       # option bytes : @some : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SENDER;     # @sender : option bytes : @some : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE;     # map address bytes : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SOME;       # option (map address bytes) : nat : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SWAP;       # nat : option (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE;     # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE 4;   # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUG 3;      # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }
          {
            DIG 3;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            GET 4;      # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            EMPTY_MAP address bytes; # map address bytes : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP 5;      # bytes : map address bytes : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SOME;       # option bytes : map address bytes : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SENDER;     # @sender : option bytes : map address bytes : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE;     # map address bytes : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SOME;       # option (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP 4;      # nat : option (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE;     # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE 4;   # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUG 3;      # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }; # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUP 4;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        GET 4;      # big_map nat (map address bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        SWAP;       # nat : big_map nat (map address bytes) : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUP;        # nat : nat : big_map nat (map address bytes) : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUG 2;      # nat : big_map nat (map address bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        GET;        # option (map address bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        IF_NONE
          {
            PUSH string "UNPROCESSED_BLOCK_STATE"; # string : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        LAMBDA
          (pair nat (map address bytes))
          (option bytes)
          {
            DUP;        # pair nat (map address bytes) : pair nat (map address bytes)
            UNPAIR;     # nat : map address bytes : pair nat (map address bytes)
            EMPTY_MAP bytes nat; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 3;      # map address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            ITER
              {
                SWAP;       # map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                DUP;        # map bytes nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                DUG 2;      # map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                PUSH nat 1; # nat : map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DIG 3;      # map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                DUP 4;      # pair address bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                CDR;        # bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                GET;        # option nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                IF_NONE
                  {
                    PUSH nat 0; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                  }
                  {}; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                ADD;        # nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                SOME;       # option nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
                DIG 2;      # pair address bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                CDR;        # bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                UPDATE;     # map bytes nat : nat : map address bytes : pair nat (map address bytes)
              }; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP;        # map bytes nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            PUSH bytes 0x; # bytes : map bytes nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            SWAP;       # map bytes nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            ITER
              {
                CAR;        # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 3;      # map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 3;      # bytes : map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                GET;        # option nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                IF_NONE
                  {
                    PUSH nat 0; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                  }
                  {}; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 4;      # map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DUP 3;      # bytes : map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                GET;        # option nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                IF_NONE
                  {
                    PUSH int 106; # int : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                COMPARE;    # int : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                GT;         # bool : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                IF
                  {
                    SWAP;       # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                    DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                  }
                  {
                    DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                  }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
              }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            PUSH nat 0; # nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 3;      # map bytes nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            SIZE;       # nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            COMPARE;    # int : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            EQ;         # bool : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            IF
              {
                SWAP;       # map bytes nat : bytes : nat : map address bytes : pair nat (map address bytes)
                DROP;       # bytes : nat : map address bytes : pair nat (map address bytes)
                SWAP;       # nat : bytes : map address bytes : pair nat (map address bytes)
                DROP;       # bytes : map address bytes : pair nat (map address bytes)
                SWAP;       # map address bytes : bytes : pair nat (map address bytes)
                DROP;       # bytes : pair nat (map address bytes)
                SWAP;       # pair nat (map address bytes) : bytes
                DROP;       # bytes
                PUSH bool True; # bool : bytes
              }
              {
                DIG 3;      # map address bytes : bytes : map bytes nat : nat : pair nat (map address bytes)
                DROP;       # bytes : map bytes nat : nat : pair nat (map address bytes)
                DIG 3;      # pair nat (map address bytes) : bytes : map bytes nat : nat
                DROP;       # bytes : map bytes nat : nat
                DUP;        # bytes : bytes : map bytes nat : nat
                DUG 3;      # bytes : map bytes nat : nat : bytes
                GET;        # option nat : nat : bytes
                IF_NONE
                  {
                    PUSH int 113; # int : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : bytes
                COMPARE;    # int : bytes
                LT;         # bool : bytes
              }; # bool : bytes
            IF
              {
                DROP;       # 
                NONE bytes; # option bytes
              }
              {
                SOME;       # option bytes
              }; # option bytes
          }; # lambda (pair nat (map address bytes)) (option bytes) : @some : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        SWAP;       # @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        DUP 6;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        CAR;        # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        GET 3;      # nat : @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        PAIR;       # pair nat @some : lambda (pair nat (map address bytes)) (option bytes) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        EXEC;       # option bytes : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
        IF_NONE
          {
            DROP 3;     # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }
          {
            DROP;       # nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            DUP 4;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            UNPAIR;     # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            UNPAIR;     # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            SWAP;       # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            DIG 6;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            GET 5;      # nat : nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            ADD;        # nat : pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            SWAP;       # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            PAIR;       # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (set %history nat) (big_map %state_root nat (map address bytes)) : nat : bytes : @parameter%submit_block_state_root
            PAIR;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            GET 3;      # set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            PUSH bool True; # bool : set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP 4;      # nat : bool : set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE;     # set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            UPDATE 3;   # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            CAR;        # pair (address %administrator) (nat %history_length) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            CDR;        # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : bytes : @parameter%submit_block_state_root
            SWAP;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : nat : bytes : @parameter%submit_block_state_root
            DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : nat : bytes : @parameter%submit_block_state_root
            DUG 5;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            GET 3;      # set nat : nat : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            SIZE;       # nat : nat : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            COMPARE;    # int : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            GT;         # bool : nat : bytes : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
            IF
              {
                SWAP;       # bytes : nat : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                DROP;       # nat : @parameter%submit_block_state_root : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                SWAP;       # @parameter%submit_block_state_root : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                DROP;       # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                SWAP;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DUG 2;      # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                GET 3;      # set nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                ITER
                  {
                    SWAP;       # nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    DUP;        # nat : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    DUG 2;      # nat : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    SWAP;       # nat : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    DUP;        # nat : nat : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    DUG 2;      # nat : nat : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    COMPARE;    # int : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    LT;         # bool : nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                    IF
                      {
                        SWAP;       # nat : nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                        DROP;       # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                      }
                      {
                        DROP;       # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                      }; # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                  }; # nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                SWAP;       # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                GET 4;      # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                NONE (map address bytes); # option (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DUP 4;      # nat : option (map address bytes) : big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                UPDATE;     # big_map nat (map address bytes) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                UPDATE 4;   # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DUP;        # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                GET 3;      # set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                PUSH bool False; # bool : set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))) : nat
                DIG 3;      # nat : bool : set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                UPDATE;     # set nat : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
                UPDATE 3;   # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
              }
              {
                DROP 3;     # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
              }; # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
          }; # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
      }; # pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
    NIL operation; # list operation : pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes)))
    PAIR;       # pair (list operation) (pair (pair (pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) nat) (pair (set %history nat) (big_map %state_root nat (map address bytes))))
  };
view
  "validate_storage_proof" (pair (bytes %account) (pair (bytes %account_proof_rlp) (pair (nat %block_number) (pair (bytes %storage_proof_rlp) (bytes %storage_slot))))) bytes
  {
    UNPAIR;     # @parameter : @storage
    DUP;        # @parameter : @parameter : @storage
    UNPAIR 5;   # bytes : bytes : nat : bytes : bytes : @parameter : @storage
    LAMBDA
      (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)))
      bytes
      {
        DUP;        # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        UNPAIR 4;   # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        LAMBDA
          (pair bytes nat)
          bytes
          {
            DUP;        # pair bytes nat : pair bytes nat
            UNPAIR;     # bytes : nat : pair bytes nat
            DUP;        # bytes : bytes : nat : pair bytes nat
            SIZE;       # nat : bytes : nat : pair bytes nat
            LAMBDA
              bytes
              nat
              {
                DUP;        # bytes : bytes
                SIZE;       # nat : bytes
                DUP;        # nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
                LOOP
                  {
                    DUP 5;      # bytes : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                    SLICE;      # option bytes : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 126; # int : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF
                          {
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }
                          {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP;       # nat : @some : nat : nat : nat : nat : bytes
                    PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                    DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                    PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                    UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    INT;        # int : nat : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : bytes
                SWAP;       # nat : nat : bytes
                DROP;       # nat : bytes
                SWAP;       # bytes : nat
                DROP;       # nat
              }; # lambda bytes nat : nat : bytes : nat : pair bytes nat
            SWAP;       # nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            PUSH nat 0; # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            COMPARE;    # int : nat : lambda bytes nat : bytes : nat : pair bytes nat
            LT;         # bool : nat : lambda bytes nat : bytes : nat : pair bytes nat
            IF
              {}
              {
                PUSH string "Empty bytes array"; # string : nat : lambda bytes nat : bytes : nat : pair bytes nat
                FAILWITH;   # FAILED
              }; # nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            PUSH nat 2; # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            MUL;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP 5;      # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP;        # nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUG 2;      # nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            COMPARE;    # int : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            GE;         # bool : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            IF
              {}
              {
                PUSH string "Skip nibbles amount too large"; # string : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                FAILWITH;   # FAILED
              }; # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP;        # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            PUSH bytes 0x; # bytes : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP 7;      # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DUP 3;      # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            COMPARE;    # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            GT;         # bool : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            LOOP
              {
                DUP 6;      # lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 8;      # bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 1; # nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 2; # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 5;      # nat : nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                EDIV;       # option (pair nat nat) : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF_NONE
                  {
                    PUSH int 143; # int : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                  }; # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SLICE;      # option bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF_NONE
                  {
                    PUSH int 143; # int : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                EXEC;       # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 15; # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH (map nat nat) {Elt 0 4; Elt 1 0}; # map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 2; # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 5;      # nat : nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                EDIV;       # option (pair nat nat) : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF_NONE
                  {
                    PUSH int 147; # int : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CDR;        # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                  }; # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                GET;        # option nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF_NONE
                  {
                    PUSH int 147; # int : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DIG 2;      # nat : @some : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                LSR;        # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                AND;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PACK;       # bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 1; # nat : bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 2; # nat : nat : bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SLICE;      # option bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF_NONE
                  {
                    PUSH int 148; # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DIG 3;      # bytes : @some : nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                CONCAT;     # bytes : nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUG 2;      # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 1; # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                ADD;        # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 3;      # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                COMPARE;    # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                GT;         # bool : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
              }; # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DROP 2;     # bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # nat : bytes : nat : lambda bytes nat : bytes : nat : pair bytes nat
            DROP;       # bytes : nat : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # nat : bytes : lambda bytes nat : bytes : nat : pair bytes nat
            DROP;       # bytes : lambda bytes nat : bytes : nat : pair bytes nat
            SWAP;       # lambda bytes nat : bytes : bytes : nat : pair bytes nat
            DROP;       # bytes : bytes : nat : pair bytes nat
            SWAP;       # bytes : bytes : nat : pair bytes nat
            DROP;       # bytes : nat : pair bytes nat
            SWAP;       # nat : bytes : pair bytes nat
            DROP;       # bytes : pair bytes nat
            SWAP;       # pair bytes nat : bytes
            DROP;       # bytes
          }; # lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        LAMBDA
          (pair bytes (pair bytes nat))
          nat
          {
            DUP;        # pair bytes (pair bytes nat) : pair bytes (pair bytes nat)
            UNPAIR 3;   # bytes : bytes : nat : pair bytes (pair bytes nat)
            PUSH nat 0; # nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            PUSH bool True; # bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            DUP 3;      # bytes : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            SIZE;       # nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            DUP 5;      # bytes : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            SIZE;       # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            DUP 3;      # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            IF
              {
                SWAP;       # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP;        # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUG 2;      # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 8;      # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 6;      # nat : nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                ADD;        # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                COMPARE;    # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                LT;         # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
              }
              {
                PUSH bool False; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
              }; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            IF
              {
                DUP;        # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 5;      # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                COMPARE;    # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                LT;         # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
              }
              {
                PUSH bool False; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
              }; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            LOOP
              {
                DUP 6;      # bytes : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                PUSH nat 1; # nat : bytes : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 6;      # nat : nat : bytes : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                SLICE;      # option bytes : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                IF_NONE
                  {
                    PUSH int 173; # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 6;      # bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                PUSH nat 1; # nat : bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 10;     # nat : nat : bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 8;      # nat : nat : nat : bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                ADD;        # nat : nat : bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                SLICE;      # option bytes : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                IF_NONE
                  {
                    PUSH int 172; # int : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                COMPARE;    # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                NEQ;        # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                IF
                  {
                    DIG 2;      # bool : nat : nat : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DROP;       # nat : nat : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    PUSH bool False; # bool : nat : nat : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUG 2;      # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }
                  {
                    PUSH nat 1; # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DIG 4;      # nat : nat : nat : nat : bool : bytes : bytes : nat : pair bytes (pair bytes nat)
                    ADD;        # nat : nat : nat : bool : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUG 3;      # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }; # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                DUP 3;      # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                IF
                  {
                    SWAP;       # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUP;        # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUG 2;      # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUP 8;      # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUP 6;      # nat : nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    ADD;        # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    COMPARE;    # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    LT;         # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }
                  {
                    PUSH bool False; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                IF
                  {
                    DUP;        # nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    DUP 5;      # nat : nat : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    COMPARE;    # int : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                    LT;         # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }
                  {
                    PUSH bool False; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
                  }; # bool : nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
              }; # nat : nat : bool : nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            DROP 3;     # nat : bytes : bytes : nat : pair bytes (pair bytes nat)
            SWAP;       # bytes : nat : bytes : nat : pair bytes (pair bytes nat)
            DROP;       # nat : bytes : nat : pair bytes (pair bytes nat)
            SWAP;       # bytes : nat : nat : pair bytes (pair bytes nat)
            DROP;       # nat : nat : pair bytes (pair bytes nat)
            SWAP;       # nat : nat : pair bytes (pair bytes nat)
            DROP;       # nat : pair bytes (pair bytes nat)
            SWAP;       # pair bytes (pair bytes nat) : nat
            DROP;       # nat
          }; # lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        LAMBDA
          bytes
          bytes
          {
            DUP;        # bytes : bytes
            SIZE;       # nat : bytes
            PUSH nat 0; # nat : nat : bytes
            COMPARE;    # int : bytes
            LT;         # bool : bytes
            IF
              {}
              {
                PUSH string "Empty bytes array"; # string : bytes
                FAILWITH;   # FAILED
              }; # bytes
            LAMBDA
              bytes
              nat
              {
                DUP;        # bytes : bytes
                SIZE;       # nat : bytes
                DUP;        # nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
                LOOP
                  {
                    DUP 5;      # bytes : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                    SLICE;      # option bytes : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 126; # int : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF
                          {
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }
                          {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP;       # nat : @some : nat : nat : nat : nat : bytes
                    PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                    DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                    PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                    UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    INT;        # int : nat : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : bytes
                SWAP;       # nat : nat : bytes
                DROP;       # nat : bytes
                SWAP;       # bytes : nat
                DROP;       # nat
              }; # lambda bytes nat : bytes
            DUP;        # lambda bytes nat : lambda bytes nat : bytes
            LAMBDA
              (pair bytes nat)
              bytes
              {
                DUP;        # pair bytes nat : pair bytes nat
                UNPAIR;     # bytes : nat : pair bytes nat
                DUP;        # bytes : bytes : nat : pair bytes nat
                SIZE;       # nat : bytes : nat : pair bytes nat
                LAMBDA
                  bytes
                  nat
                  {
                    DUP;        # bytes : bytes
                    SIZE;       # nat : bytes
                    DUP;        # nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        DUP 5;      # bytes : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                        SLICE;      # option bytes : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 126; # int : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LOOP
                          {
                            PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF_NONE
                              {
                                PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                FAILWITH;   # FAILED
                              }
                              {
                                CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF
                              {
                                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }
                              {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP;       # nat : @some : nat : nat : nat : nat : bytes
                        PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                        DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                        PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                        UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        INT;        # int : nat : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : nat : bytes
                        DIG 3;      # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUG 2;      # nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : bytes
                        GT;         # bool : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : bytes
                    SWAP;       # nat : nat : bytes
                    DROP;       # nat : bytes
                    SWAP;       # bytes : nat
                    DROP;       # nat
                  }; # lambda bytes nat : nat : bytes : nat : pair bytes nat
                SWAP;       # nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 0; # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                COMPARE;    # int : nat : lambda bytes nat : bytes : nat : pair bytes nat
                LT;         # bool : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF
                  {}
                  {
                    PUSH string "Empty bytes array"; # string : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH nat 2; # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                MUL;        # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 5;      # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUG 2;      # nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                COMPARE;    # int : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                GE;         # bool : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                IF
                  {}
                  {
                    PUSH string "Skip nibbles amount too large"; # string : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    FAILWITH;   # FAILED
                  }; # nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                PUSH bytes 0x; # bytes : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 7;      # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DUP 3;      # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                COMPARE;    # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                GT;         # bool : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                LOOP
                  {
                    DUP 6;      # lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUP 8;      # bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 1; # nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 2; # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUP 5;      # nat : nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    EDIV;       # option (pair nat nat) : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    IF_NONE
                      {
                        PUSH int 143; # int : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                      }; # nat : nat : bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    SLICE;      # option bytes : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    IF_NONE
                      {
                        PUSH int 143; # int : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : lambda bytes nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    EXEC;       # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 15; # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH (map nat nat) {Elt 0 4; Elt 1 0}; # map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 2; # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUP 5;      # nat : nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    EDIV;       # option (pair nat nat) : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    IF_NONE
                      {
                        PUSH int 147; # int : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CDR;        # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                      }; # nat : map nat nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    GET;        # option nat : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    IF_NONE
                      {
                        PUSH int 147; # int : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DIG 2;      # nat : @some : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    LSR;        # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    AND;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PACK;       # bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 1; # nat : bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 2; # nat : nat : bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    SLICE;      # option bytes : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    IF_NONE
                      {
                        PUSH int 148; # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DIG 3;      # bytes : @some : nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    CONCAT;     # bytes : nat : nat : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUG 2;      # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    PUSH nat 1; # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    ADD;        # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUP;        # nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    DUP 3;      # nat : nat : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    COMPARE;    # int : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                    GT;         # bool : nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                  }; # nat : nat : bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DROP 2;     # bytes : nat : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # nat : bytes : nat : lambda bytes nat : bytes : nat : pair bytes nat
                DROP;       # bytes : nat : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # nat : bytes : lambda bytes nat : bytes : nat : pair bytes nat
                DROP;       # bytes : lambda bytes nat : bytes : nat : pair bytes nat
                SWAP;       # lambda bytes nat : bytes : bytes : nat : pair bytes nat
                DROP;       # bytes : bytes : nat : pair bytes nat
                SWAP;       # bytes : bytes : nat : pair bytes nat
                DROP;       # bytes : nat : pair bytes nat
                SWAP;       # nat : bytes : pair bytes nat
                DROP;       # bytes : pair bytes nat
                SWAP;       # pair bytes nat : bytes
                DROP;       # bytes
              }; # lambda (pair bytes nat) bytes : lambda bytes nat : lambda bytes nat : bytes
            SWAP;       # lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            DUP 4;      # bytes : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            PUSH nat 1; # nat : bytes : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            PUSH nat 0; # nat : nat : bytes : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            SLICE;      # option bytes : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            IF_NONE
              {
                PUSH int 188; # int : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : lambda bytes nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            EXEC;       # nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            DUP;        # nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            PUSH nat 4; # nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            SWAP;       # nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            LSR;        # nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            PUSH nat 0; # nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            DUP;        # nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            DUP 3;      # nat : nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            COMPARE;    # int : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            EQ;         # bool : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
            IF
              {
                DROP 3;     # lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                SWAP;       # lambda bytes nat : lambda (pair bytes nat) bytes : bytes
                DROP;       # lambda (pair bytes nat) bytes : bytes
                PUSH nat 2; # nat : lambda (pair bytes nat) bytes : bytes
              }
              {
                PUSH nat 1; # nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                COMPARE;    # int : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                EQ;         # bool : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                IF
                  {
                    DROP 3;     # lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                    SWAP;       # lambda bytes nat : lambda (pair bytes nat) bytes : bytes
                    DROP;       # lambda (pair bytes nat) bytes : bytes
                    PUSH nat 1; # nat : lambda (pair bytes nat) bytes : bytes
                  }
                  {
                    PUSH nat 2; # nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                    COMPARE;    # int : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                    EQ;         # bool : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                    IF
                      {
                        DROP 3;     # lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                        SWAP;       # lambda bytes nat : lambda (pair bytes nat) bytes : bytes
                        DROP;       # lambda (pair bytes nat) bytes : bytes
                        PUSH nat 2; # nat : lambda (pair bytes nat) bytes : bytes
                      }
                      {
                        PUSH nat 3; # nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                        COMPARE;    # int : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                        EQ;         # bool : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                        IF
                          {
                            DROP 3;     # lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            SWAP;       # lambda bytes nat : lambda (pair bytes nat) bytes : bytes
                            DROP;       # lambda (pair bytes nat) bytes : bytes
                          }
                          {
                            DUP 6;      # bytes : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            DUP 3;      # nat : bytes : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            PAIR;       # pair nat bytes : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            PUSH string "UNEXPECTED"; # string : pair nat bytes : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            PAIR;       # pair string (pair nat bytes) : nat : nat : nat : lambda (pair bytes nat) bytes : lambda bytes nat : bytes
                            FAILWITH;   # FAILED
                          }; # lambda (pair bytes nat) bytes : bytes
                        PUSH nat 1; # nat : lambda (pair bytes nat) bytes : bytes
                      }; # nat : lambda (pair bytes nat) bytes : bytes
                  }; # nat : lambda (pair bytes nat) bytes : bytes
              }; # nat : lambda (pair bytes nat) bytes : bytes
            DIG 2;      # bytes : nat : lambda (pair bytes nat) bytes
            PAIR;       # pair bytes nat : lambda (pair bytes nat) bytes
            EXEC;       # bytes
          }; # lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        LAMBDA
          (pair bytes nat)
          nat
          {
            UNPAIR;     # bytes : nat
            LAMBDA
              bytes
              nat
              {
                DUP;        # bytes : bytes
                SIZE;       # nat : bytes
                DUP;        # nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
                LOOP
                  {
                    DUP 5;      # bytes : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                    SLICE;      # option bytes : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 126; # int : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF
                          {
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }
                          {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP;       # nat : @some : nat : nat : nat : nat : bytes
                    PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                    DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                    PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                    UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    INT;        # int : nat : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : bytes
                SWAP;       # nat : nat : bytes
                DROP;       # nat : bytes
                SWAP;       # bytes : nat
                DROP;       # nat
              }; # lambda bytes nat : bytes : nat
            PUSH nat 64; # nat : lambda bytes nat : bytes : nat
            DUP 4;      # nat : nat : lambda bytes nat : bytes : nat
            COMPARE;    # int : lambda bytes nat : bytes : nat
            LT;         # bool : lambda bytes nat : bytes : nat
            IF
              {}
              {
                PUSH string "Invalid nibble position"; # string : lambda bytes nat : bytes : nat
                FAILWITH;   # FAILED
              }; # lambda bytes nat : bytes : nat
            SWAP;       # bytes : lambda bytes nat : nat
            PUSH nat 1; # nat : bytes : lambda bytes nat : nat
            PUSH nat 2; # nat : nat : bytes : lambda bytes nat : nat
            DUP 5;      # nat : nat : nat : bytes : lambda bytes nat : nat
            EDIV;       # option (pair nat nat) : nat : bytes : lambda bytes nat : nat
            IF_NONE
              {
                PUSH int 229; # int : nat : bytes : lambda bytes nat : nat
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : nat : bytes : lambda bytes nat : nat
              }; # nat : nat : bytes : lambda bytes nat : nat
            SLICE;      # option bytes : lambda bytes nat : nat
            IF_NONE
              {
                PUSH int 229; # int : lambda bytes nat : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : lambda bytes nat : nat
            EXEC;       # nat : nat
            PUSH nat 0; # nat : nat : nat
            PUSH nat 2; # nat : nat : nat : nat
            DIG 3;      # nat : nat : nat : nat
            EDIV;       # option (pair nat nat) : nat : nat
            IF_NONE
              {
                PUSH int 232; # int : nat : nat
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : nat : nat
              }; # nat : nat : nat
            COMPARE;    # int : nat
            EQ;         # bool : nat
            IF
              {
                PUSH nat 4; # nat : nat
                SWAP;       # nat : nat
                LSR;        # nat
              }
              {
                PUSH nat 15; # nat : nat
                AND;        # nat
              }; # nat
          }; # lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP 7;      # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        GET 4;      # lambda bytes (map nat bytes) : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP 7;      # bytes : lambda bytes (map nat bytes) : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        EXEC;       # map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP;        # map nat bytes : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        SIZE;       # nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP 6;      # lambda (pair bytes nat) bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        PUSH nat 0; # nat : lambda (pair bytes nat) bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP 9;      # bytes : nat : lambda (pair bytes nat) bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        PAIR;       # pair bytes nat : lambda (pair bytes nat) bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        EXEC;       # bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP;        # bytes : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        SIZE;       # nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        PUSH nat 0; # nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP;        # nat : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        DUP 5;      # nat : nat : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        COMPARE;    # int : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        EQ;         # bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
        IF
          {
            DROP 12;    # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : bytes
            DROP;       # bytes
            PUSH bytes 0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421; # bytes : bytes
            COMPARE;    # int
            EQ;         # bool
            IF
              {}
              {
                PUSH string "Bad empty proof"; # string
                FAILWITH;   # FAILED
              }; # 
            PUSH bytes 0x; # bytes
          }
          {
            PUSH bytes 0x; # bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            PUSH bool True; # bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            PUSH bytes 0x; # bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DUP 7;      # nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            PUSH nat 0; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DUP;        # nat : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DUP 3;      # nat : nat : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            COMPARE;    # int : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            GT;         # bool : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            LOOP
              {
                DUP 10;     # map nat bytes : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                SWAP;       # nat : map nat bytes : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                DUP;        # nat : nat : map nat bytes : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                DUG 2;      # nat : map nat bytes : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                GET;        # option bytes : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                IF_NONE
                  {
                    PUSH int 280; # int : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                DUP 5;      # bool : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                IF
                  {
                    PUSH bytes 0x; # bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUP 7;      # bytes : bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    COMPARE;    # int : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    EQ;         # bool : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    IF
                      {
                        DUP;        # @some : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        KECCAK;     # bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 20;     # bytes : bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        COMPARE;    # int : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EQ;         # bool : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF
                          {}
                          {
                            PUSH string "Bad first proof part"; # string : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            FAILWITH;   # FAILED
                          }; # @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                      }
                      {
                        DUP;        # @some : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        KECCAK;     # bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 7;      # bytes : bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        COMPARE;    # int : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EQ;         # bool : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF
                          {}
                          {
                            PUSH string "Bad hash"; # string : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            FAILWITH;   # FAILED
                          }; # @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                      }; # @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUP 18;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    GET 4;      # lambda bytes (map nat bytes) : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    SWAP;       # @some : lambda bytes (map nat bytes) : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUP;        # @some : @some : lambda bytes (map nat bytes) : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUG 2;      # @some : lambda bytes (map nat bytes) : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    EXEC;       # map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUP;        # map nat bytes : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    SIZE;       # nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    DUP;        # nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    PUSH nat 2; # nat : nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    COMPARE;    # int : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    EQ;         # bool : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                    IF
                      {
                        DUP 15;     # lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 21;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        GET 3;      # lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 4;      # map nat bytes : lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        PUSH nat 0; # nat : map nat bytes : lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        GET;        # option bytes : lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF_NONE
                          {
                            PUSH int 299; # int : lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : lambda bytes bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EXEC;       # bytes : lambda bytes bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EXEC;       # bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 17;     # lambda (pair bytes (pair bytes nat)) nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 11;     # nat : lambda (pair bytes (pair bytes nat)) nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 3;      # bytes : nat : lambda (pair bytes (pair bytes nat)) nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 15;     # bytes : bytes : nat : lambda (pair bytes (pair bytes nat)) nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        PAIR 3;     # pair bytes (pair bytes nat) : lambda (pair bytes (pair bytes nat)) nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EXEC;       # nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP;        # nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DIG 11;     # nat : nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        ADD;        # nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUG 10;     # nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 14;     # nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        PUSH nat 1; # nat : nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 8;      # nat : nat : nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        ADD;        # nat : nat : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        COMPARE;    # int : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EQ;         # bool : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF
                          {
                            DIG 7;      # bytes : nat : bytes : nat : map nat bytes : @some : nat : nat : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # nat : bytes : nat : map nat bytes : @some : nat : nat : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DIG 7;      # bool : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP 4;     # map nat bytes : @some : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 6;      # nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 6;      # nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            COMPARE;    # int : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EQ;         # bool : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF
                              {}
                              {
                                PUSH string "Unexpected end of proof (leaf)"; # string : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                FAILWITH;   # FAILED
                              }; # map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 16;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            GET 3;      # lambda bytes bytes : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # map nat bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PUSH nat 1; # nat : map nat bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            GET;        # option bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF_NONE
                              {
                                PUSH int 318; # int : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EXEC;       # bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUG 2;      # nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PUSH bool False; # bool : nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUG 3;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                          }
                          {
                            DIG 9;      # bytes : nat : bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP 4;     # map nat bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PUSH nat 1; # nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            GET;        # option bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF_NONE
                              {
                                PUSH int 323; # int : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 17;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            CAR;        # lambda bytes bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : lambda bytes bool : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP;        # @some : @some : lambda bytes bool : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUG 2;      # @some : lambda bytes bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EXEC;       # bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF
                              {
                                KECCAK;     # bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 4;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }
                              {
                                PUSH nat 32; # nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 18;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 3;      # @some : lambda bytes bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SIZE;       # nat : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                COMPARE;    # int : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EQ;         # bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                IF
                                  {}
                                  {
                                    PUSH string "INVALID_NODE"; # string : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                    FAILWITH;   # FAILED
                                  }; # @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 17;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SWAP;       # @some : lambda bytes bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 4;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                          }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                      }
                      {
                        DUP;        # nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        PUSH nat 17; # nat : nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        COMPARE;    # int : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EQ;         # bool : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF
                          {}
                          {
                            PUSH string "INVALID_NODE_LENGTH"; # string : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            FAILWITH;   # FAILED
                          }; # nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 12;     # nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        PUSH nat 1; # nat : nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        DUP 6;      # nat : nat : nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        ADD;        # nat : nat : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        COMPARE;    # int : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        EQ;         # bool : nat : map nat bytes : @some : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                        IF
                          {
                            DIG 5;      # bytes : nat : map nat bytes : @some : nat : nat : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # nat : map nat bytes : @some : nat : nat : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DIG 5;      # bool : nat : map nat bytes : @some : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP 2;     # map nat bytes : @some : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 6;      # nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PUSH nat 1; # nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 7;      # nat : nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            ADD;        # nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            COMPARE;    # int : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EQ;         # bool : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF
                              {
                                DUP 16;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SWAP;       # map nat bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PUSH nat 16; # nat : map nat bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET;        # option bytes : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                IF_NONE
                                  {
                                    PUSH int 338; # int : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : lambda bytes bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 2;      # nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PUSH bool False; # bool : nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 3;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }
                              {
                                DUP 10;     # lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 6;      # nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 16;     # bytes : nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PAIR;       # pair bytes nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PUSH nat 0; # nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 18;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : nat : nat : map nat bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DIG 3;      # map nat bytes : lambda bytes bytes : nat : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DIG 3;      # nat : map nat bytes : lambda bytes bytes : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET;        # option bytes : lambda bytes bytes : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                IF_NONE
                                  {
                                    PUSH int 353; # int : lambda bytes bytes : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : lambda bytes bytes : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SIZE;       # nat : nat : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                COMPARE;    # int : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EQ;         # bool : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                IF
                                  {}
                                  {
                                    PUSH string "Invalid exclusion proof"; # string : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                    FAILWITH;   # FAILED
                                  }; # nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PUSH bytes 0x; # bytes : nat : nat : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 2;      # nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                PUSH bool False; # bool : nat : nat : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 3;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                          }
                          {
                            DIG 7;      # bytes : nat : map nat bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP 2;     # map nat bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DROP;       # map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 8;      # bytes : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SIZE;       # nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 7;      # nat : nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            COMPARE;    # int : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            LT;         # bool : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF
                              {}
                              {
                                PUSH string "Continuing branch has depleted path"; # string : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                FAILWITH;   # FAILED
                              }; # map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 11;     # lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 7;      # nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 17;     # bytes : nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PAIR;       # pair bytes nat : lambda (pair bytes nat) nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EXEC;       # nat : map nat bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            GET;        # option bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF_NONE
                              {
                                PUSH int 371; # int : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            PUSH nat 1; # nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DIG 6;      # nat : nat : @some : nat : nat : bytes : bool : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            ADD;        # nat : @some : nat : nat : bytes : bool : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUG 5;      # @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP 17;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            CAR;        # lambda bytes bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            SWAP;       # @some : lambda bytes bool : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUP;        # @some : @some : lambda bytes bool : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            DUG 2;      # @some : lambda bytes bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            EXEC;       # bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                            IF
                              {
                                KECCAK;     # bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 4;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }
                              {
                                PUSH nat 32; # nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 18;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 3;      # @some : lambda bytes bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SIZE;       # nat : nat : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                COMPARE;    # int : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EQ;         # bool : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                IF
                                  {}
                                  {
                                    PUSH string "INVALID_NODE"; # string : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                    FAILWITH;   # FAILED
                                  }; # @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUP 17;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                GET 3;      # lambda bytes bytes : @some : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                SWAP;       # @some : lambda bytes bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                EXEC;       # bytes : nat : nat : bytes : bool : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                                DUG 4;      # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                              }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                          }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                      }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                  }
                  {
                    DROP;       # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                  }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                PUSH nat 1; # nat : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                ADD;        # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                DUP;        # nat : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                DUP 3;      # nat : nat : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                COMPARE;    # int : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
                GT;         # bool : nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
              }; # nat : nat : bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP 2;     # bytes : bool : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bool : bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bytes : bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : nat : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # nat : bytes : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : nat : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # nat : bytes : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bytes : bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : nat : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # nat : bytes : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : map nat bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # map nat bytes : bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : lambda (pair bytes nat) nat : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # lambda (pair bytes nat) nat : bytes : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : lambda bytes bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # lambda bytes bytes : bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : lambda (pair bytes (pair bytes nat)) nat : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # lambda (pair bytes (pair bytes nat)) nat : bytes : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : lambda (pair bytes nat) bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # lambda (pair bytes nat) bytes : bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bytes : bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # bytes : bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            DROP;       # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))
            SWAP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : bytes
            DROP;       # bytes
          }; # bytes
      }; # lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 8;      # @storage : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    GET 4;      # big_map nat (map address bytes) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 5;      # nat : big_map nat (map address bytes) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    GET;        # option (map address bytes) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    IF_NONE
      {
        PUSH string "UNPROCESSED_BLOCK_STATE"; # string : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP;        # @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    LAMBDA
      (pair nat (map address bytes))
      (option bytes)
      {
        DUP;        # pair nat (map address bytes) : pair nat (map address bytes)
        UNPAIR;     # nat : map address bytes : pair nat (map address bytes)
        EMPTY_MAP bytes nat; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
        DUP 3;      # map address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        ITER
          {
            SWAP;       # map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            DUP;        # map bytes nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            DUG 2;      # map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            PUSH nat 1; # nat : map bytes nat : pair address bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DIG 3;      # map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            DUP 4;      # pair address bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            CDR;        # bytes : map bytes nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            GET;        # option nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            IF_NONE
              {
                PUSH nat 0; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
              }
              {}; # nat : nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            ADD;        # nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            SOME;       # option nat : map bytes nat : pair address bytes : nat : map address bytes : pair nat (map address bytes)
            DIG 2;      # pair address bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            CDR;        # bytes : option nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            UPDATE;     # map bytes nat : nat : map address bytes : pair nat (map address bytes)
          }; # map bytes nat : nat : map address bytes : pair nat (map address bytes)
        DUP;        # map bytes nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        PUSH bytes 0x; # bytes : map bytes nat : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        SWAP;       # map bytes nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        ITER
          {
            CAR;        # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 3;      # map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 3;      # bytes : map bytes nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            GET;        # option nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            IF_NONE
              {
                PUSH nat 0; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
              }
              {}; # nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 4;      # map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            DUP 3;      # bytes : map bytes nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            GET;        # option nat : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            IF_NONE
              {
                PUSH int 106; # int : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            COMPARE;    # int : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            GT;         # bool : bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
            IF
              {
                SWAP;       # bytes : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
                DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
              }
              {
                DROP;       # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
              }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
          }; # bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        PUSH nat 0; # nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        DUP 3;      # map bytes nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        SIZE;       # nat : nat : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        COMPARE;    # int : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        EQ;         # bool : bytes : map bytes nat : nat : map address bytes : pair nat (map address bytes)
        IF
          {
            SWAP;       # map bytes nat : bytes : nat : map address bytes : pair nat (map address bytes)
            DROP;       # bytes : nat : map address bytes : pair nat (map address bytes)
            SWAP;       # nat : bytes : map address bytes : pair nat (map address bytes)
            DROP;       # bytes : map address bytes : pair nat (map address bytes)
            SWAP;       # map address bytes : bytes : pair nat (map address bytes)
            DROP;       # bytes : pair nat (map address bytes)
            SWAP;       # pair nat (map address bytes) : bytes
            DROP;       # bytes
            PUSH bool True; # bool : bytes
          }
          {
            DIG 3;      # map address bytes : bytes : map bytes nat : nat : pair nat (map address bytes)
            DROP;       # bytes : map bytes nat : nat : pair nat (map address bytes)
            DIG 3;      # pair nat (map address bytes) : bytes : map bytes nat : nat
            DROP;       # bytes : map bytes nat : nat
            DUP;        # bytes : bytes : map bytes nat : nat
            DUG 3;      # bytes : map bytes nat : nat : bytes
            GET;        # option nat : nat : bytes
            IF_NONE
              {
                PUSH int 113; # int : nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : bytes
            COMPARE;    # int : bytes
            LT;         # bool : bytes
          }; # bool : bytes
        IF
          {
            DROP;       # 
            NONE bytes; # option bytes
          }
          {
            SOME;       # option bytes
          }; # option bytes
      }; # lambda (pair nat (map address bytes)) (option bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    SWAP;       # @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 11;     # @storage : @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    CAR;        # pair (pair %config (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address)))) (nat %current_snapshot) : @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    CAR;        # pair (pair (address %administrator) (nat %history_length)) (pair (nat %minimum_endorsements) (pair (nat %snapshot_interval) (set %validators address))) : @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    GET 3;      # nat : @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PAIR;       # pair nat @some : lambda (pair nat (map address bytes)) (option bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    EXEC;       # option bytes : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    IF_NONE
      {
        PUSH string "NO_CONSENSUS_FOR_STATE"; # string : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    LAMBDA
      bytes
      (map nat bytes)
      {
        LAMBDA
          bytes
          nat
          {
            LAMBDA
              bytes
              nat
              {
                LAMBDA
                  bytes
                  nat
                  {
                    DUP;        # bytes : bytes
                    SIZE;       # nat : bytes
                    DUP;        # nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        DUP 5;      # bytes : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                        SLICE;      # option bytes : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 126; # int : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LOOP
                          {
                            PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF_NONE
                              {
                                PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                FAILWITH;   # FAILED
                              }
                              {
                                CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF
                              {
                                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }
                              {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP;       # nat : @some : nat : nat : nat : nat : bytes
                        PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                        DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                        PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                        UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        INT;        # int : nat : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : nat : bytes
                        DIG 3;      # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUG 2;      # nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : bytes
                        GT;         # bool : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : bytes
                    SWAP;       # nat : nat : bytes
                    DROP;       # nat : bytes
                    SWAP;       # bytes : nat
                    DROP;       # nat
                  }; # lambda bytes nat : bytes
                DUP;        # lambda bytes nat : lambda bytes nat : bytes
                DUP 3;      # bytes : lambda bytes nat : lambda bytes nat : bytes
                PUSH nat 1; # nat : bytes : lambda bytes nat : lambda bytes nat : bytes
                PUSH nat 0; # nat : nat : bytes : lambda bytes nat : lambda bytes nat : bytes
                SLICE;      # option bytes : lambda bytes nat : lambda bytes nat : bytes
                IF_NONE
                  {
                    PUSH int 297; # int : lambda bytes nat : lambda bytes nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda bytes nat : lambda bytes nat : bytes
                EXEC;       # nat : lambda bytes nat : bytes
                DUP;        # nat : nat : lambda bytes nat : bytes
                PUSH nat 128; # nat : nat : nat : lambda bytes nat : bytes
                COMPARE;    # int : nat : lambda bytes nat : bytes
                GT;         # bool : nat : lambda bytes nat : bytes
                IF
                  {
                    DROP 3;     # 
                    PUSH nat 1; # nat
                  }
                  {
                    DUP;        # nat : nat : lambda bytes nat : bytes
                    PUSH nat 184; # nat : nat : nat : lambda bytes nat : bytes
                    COMPARE;    # int : nat : lambda bytes nat : bytes
                    GT;         # bool : nat : lambda bytes nat : bytes
                    IF
                      {
                        SWAP;       # lambda bytes nat : nat : bytes
                        DROP;       # nat : bytes
                        SWAP;       # bytes : nat
                        DROP;       # nat
                        PUSH int 1; # int : nat
                        PUSH nat 128; # nat : int : nat
                        DIG 2;      # nat : nat : int
                        SUB;        # int : int
                        ADD;        # int
                        ISNAT;      # option nat
                        IF_NONE
                          {
                            PUSH int 303; # int
                            FAILWITH;   # FAILED
                          }
                          {}; # @some
                      }
                      {
                        DUP;        # nat : nat : lambda bytes nat : bytes
                        PUSH nat 192; # nat : nat : nat : lambda bytes nat : bytes
                        COMPARE;    # int : nat : lambda bytes nat : bytes
                        GT;         # bool : nat : lambda bytes nat : bytes
                        IF
                          {
                            PUSH nat 183; # nat : nat : lambda bytes nat : bytes
                            SWAP;       # nat : nat : lambda bytes nat : bytes
                            SUB;        # int : lambda bytes nat : bytes
                            ISNAT;      # option nat : lambda bytes nat : bytes
                            IF_NONE
                              {
                                PUSH int 307; # int : lambda bytes nat : bytes
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : bytes
                            DUP;        # @some : @some : lambda bytes nat : bytes
                            PUSH nat 1; # nat : @some : @some : lambda bytes nat : bytes
                            SWAP;       # @some : nat : @some : lambda bytes nat : bytes
                            DIG 3;      # lambda bytes nat : @some : nat : @some : bytes
                            DUP 5;      # bytes : lambda bytes nat : @some : nat : @some : bytes
                            PUSH nat 1; # nat : bytes : lambda bytes nat : @some : nat : @some : bytes
                            DIG 6;      # bytes : nat : bytes : lambda bytes nat : @some : nat : @some
                            SIZE;       # nat : nat : bytes : lambda bytes nat : @some : nat : @some
                            SUB;        # int : bytes : lambda bytes nat : @some : nat : @some
                            ISNAT;      # option nat : bytes : lambda bytes nat : @some : nat : @some
                            IF_NONE
                              {
                                PUSH int 310; # int : bytes : lambda bytes nat : @some : nat : @some
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : bytes : lambda bytes nat : @some : nat : @some
                            PUSH nat 1; # nat : @some : bytes : lambda bytes nat : @some : nat : @some
                            SLICE;      # option bytes : lambda bytes nat : @some : nat : @some
                            IF_NONE
                              {
                                PUSH int 311; # int : lambda bytes nat : @some : nat : @some
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : @some : nat : @some
                            DIG 4;      # @some : @some : lambda bytes nat : @some : nat
                            PUSH nat 0; # nat : @some : @some : lambda bytes nat : @some : nat
                            SLICE;      # option bytes : lambda bytes nat : @some : nat
                            IF_NONE
                              {
                                PUSH int 314; # int : lambda bytes nat : @some : nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : @some : nat
                            EXEC;       # nat : @some : nat
                            ADD;        # nat : nat
                            ADD;        # nat
                          }
                          {
                            DUP;        # nat : nat : lambda bytes nat : bytes
                            PUSH nat 248; # nat : nat : nat : lambda bytes nat : bytes
                            COMPARE;    # int : nat : lambda bytes nat : bytes
                            GT;         # bool : nat : lambda bytes nat : bytes
                            IF
                              {
                                SWAP;       # lambda bytes nat : nat : bytes
                                DROP;       # nat : bytes
                                SWAP;       # bytes : nat
                                DROP;       # nat
                                PUSH int 1; # int : nat
                                PUSH nat 192; # nat : int : nat
                                DIG 2;      # nat : nat : int
                                SUB;        # int : int
                                ADD;        # int
                                ISNAT;      # option nat
                                IF_NONE
                                  {
                                    PUSH int 319; # int
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some
                              }
                              {
                                PUSH nat 247; # nat : nat : lambda bytes nat : bytes
                                SWAP;       # nat : nat : lambda bytes nat : bytes
                                SUB;        # int : lambda bytes nat : bytes
                                ISNAT;      # option nat : lambda bytes nat : bytes
                                IF_NONE
                                  {
                                    PUSH int 322; # int : lambda bytes nat : bytes
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : lambda bytes nat : bytes
                                DUP;        # @some : @some : lambda bytes nat : bytes
                                PUSH nat 1; # nat : @some : @some : lambda bytes nat : bytes
                                SWAP;       # @some : nat : @some : lambda bytes nat : bytes
                                DIG 3;      # lambda bytes nat : @some : nat : @some : bytes
                                DUP 5;      # bytes : lambda bytes nat : @some : nat : @some : bytes
                                PUSH nat 1; # nat : bytes : lambda bytes nat : @some : nat : @some : bytes
                                DIG 6;      # bytes : nat : bytes : lambda bytes nat : @some : nat : @some
                                SIZE;       # nat : nat : bytes : lambda bytes nat : @some : nat : @some
                                SUB;        # int : bytes : lambda bytes nat : @some : nat : @some
                                ISNAT;      # option nat : bytes : lambda bytes nat : @some : nat : @some
                                IF_NONE
                                  {
                                    PUSH int 325; # int : bytes : lambda bytes nat : @some : nat : @some
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : bytes : lambda bytes nat : @some : nat : @some
                                PUSH nat 1; # nat : @some : bytes : lambda bytes nat : @some : nat : @some
                                SLICE;      # option bytes : lambda bytes nat : @some : nat : @some
                                IF_NONE
                                  {
                                    PUSH int 326; # int : lambda bytes nat : @some : nat : @some
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : lambda bytes nat : @some : nat : @some
                                DIG 4;      # @some : @some : lambda bytes nat : @some : nat
                                PUSH nat 0; # nat : @some : @some : lambda bytes nat : @some : nat
                                SLICE;      # option bytes : lambda bytes nat : @some : nat
                                IF_NONE
                                  {
                                    PUSH int 329; # int : lambda bytes nat : @some : nat
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : lambda bytes nat : @some : nat
                                EXEC;       # nat : @some : nat
                                ADD;        # nat : nat
                                ADD;        # nat
                              }; # nat
                          }; # nat
                      }; # nat
                  }; # nat
              }; # lambda bytes nat : bytes
            LAMBDA
              bytes
              nat
              {
                LAMBDA
                  bytes
                  nat
                  {
                    DUP;        # bytes : bytes
                    SIZE;       # nat : bytes
                    DUP;        # nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        DUP 5;      # bytes : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                        SLICE;      # option bytes : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 126; # int : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LOOP
                          {
                            PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF_NONE
                              {
                                PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                FAILWITH;   # FAILED
                              }
                              {
                                CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            IF
                              {
                                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                                DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                              }
                              {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                        DROP;       # nat : @some : nat : nat : nat : nat : bytes
                        PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                        DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                        PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                        CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                        UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        INT;        # int : nat : nat : nat : nat : nat : bytes
                        ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : nat : bytes
                        DIG 3;      # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUG 2;      # nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                        ADD;        # nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : bytes
                        GT;         # bool : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : bytes
                    SWAP;       # nat : nat : bytes
                    DROP;       # nat : bytes
                    SWAP;       # bytes : nat
                    DROP;       # nat
                  }; # lambda bytes nat : bytes
                SWAP;       # bytes : lambda bytes nat
                PUSH nat 1; # nat : bytes : lambda bytes nat
                PUSH nat 0; # nat : nat : bytes : lambda bytes nat
                SLICE;      # option bytes : lambda bytes nat
                IF_NONE
                  {
                    PUSH int 339; # int : lambda bytes nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda bytes nat
                EXEC;       # nat
                DUP;        # nat : nat
                PUSH nat 128; # nat : nat : nat
                COMPARE;    # int : nat
                GT;         # bool : nat
                IF
                  {
                    DROP;       # 
                    PUSH nat 0; # nat
                  }
                  {
                    DUP;        # nat : nat
                    PUSH nat 184; # nat : nat : nat
                    COMPARE;    # int : nat
                    GT;         # bool : nat
                    IF
                      {
                        PUSH bool True; # bool : nat
                      }
                      {
                        DUP;        # nat : nat
                        PUSH nat 192; # nat : nat : nat
                        SWAP;       # nat : nat : nat
                        COMPARE;    # int : nat
                        GE;         # bool : nat
                        IF
                          {
                            DUP;        # nat : nat
                            PUSH nat 248; # nat : nat : nat
                            COMPARE;    # int : nat
                            GT;         # bool : nat
                          }
                          {
                            PUSH bool False; # bool : nat
                          }; # bool : nat
                      }; # bool : nat
                    IF
                      {
                        DROP;       # 
                        PUSH nat 1; # nat
                      }
                      {
                        DUP;        # nat : nat
                        PUSH nat 192; # nat : nat : nat
                        COMPARE;    # int : nat
                        GT;         # bool : nat
                        IF
                          {
                            PUSH nat 1; # nat : nat
                            PUSH nat 183; # nat : nat : nat
                            DIG 2;      # nat : nat : nat
                            SUB;        # int : nat
                            ISNAT;      # option nat : nat
                            IF_NONE
                              {
                                PUSH int 356; # int : nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat
                            ADD;        # nat
                          }
                          {
                            PUSH nat 1; # nat : nat
                            PUSH nat 247; # nat : nat : nat
                            DIG 2;      # nat : nat : nat
                            SUB;        # int : nat
                            ISNAT;      # option nat : nat
                            IF_NONE
                              {
                                PUSH int 359; # int : nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat
                            ADD;        # nat
                          }; # nat
                      }; # nat
                  }; # nat
              }; # lambda bytes nat : lambda bytes nat : bytes
            DUP;        # lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            PUSH nat 0; # nat : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            SWAP;       # lambda bytes nat : nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 5;      # bytes : lambda bytes nat : nat : lambda bytes nat : lambda bytes nat : bytes
            EXEC;       # nat : nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 5;      # bytes : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            SIZE;       # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            DUP;        # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 3;      # nat : nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            COMPARE;    # int : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            LT;         # bool : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            LOOP
              {
                DUP 5;      # lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP 7;      # bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP 4;      # nat : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP 4;      # nat : nat : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                SUB;        # int : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                ISNAT;      # option nat : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                IF_NONE
                  {
                    PUSH int 240; # int : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP 5;      # nat : @some : bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                SLICE;      # option bytes : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                IF_NONE
                  {
                    PUSH int 241; # int : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda bytes nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                EXEC;       # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DIG 2;      # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                ADD;        # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                SWAP;       # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                PUSH nat 1; # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DIG 3;      # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                ADD;        # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUG 2;      # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP;        # nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                COMPARE;    # int : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
                LT;         # bool : nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
              }; # nat : nat : nat : lambda bytes nat : lambda bytes nat : bytes
            DROP 2;     # nat : lambda bytes nat : lambda bytes nat : bytes
            SWAP;       # lambda bytes nat : nat : lambda bytes nat : bytes
            DROP;       # nat : lambda bytes nat : bytes
            SWAP;       # lambda bytes nat : nat : bytes
            DROP;       # nat : bytes
            SWAP;       # bytes : nat
            DROP;       # nat
          }; # lambda bytes nat : bytes
        LAMBDA
          bytes
          nat
          {
            LAMBDA
              bytes
              nat
              {
                DUP;        # bytes : bytes
                SIZE;       # nat : bytes
                DUP;        # nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
                LOOP
                  {
                    DUP 5;      # bytes : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                    SLICE;      # option bytes : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 126; # int : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF
                          {
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }
                          {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP;       # nat : @some : nat : nat : nat : nat : bytes
                    PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                    DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                    PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                    UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    INT;        # int : nat : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : bytes
                SWAP;       # nat : nat : bytes
                DROP;       # nat : bytes
                SWAP;       # bytes : nat
                DROP;       # nat
              }; # lambda bytes nat : bytes
            DUP;        # lambda bytes nat : lambda bytes nat : bytes
            DUP 3;      # bytes : lambda bytes nat : lambda bytes nat : bytes
            PUSH nat 1; # nat : bytes : lambda bytes nat : lambda bytes nat : bytes
            PUSH nat 0; # nat : nat : bytes : lambda bytes nat : lambda bytes nat : bytes
            SLICE;      # option bytes : lambda bytes nat : lambda bytes nat : bytes
            IF_NONE
              {
                PUSH int 297; # int : lambda bytes nat : lambda bytes nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : lambda bytes nat : lambda bytes nat : bytes
            EXEC;       # nat : lambda bytes nat : bytes
            DUP;        # nat : nat : lambda bytes nat : bytes
            PUSH nat 128; # nat : nat : nat : lambda bytes nat : bytes
            COMPARE;    # int : nat : lambda bytes nat : bytes
            GT;         # bool : nat : lambda bytes nat : bytes
            IF
              {
                DROP 3;     # 
                PUSH nat 1; # nat
              }
              {
                DUP;        # nat : nat : lambda bytes nat : bytes
                PUSH nat 184; # nat : nat : nat : lambda bytes nat : bytes
                COMPARE;    # int : nat : lambda bytes nat : bytes
                GT;         # bool : nat : lambda bytes nat : bytes
                IF
                  {
                    SWAP;       # lambda bytes nat : nat : bytes
                    DROP;       # nat : bytes
                    SWAP;       # bytes : nat
                    DROP;       # nat
                    PUSH int 1; # int : nat
                    PUSH nat 128; # nat : int : nat
                    DIG 2;      # nat : nat : int
                    SUB;        # int : int
                    ADD;        # int
                    ISNAT;      # option nat
                    IF_NONE
                      {
                        PUSH int 303; # int
                        FAILWITH;   # FAILED
                      }
                      {}; # @some
                  }
                  {
                    DUP;        # nat : nat : lambda bytes nat : bytes
                    PUSH nat 192; # nat : nat : nat : lambda bytes nat : bytes
                    COMPARE;    # int : nat : lambda bytes nat : bytes
                    GT;         # bool : nat : lambda bytes nat : bytes
                    IF
                      {
                        PUSH nat 183; # nat : nat : lambda bytes nat : bytes
                        SWAP;       # nat : nat : lambda bytes nat : bytes
                        SUB;        # int : lambda bytes nat : bytes
                        ISNAT;      # option nat : lambda bytes nat : bytes
                        IF_NONE
                          {
                            PUSH int 307; # int : lambda bytes nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : lambda bytes nat : bytes
                        DUP;        # @some : @some : lambda bytes nat : bytes
                        PUSH nat 1; # nat : @some : @some : lambda bytes nat : bytes
                        SWAP;       # @some : nat : @some : lambda bytes nat : bytes
                        DIG 3;      # lambda bytes nat : @some : nat : @some : bytes
                        DUP 5;      # bytes : lambda bytes nat : @some : nat : @some : bytes
                        PUSH nat 1; # nat : bytes : lambda bytes nat : @some : nat : @some : bytes
                        DIG 6;      # bytes : nat : bytes : lambda bytes nat : @some : nat : @some
                        SIZE;       # nat : nat : bytes : lambda bytes nat : @some : nat : @some
                        SUB;        # int : bytes : lambda bytes nat : @some : nat : @some
                        ISNAT;      # option nat : bytes : lambda bytes nat : @some : nat : @some
                        IF_NONE
                          {
                            PUSH int 310; # int : bytes : lambda bytes nat : @some : nat : @some
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bytes : lambda bytes nat : @some : nat : @some
                        PUSH nat 1; # nat : @some : bytes : lambda bytes nat : @some : nat : @some
                        SLICE;      # option bytes : lambda bytes nat : @some : nat : @some
                        IF_NONE
                          {
                            PUSH int 311; # int : lambda bytes nat : @some : nat : @some
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : lambda bytes nat : @some : nat : @some
                        DIG 4;      # @some : @some : lambda bytes nat : @some : nat
                        PUSH nat 0; # nat : @some : @some : lambda bytes nat : @some : nat
                        SLICE;      # option bytes : lambda bytes nat : @some : nat
                        IF_NONE
                          {
                            PUSH int 314; # int : lambda bytes nat : @some : nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : lambda bytes nat : @some : nat
                        EXEC;       # nat : @some : nat
                        ADD;        # nat : nat
                        ADD;        # nat
                      }
                      {
                        DUP;        # nat : nat : lambda bytes nat : bytes
                        PUSH nat 248; # nat : nat : nat : lambda bytes nat : bytes
                        COMPARE;    # int : nat : lambda bytes nat : bytes
                        GT;         # bool : nat : lambda bytes nat : bytes
                        IF
                          {
                            SWAP;       # lambda bytes nat : nat : bytes
                            DROP;       # nat : bytes
                            SWAP;       # bytes : nat
                            DROP;       # nat
                            PUSH int 1; # int : nat
                            PUSH nat 192; # nat : int : nat
                            DIG 2;      # nat : nat : int
                            SUB;        # int : int
                            ADD;        # int
                            ISNAT;      # option nat
                            IF_NONE
                              {
                                PUSH int 319; # int
                                FAILWITH;   # FAILED
                              }
                              {}; # @some
                          }
                          {
                            PUSH nat 247; # nat : nat : lambda bytes nat : bytes
                            SWAP;       # nat : nat : lambda bytes nat : bytes
                            SUB;        # int : lambda bytes nat : bytes
                            ISNAT;      # option nat : lambda bytes nat : bytes
                            IF_NONE
                              {
                                PUSH int 322; # int : lambda bytes nat : bytes
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : bytes
                            DUP;        # @some : @some : lambda bytes nat : bytes
                            PUSH nat 1; # nat : @some : @some : lambda bytes nat : bytes
                            SWAP;       # @some : nat : @some : lambda bytes nat : bytes
                            DIG 3;      # lambda bytes nat : @some : nat : @some : bytes
                            DUP 5;      # bytes : lambda bytes nat : @some : nat : @some : bytes
                            PUSH nat 1; # nat : bytes : lambda bytes nat : @some : nat : @some : bytes
                            DIG 6;      # bytes : nat : bytes : lambda bytes nat : @some : nat : @some
                            SIZE;       # nat : nat : bytes : lambda bytes nat : @some : nat : @some
                            SUB;        # int : bytes : lambda bytes nat : @some : nat : @some
                            ISNAT;      # option nat : bytes : lambda bytes nat : @some : nat : @some
                            IF_NONE
                              {
                                PUSH int 325; # int : bytes : lambda bytes nat : @some : nat : @some
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : bytes : lambda bytes nat : @some : nat : @some
                            PUSH nat 1; # nat : @some : bytes : lambda bytes nat : @some : nat : @some
                            SLICE;      # option bytes : lambda bytes nat : @some : nat : @some
                            IF_NONE
                              {
                                PUSH int 326; # int : lambda bytes nat : @some : nat : @some
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : @some : nat : @some
                            DIG 4;      # @some : @some : lambda bytes nat : @some : nat
                            PUSH nat 0; # nat : @some : @some : lambda bytes nat : @some : nat
                            SLICE;      # option bytes : lambda bytes nat : @some : nat
                            IF_NONE
                              {
                                PUSH int 329; # int : lambda bytes nat : @some : nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : lambda bytes nat : @some : nat
                            EXEC;       # nat : @some : nat
                            ADD;        # nat : nat
                            ADD;        # nat
                          }; # nat
                      }; # nat
                  }; # nat
              }; # nat
          }; # lambda bytes nat : lambda bytes nat : bytes
        LAMBDA
          bytes
          nat
          {
            LAMBDA
              bytes
              nat
              {
                DUP;        # bytes : bytes
                SIZE;       # nat : bytes
                DUP;        # nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
                LOOP
                  {
                    DUP 5;      # bytes : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                    SLICE;      # option bytes : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 126; # int : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LOOP
                      {
                        PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF_NONE
                          {
                            PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        IF
                          {
                            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                            DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                          }
                          {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                    DROP;       # nat : @some : nat : nat : nat : nat : bytes
                    PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                    DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                    PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                    CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                    UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    INT;        # int : nat : nat : nat : nat : nat : bytes
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                    ADD;        # nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : bytes
                    GT;         # bool : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : bytes
                SWAP;       # nat : nat : bytes
                DROP;       # nat : bytes
                SWAP;       # bytes : nat
                DROP;       # nat
              }; # lambda bytes nat : bytes
            SWAP;       # bytes : lambda bytes nat
            PUSH nat 1; # nat : bytes : lambda bytes nat
            PUSH nat 0; # nat : nat : bytes : lambda bytes nat
            SLICE;      # option bytes : lambda bytes nat
            IF_NONE
              {
                PUSH int 339; # int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : lambda bytes nat
            EXEC;       # nat
            DUP;        # nat : nat
            PUSH nat 128; # nat : nat : nat
            COMPARE;    # int : nat
            GT;         # bool : nat
            IF
              {
                DROP;       # 
                PUSH nat 0; # nat
              }
              {
                DUP;        # nat : nat
                PUSH nat 184; # nat : nat : nat
                COMPARE;    # int : nat
                GT;         # bool : nat
                IF
                  {
                    PUSH bool True; # bool : nat
                  }
                  {
                    DUP;        # nat : nat
                    PUSH nat 192; # nat : nat : nat
                    SWAP;       # nat : nat : nat
                    COMPARE;    # int : nat
                    GE;         # bool : nat
                    IF
                      {
                        DUP;        # nat : nat
                        PUSH nat 248; # nat : nat : nat
                        COMPARE;    # int : nat
                        GT;         # bool : nat
                      }
                      {
                        PUSH bool False; # bool : nat
                      }; # bool : nat
                  }; # bool : nat
                IF
                  {
                    DROP;       # 
                    PUSH nat 1; # nat
                  }
                  {
                    DUP;        # nat : nat
                    PUSH nat 192; # nat : nat : nat
                    COMPARE;    # int : nat
                    GT;         # bool : nat
                    IF
                      {
                        PUSH nat 1; # nat : nat
                        PUSH nat 183; # nat : nat : nat
                        DIG 2;      # nat : nat : nat
                        SUB;        # int : nat
                        ISNAT;      # option nat : nat
                        IF_NONE
                          {
                            PUSH int 356; # int : nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat
                        ADD;        # nat
                      }
                      {
                        PUSH nat 1; # nat : nat
                        PUSH nat 247; # nat : nat : nat
                        DIG 2;      # nat : nat : nat
                        SUB;        # int : nat
                        ISNAT;      # option nat : nat
                        IF_NONE
                          {
                            PUSH int 359; # int : nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat
                        ADD;        # nat
                      }; # nat
                  }; # nat
              }; # nat
          }; # lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        LAMBDA
          bytes
          bool
          {
            PUSH bytes 0xc0; # bytes : bytes
            SWAP;       # bytes : bytes
            PUSH nat 1; # nat : bytes : bytes
            PUSH nat 0; # nat : nat : bytes : bytes
            SLICE;      # option bytes : bytes
            IF_NONE
              {
                PUSH int 212; # int : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : bytes
            COMPARE;    # int
            GE;         # bool
          }; # lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP;        # lambda bytes bool : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 6;      # bytes : lambda bytes bool : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        EXEC;       # bool : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        IF
          {}
          {
            PUSH string "NOT_A_LIST"; # string : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            FAILWITH;   # FAILED
          }; # lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 4;      # lambda bytes nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 6;      # bytes : lambda bytes nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        EXEC;       # nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 6;      # bytes : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        SIZE;       # nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        EMPTY_MAP nat bytes; # map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 5;      # lambda bytes nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 9;      # bytes : lambda bytes nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        EXEC;       # nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 4;      # nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        PUSH nat 0; # nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP;        # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DUP 3;      # nat : nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        COMPARE;    # int : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        GT;         # bool : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        LOOP
          {
            DUP 9;      # lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 12;     # bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 5;      # nat : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 8;      # nat : nat : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            SUB;        # int : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            ISNAT;      # option nat : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            IF_NONE
              {
                PUSH int 268; # int : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 6;      # nat : @some : bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            SLICE;      # option bytes : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            IF_NONE
              {
                PUSH int 269; # int : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : lambda bytes nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            EXEC;       # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DIG 4;      # map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 12;     # bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 3;      # nat : bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 7;      # nat : nat : bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            SLICE;      # option bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            IF_NONE
              {
                PUSH int 272; # int : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            SOME;       # option bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 4;      # nat : option bytes : map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            UPDATE;     # map nat bytes : nat : nat : nat : nat : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUG 4;      # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DIG 3;      # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            ADD;        # nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUG 2;      # nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            PUSH nat 1; # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            ADD;        # nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP;        # nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            DUP 3;      # nat : nat : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            COMPARE;    # int : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
            GT;         # bool : nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
          }; # nat : nat : nat : map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DROP 3;     # map nat bytes : nat : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        SWAP;       # nat : map nat bytes : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DROP;       # map nat bytes : nat : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        SWAP;       # nat : map nat bytes : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DROP;       # map nat bytes : lambda bytes bool : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        SWAP;       # lambda bytes bool : map nat bytes : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        DROP;       # map nat bytes : lambda bytes nat : lambda bytes nat : lambda bytes nat : bytes
        SWAP;       # lambda bytes nat : map nat bytes : lambda bytes nat : lambda bytes nat : bytes
        DROP;       # map nat bytes : lambda bytes nat : lambda bytes nat : bytes
        SWAP;       # lambda bytes nat : map nat bytes : lambda bytes nat : bytes
        DROP;       # map nat bytes : lambda bytes nat : bytes
        SWAP;       # lambda bytes nat : map nat bytes : bytes
        DROP;       # map nat bytes : bytes
        SWAP;       # bytes : map nat bytes
        DROP;       # map nat bytes
      }; # lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    LAMBDA
      bytes
      bool
      {
        PUSH bytes 0xc0; # bytes : bytes
        SWAP;       # bytes : bytes
        PUSH nat 1; # nat : bytes : bytes
        PUSH nat 0; # nat : nat : bytes : bytes
        SLICE;      # option bytes : bytes
        IF_NONE
          {
            PUSH int 212; # int : bytes
            FAILWITH;   # FAILED
          }
          {}; # @some : bytes
        COMPARE;    # int
        GE;         # bool
      }; # lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    LAMBDA
      bytes
      bytes
      {
        DUP;        # bytes : bytes
        LAMBDA
          bytes
          nat
          {
            DUP;        # bytes : bytes
            SIZE;       # nat : bytes
            DUP;        # nat : nat : bytes
            PUSH nat 0; # nat : nat : nat : bytes
            SWAP;       # nat : nat : nat : bytes
            PUSH nat 0; # nat : nat : nat : nat : bytes
            DUP;        # nat : nat : nat : nat : nat : bytes
            DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
            COMPARE;    # int : nat : nat : nat : nat : bytes
            GT;         # bool : nat : nat : nat : nat : bytes
            LOOP
              {
                DUP 5;      # bytes : nat : nat : nat : nat : bytes
                PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
                SLICE;      # option bytes : nat : nat : nat : nat : bytes
                IF_NONE
                  {
                    PUSH int 126; # int : nat : nat : nat : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : nat : nat : bytes
                PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
                DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
                ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
                IF_NONE
                  {
                    PUSH int 127; # int : nat : @some : nat : nat : nat : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : nat : nat : nat : nat : bytes
                MUL;        # nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                LOOP
                  {
                    PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 28; # int : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {
                        CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    IF
                      {
                        SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                        DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                      }
                      {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
                SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
                DROP;       # nat : @some : nat : nat : nat : nat : bytes
                PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
                DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
                PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
                CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
                CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
                UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
                IF_NONE
                  {
                    PUSH int 134; # int : nat : nat : nat : nat : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : nat : nat : nat : bytes
                INT;        # int : nat : nat : nat : nat : nat : bytes
                ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
                IF_NONE
                  {
                    PUSH int 133; # int : nat : nat : nat : nat : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : nat : nat : nat : bytes
                MUL;        # nat : nat : nat : nat : nat : bytes
                DIG 3;      # nat : nat : nat : nat : nat : bytes
                ADD;        # nat : nat : nat : nat : bytes
                DUG 2;      # nat : nat : nat : nat : bytes
                PUSH nat 1; # nat : nat : nat : nat : nat : bytes
                ADD;        # nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : bytes
                GT;         # bool : nat : nat : nat : nat : bytes
              }; # nat : nat : nat : nat : bytes
            DROP 2;     # nat : nat : bytes
            SWAP;       # nat : nat : bytes
            DROP;       # nat : bytes
            SWAP;       # bytes : nat
            DROP;       # nat
          }; # lambda bytes nat : bytes : bytes
        SWAP;       # bytes : lambda bytes nat : bytes
        PUSH nat 1; # nat : bytes : lambda bytes nat : bytes
        PUSH nat 0; # nat : nat : bytes : lambda bytes nat : bytes
        SLICE;      # option bytes : lambda bytes nat : bytes
        IF_NONE
          {
            PUSH int 339; # int : lambda bytes nat : bytes
            FAILWITH;   # FAILED
          }
          {}; # @some : lambda bytes nat : bytes
        EXEC;       # nat : bytes
        DUP;        # nat : nat : bytes
        PUSH nat 128; # nat : nat : nat : bytes
        COMPARE;    # int : nat : bytes
        GT;         # bool : nat : bytes
        IF
          {
            DROP;       # bytes
            PUSH nat 0; # nat : bytes
          }
          {
            DUP;        # nat : nat : bytes
            PUSH nat 184; # nat : nat : nat : bytes
            COMPARE;    # int : nat : bytes
            GT;         # bool : nat : bytes
            IF
              {
                PUSH bool True; # bool : nat : bytes
              }
              {
                DUP;        # nat : nat : bytes
                PUSH nat 192; # nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : bytes
                COMPARE;    # int : nat : bytes
                GE;         # bool : nat : bytes
                IF
                  {
                    DUP;        # nat : nat : bytes
                    PUSH nat 248; # nat : nat : nat : bytes
                    COMPARE;    # int : nat : bytes
                    GT;         # bool : nat : bytes
                  }
                  {
                    PUSH bool False; # bool : nat : bytes
                  }; # bool : nat : bytes
              }; # bool : nat : bytes
            IF
              {
                DROP;       # bytes
                PUSH nat 1; # nat : bytes
              }
              {
                DUP;        # nat : nat : bytes
                PUSH nat 192; # nat : nat : nat : bytes
                COMPARE;    # int : nat : bytes
                GT;         # bool : nat : bytes
                IF
                  {
                    PUSH nat 1; # nat : nat : bytes
                    PUSH nat 183; # nat : nat : nat : bytes
                    DIG 2;      # nat : nat : nat : bytes
                    SUB;        # int : nat : bytes
                    ISNAT;      # option nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 356; # int : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : bytes
                    ADD;        # nat : bytes
                  }
                  {
                    PUSH nat 1; # nat : nat : bytes
                    PUSH nat 247; # nat : nat : nat : bytes
                    DIG 2;      # nat : nat : nat : bytes
                    SUB;        # int : nat : bytes
                    ISNAT;      # option nat : nat : bytes
                    IF_NONE
                      {
                        PUSH int 359; # int : nat : bytes
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : bytes
                    ADD;        # nat : bytes
                  }; # nat : bytes
              }; # nat : bytes
          }; # nat : bytes
        SWAP;       # bytes : nat
        DUP;        # bytes : bytes : nat
        DUG 2;      # bytes : nat : bytes
        SWAP;       # nat : bytes : bytes
        DUP;        # nat : nat : bytes : bytes
        DUG 2;      # nat : bytes : nat : bytes
        DIG 3;      # bytes : nat : bytes : nat
        SIZE;       # nat : nat : bytes : nat
        SUB;        # int : bytes : nat
        ISNAT;      # option nat : bytes : nat
        IF_NONE
          {
            PUSH int 220; # int : bytes : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : bytes : nat
        DIG 2;      # nat : @some : bytes
        SLICE;      # option bytes
        IF_NONE
          {
            PUSH int 222; # int
            FAILWITH;   # FAILED
          }
          {}; # @some
      }; # lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP;        # lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 4;      # lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 8;      # lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 7;      # @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 7;      # lambda bytes (map nat bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 6;      # lambda bytes bytes : lambda bytes (map nat bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 8;      # lambda bytes bool : lambda bytes bytes : lambda bytes (map nat bytes) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PAIR 3;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 13;     # bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 13;     # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    KECCAK;     # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PAIR 4;     # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) @some)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    EXEC;       # bytes : lambda bytes (map nat bytes) : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    EXEC;       # map nat bytes : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PUSH nat 2; # nat : map nat bytes : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    GET;        # option bytes : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    IF_NONE
      {
        PUSH int 551; # int : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : lambda bytes bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    EXEC;       # bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 7;      # lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    SWAP;       # bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP;        # bytes : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUG 2;      # bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 6;      # lambda bytes (map nat bytes) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 5;      # lambda bytes bytes : lambda bytes (map nat bytes) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 7;      # lambda bytes bool : lambda bytes bytes : lambda bytes (map nat bytes) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PAIR 3;     # pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 14;     # bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DUP 16;     # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    KECCAK;     # bytes : bytes : pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes))) : bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    PAIR 4;     # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # lambda bytes bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes bool : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # lambda bytes bool : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda bytes (map nat bytes) : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # lambda bytes (map nat bytes) : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @some : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # @some : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @some : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # @some : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : nat : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : nat : bytes : bytes : @parameter : @storage
    DIG 2;      # nat : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : bytes : @parameter : @storage
    DIG 2;      # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : bytes : @parameter : @storage
    DIG 2;      # bytes : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @parameter : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @parameter : @storage
    DIG 2;      # @parameter : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @storage
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes : @storage
    DIG 2;      # @storage : pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes
    DROP;       # pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes)) : lambda (pair bytes (pair bytes (pair (pair (lambda bytes bool) (pair (lambda bytes bytes) (lambda bytes (map nat bytes)))) bytes))) bytes
    EXEC;       # bytes
  };