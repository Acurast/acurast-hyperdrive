parameter (or (pair %insert (bytes %key) (bytes %value)) (unit %snapshot_merkle_tree));
storage   (pair (set %administrators address) (pair (map %bytes_to_bits bytes string) (pair (big_map %merkle_history nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))))) (pair %tree (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))))));
code
  {
    LAMBDA
      (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
      (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
      {
        UNPAIR;     # pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        EMPTY_MAP int (pair (pair string nat) bytes); # map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH int 0; # int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        EMPTY_MAP int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))); # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DUP 4;      # pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        GET 4;      # bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        NONE (pair string nat); # option (pair string nat) : bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        NONE (map int (pair (pair string nat) bytes)); # option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DUP 6;      # pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        GET 3;      # pair string nat : option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair (pair string nat) (option (map int (pair (pair string nat) bytes))) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH (pair (option bytes) (option int)) (Pair None None); # pair (option bytes) (option int) : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DUP 6;      # pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (option bytes) (option int) : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        CAR;        # pair (pair string nat) bytes : pair (option bytes) (option int) : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair (pair (pair string nat) bytes) (pair (option bytes) (option int)) : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes)) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        SOME;       # option (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH int 1; # int : option (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        UPDATE;     # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH int 1; # int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH bool True; # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PUSH int 0; # int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DUP 3;      # int : int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        COMPARE;    # int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        GT;         # bool : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        LOOP
          {
            DUP 3;      # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DUP 3;      # int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            GET;        # option (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            IF_NONE
              {
                PUSH int 158; # int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                FAILWITH;   # FAILED
              }
              {}; # @some : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            UNPAIR;     # pair (pair (pair string nat) bytes) (pair (option bytes) (option int)) : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            UNPAIR 3;   # pair (pair string nat) bytes : option bytes : option int : pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DIG 3;      # pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            UNPAIR;     # pair (pair string nat) (option (map int (pair (pair string nat) bytes))) : pair (option (pair string nat)) bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            UNPAIR;     # pair string nat : option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DIG 2;      # pair (option (pair string nat)) bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            UNPAIR;     # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DUP 8;      # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            IF
              {
                DIG 7;      # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 7;      # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 7;      # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH bool False; # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 7;      # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH int 0; # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 8;      # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                EMPTY_MAP int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))); # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 9;      # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
              }
              {}; # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            PUSH int 0; # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DUP 12;     # int : int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            COMPARE;    # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            GT;         # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            IF
              {
                PUSH int 0; # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 10;     # int : int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                GT;         # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
              }
              {
                PUSH bool False; # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
              }; # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            IF
              {
                SWAP;       # bytes : option (pair string nat) : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SWAP;       # pair string nat : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 2;      # pair (pair string nat) bytes : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DROP;       # option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 6;      # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                NONE (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))); # option (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 8;      # int : option (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                UPDATE;     # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 6;      # option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH int 1; # int : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 6;      # int : int : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SUB;        # int : option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 5;      # option (pair string nat) : option (map int (pair (pair string nat) bytes)) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SWAP;       # option (map int (pair (pair string nat) bytes)) : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 178; # int : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 9;      # map int (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 9;      # int : map int (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                GET;        # option (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 177; # int : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SOME;       # option (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 4;      # option int : option (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 179; # int : option (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair (pair string nat) bytes) : @some : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                UPDATE;     # map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 9;      # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                GET 6;      # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                CAR;        # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                NONE (map int (pair (pair string nat) bytes)); # option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : option bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DIG 6;      # option bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                IF_NONE
                  {
                    PUSH int 181; # int : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE;     # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE 1;   # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE 6;   # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                GET 6;      # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                CAR;        # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DIG 3;      # map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                SOME;       # option (map int (pair (pair string nat) bytes)) : map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                SWAP;       # map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUG 5;      # map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                PUSH int 1; # int : map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                GET;        # option (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                IF_NONE
                  {
                    PUSH int 50; # int : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                CDR;        # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUP 6;      # map int (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                PUSH int 0; # int : map int (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                GET;        # option (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                IF_NONE
                  {
                    PUSH int 50; # int : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                CDR;        # bytes : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                CONCAT;     # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                KECCAK;     # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE;     # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE 1;   # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                UPDATE 6;   # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                DUG 8;      # map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 6;      # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SWAP;       # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 2;      # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH int 1; # int : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                GET;        # option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 50; # int : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CDR;        # bytes : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 2;      # map int (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH int 0; # int : map int (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                GET;        # option (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 50; # int : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CDR;        # bytes : bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CONCAT;     # bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                KECCAK;     # bytes : map int (pair (pair string nat) bytes) : option (pair string nat) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DIG 2;      # option (pair string nat) : bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH int 184; # int : bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PAIR;       # pair @some bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SOME;       # option (pair @some bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 6;      # int : option (pair @some bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                UPDATE;     # map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 4;      # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
              }
              {
                DUP 5;      # pair (pair string nat) bytes : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CDR;        # nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 4;      # pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CDR;        # nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                GE;         # bool : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {}
                  {
                    PUSH string "Key length mismatch"; # string : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }; # option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SIZE;       # nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 6;      # pair (pair string nat) bytes : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SIZE;       # nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP;        # nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                LT;         # bool : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {
                    SWAP;       # nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP;        # nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUG 2;      # nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }
                  {
                    DUP;        # nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }; # nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH nat 0; # nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH bool False; # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # nat : nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                LT;         # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                LOOP
                  {
                    DUP 10;     # pair (pair string nat) bytes : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CAR;        # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CAR;        # string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    PUSH nat 1; # nat : string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 4;      # nat : nat : string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SLICE;      # option string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF_NONE
                      {
                        PUSH string "OUT_OF_BOUNDS"; # string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 9;      # pair string nat : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CAR;        # string : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    PUSH nat 1; # nat : string : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 5;      # nat : nat : string : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SLICE;      # option string : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF_NONE
                      {
                        PUSH string "OUT_OF_BOUNDS"; # string : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    COMPARE;    # int : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    EQ;         # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF
                      {
                        PUSH nat 1; # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # nat : nat : bool : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ADD;        # nat : bool : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SWAP;       # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }
                      {
                        DROP;       # nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH bool True; # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }; # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP;        # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF
                      {
                        PUSH bool False; # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }
                      {
                        DUP 3;      # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # nat : nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        LT;         # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }; # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }; # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 8;      # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SIZE;       # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # nat : nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                LE;         # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {
                    PUSH nat 256; # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 3;      # nat : nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    COMPARE;    # int : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    LE;         # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }
                  {
                    PUSH bool False; # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }; # bool : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {}
                  {
                    PUSH string "Bad pos"; # string : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }; # bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SWAP;       # nat : bool : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP;        # nat : nat : bool : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 2;      # nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH string ""; # string : nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PAIR;       # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH nat 0; # nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 4;      # nat : nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                NEQ;        # bool : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {
                    DUP 9;      # pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CAR;        # string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 4;      # nat : string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    PUSH nat 0; # nat : nat : string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SLICE;      # option string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF_NONE
                      {
                        PUSH string "Out of bounds"; # string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    UPDATE 1;   # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }
                  {}; # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 10;     # pair string nat : nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SIZE;       # nat : nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SUB;        # int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                ISNAT;      # option nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH string "underflow"; # string : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 10;     # pair string nat : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 5;      # nat : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 12;     # pair string nat : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CAR;        # string : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SIZE;       # nat : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SUB;        # int : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                ISNAT;      # option nat : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH string "underflow"; # string : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 6;      # nat : @some : string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SLICE;      # option string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF_NONE
                  {
                    PUSH string "Out of bounds"; # string : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PAIR;       # pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                SWAP;       # pair string nat : pair @some @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP;        # pair string nat : pair string nat : pair @some @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUG 2;      # pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                PUSH nat 0; # nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                DUP 3;      # pair @some @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                CDR;        # @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                EQ;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                IF
                  {
                    SWAP;       # pair @some @some : pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # bool : pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # nat : pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # nat : pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # nat : pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # nat : pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # option (pair string nat) : pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 2;      # pair string nat : pair string nat : bytes : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 2;      # option (map int (pair (pair string nat) bytes)) : pair string nat : bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 2;      # pair (pair string nat) bytes : pair string nat : bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 2;      # option bytes : pair string nat : bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 2;      # option int : pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DROP;       # pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    PUSH int 1; # int : pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 6;      # int : int : pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    ADD;        # int : pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUG 5;      # pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DIG 6;      # map int (pair (pair string nat) bytes) : pair string nat : bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUG 2;      # pair string nat : bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    PAIR;       # pair (pair string nat) bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SOME;       # option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP 6;      # int : option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    UPDATE;     # map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUG 4;      # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }
                  {
                    DUP 13;     # pair (pair string nat) bytes : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CAR;        # pair string nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CDR;        # nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    SWAP;       # pair string nat : nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUP;        # pair string nat : pair string nat : nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    DUG 2;      # pair string nat : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    CDR;        # nat : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    LT;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                    IF
                      {
                        PUSH nat 0; # nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # pair @some @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GT;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {}
                          {
                            PUSH string "EMPTY_LABEL"; # string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }; # pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH string "0"; # string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # pair @some @some : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CAR;        # @some : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 0; # nat : nat : @some : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SLICE;      # option string : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        EQ;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {
                            PUSH int 0; # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }
                          {
                            PUSH int 1; # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }; # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # pair @some @some : nat : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ISNAT;      # option nat : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # pair @some @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CAR;        # @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 6;      # pair @some @some : nat : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ISNAT;      # option nat : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SLICE;      # option string : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH string "OUT_OF_BOUNDS"; # string : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SWAP;       # int : pair @some @some : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP;        # int : int : pair @some @some : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 2;      # int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        EMPTY_MAP int (pair (pair string nat) bytes); # map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 14;     # bytes : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # pair @some @some : bytes : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair @some @some) bytes : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (pair (pair @some @some) bytes) : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # int : option (pair (pair @some @some) bytes) : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        UPDATE;     # map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 6;      # pair string nat : nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # nat : nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ADD;        # nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 18;     # pair (pair string nat) bytes : nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CAR;        # pair string nat : nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # nat : nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ISNAT;      # option nat : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH string "PREFIX_TOO_LONG"; # string : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP;        # @some : @some : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 0; # nat : @some : @some : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : @some : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        EQ;         # bool : @some : map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair @some @some : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 2;      # pair @some @some : map int (pair (pair string nat) bytes) : int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 2;      # int : map int (pair (pair string nat) bytes) : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # pair @some @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # pair string nat : map int (pair (pair string nat) bytes) : int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # bool : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # nat : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # nat : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # nat : map int (pair (pair string nat) bytes) : int : pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # nat : map int (pair (pair string nat) bytes) : int : pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # option (pair string nat) : map int (pair (pair string nat) bytes) : int : pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # bytes : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # pair string nat : map int (pair (pair string nat) bytes) : int : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # option (map int (pair (pair string nat) bytes)) : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # option bytes : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # option int : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            PUSH (pair string nat) (Pair "" 0); # pair string nat : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }
                          {
                            DIG 3;      # pair @some @some : @some : map int (pair (pair string nat) bytes) : int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 3;      # int : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # pair @some @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # pair string nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # bool : @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # option (pair string nat) : @some : map int (pair (pair string nat) bytes) : int : pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # bytes : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # pair string nat : @some : map int (pair (pair string nat) bytes) : int : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 4;      # option (map int (pair (pair string nat) bytes)) : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 5;      # option bytes : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 5;      # option int : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DROP;       # @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DUP;        # @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DUP 6;      # pair (pair string nat) bytes : @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            CAR;        # pair string nat : @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            CAR;        # string : @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DIG 2;      # @some : string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            PUSH nat 1; # nat : @some : string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            DUP 7;      # pair string nat : nat : @some : string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            CDR;        # nat : nat : @some : string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            ADD;        # nat : @some : string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            SLICE;      # option string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            IF_NONE
                              {
                                PUSH string "PREFIX_LONGER_THAN_DATA"; # string : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            PAIR;       # pair @some @some : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }; # pair string nat : map int (pair (pair string nat) bytes) : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SWAP;       # map int (pair (pair string nat) bytes) : pair string nat : int : pair string nat : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 4;      # pair (pair string nat) bytes : map int (pair (pair string nat) bytes) : pair string nat : int : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # bytes : map int (pair (pair string nat) bytes) : pair string nat : int : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # pair string nat : bytes : map int (pair (pair string nat) bytes) : int : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair string nat) bytes : map int (pair (pair string nat) bytes) : int : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : int : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # int : option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH int 1; # int : int : option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        UPDATE;     # map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH int 1; # int : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 6;      # int : int : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ADD;        # int : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 5;      # map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 8;      # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUP;        # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        GET 6;      # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUP;        # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        CAR;        # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DIG 3;      # map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        SOME;       # option (map int (pair (pair string nat) bytes)) : map int (pair (pair string nat) bytes) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        SWAP;       # map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUG 5;      # map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        PUSH int 1; # int : map int (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        GET;        # option (pair (pair string nat) bytes) : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        IF_NONE
                          {
                            PUSH int 50; # int : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        CDR;        # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUP 6;      # map int (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        PUSH int 0; # int : map int (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        GET;        # option (pair (pair string nat) bytes) : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        IF_NONE
                          {
                            PUSH int 50; # int : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        CDR;        # bytes : bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        CONCAT;     # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        KECCAK;     # bytes : option (map int (pair (pair string nat) bytes)) : map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        UPDATE;     # map bytes (map int (pair (pair string nat) bytes)) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        UPDATE 1;   # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        UPDATE 6;   # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)
                        DUG 8;      # map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 6;      # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SWAP;       # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP;        # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 2;      # map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH int 1; # int : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GET;        # option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 50; # int : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # bytes : map int (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # map int (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH int 0; # int : map int (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GET;        # option (pair (pair string nat) bytes) : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 50; # int : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # bytes : bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CONCAT;     # bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        KECCAK;     # bytes : map int (pair (pair string nat) bytes) : pair string nat : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # pair string nat : bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair string nat) bytes : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 6;      # int : option (pair (pair string nat) bytes) : map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        UPDATE;     # map int (pair (pair string nat) bytes) : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 4;      # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }
                      {
                        DIG 2;      # pair string nat : pair string nat : pair @some @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bool : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # bool : pair string nat : pair @some @some : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : nat : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # nat : pair string nat : pair @some @some : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : nat : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # nat : pair string nat : pair @some @some : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : nat : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # nat : pair string nat : pair @some @some : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : nat : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # nat : pair string nat : pair @some @some : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : option (pair string nat) : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 2;      # option (pair string nat) : pair string nat : pair @some @some : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bytes : pair string nat : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 3;      # pair string nat : pair string nat : pair @some @some : bytes : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bytes : option (map int (pair (pair string nat) bytes)) : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 3;      # option (map int (pair (pair string nat) bytes)) : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : option bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 4;      # option bytes : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : option int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 4;      # option int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DROP;       # pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # pair @some @some : nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GT;         # bool : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {}
                          {
                            PUSH string "Bad key"; # string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }; # pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 0; # nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # pair @some @some : nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GT;         # bool : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {}
                          {
                            PUSH string "EMPTY_LABEL"; # string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }; # pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH string "0"; # string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # pair @some @some : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CAR;        # @some : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 0; # nat : nat : @some : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SLICE;      # option string : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : string : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        COMPARE;    # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        EQ;         # bool : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF
                          {
                            PUSH int 0; # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }
                          {
                            PUSH int 1; # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                          }; # int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # pair @some @some : nat : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ISNAT;      # option nat : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # pair @some @some : @some : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CAR;        # @some : @some : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : @some : int : pair string nat : pair @some @some : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 5;      # pair @some @some : nat : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # @some : nat : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SUB;        # int : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ISNAT;      # option nat : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 0; # int : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH nat 1; # nat : @some : @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SLICE;      # option string : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH string "OUT_OF_BOUNDS"; # string : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair @some @some : int : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SWAP;       # int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 12;     # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GET 7;      # map bytes (map int (pair (pair string nat) bytes)) : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 6;      # pair (pair string nat) bytes : map bytes (map int (pair (pair string nat) bytes)) : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # bytes : map bytes (map int (pair (pair string nat) bytes)) : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GET;        # option (map int (pair (pair string nat) bytes)) : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 227; # int : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PUSH int 1; # int : @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 8;      # int : int : @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        ADD;        # int : @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 7;      # @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 8;      # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair string nat : bytes : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 5;      # bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair string nat : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 5;      # pair string nat : bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (pair string nat) : bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 3;      # @some : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair @some @some : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 5;      # pair @some @some : option (map int (pair (pair string nat) bytes)) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair @some @some) (option (map int (pair (pair string nat) bytes))) : pair (option (pair string nat)) bytes : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # int : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option int : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : pair (pair string nat) bytes : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 5;      # pair (pair string nat) bytes : option int : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        CDR;        # bytes : option int : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option bytes : option int : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : @some : int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 3;      # @some : pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DIG 4;      # int : @some : pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        GET;        # option (pair (pair string nat) bytes) : pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        IF_NONE
                          {
                            PUSH int 231; # int : pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (option bytes) (option int) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair @some (pair (option bytes) (option int)) : pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        PAIR;       # pair (pair @some (pair (option bytes) (option int))) (pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes)) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        SOME;       # option (pair (pair @some (pair (option bytes) (option int))) (pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUP 4;      # int : option (pair (pair @some (pair (option bytes) (option int))) (pair (pair (pair @some @some) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        UPDATE;     # map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : bool : int : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                        DUG 2;      # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                      }; # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
                  }; # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
              }; # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            PUSH int 0; # int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            DUP 3;      # int : int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            COMPARE;    # int : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            GT;         # bool : bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
          }; # bool : int : map int (pair (pair (pair (pair string nat) bytes) (pair (option bytes) (option int))) (pair (pair (pair string nat) (option (map int (pair (pair string nat) bytes)))) (pair (option (pair string nat)) bytes))) : int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DROP 3;     # int : map int (pair (pair string nat) bytes) : pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DIG 2;      # pair (pair (pair string nat) bytes) (pair (pair string nat) bytes) : int : map int (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        DROP;       # int : map int (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        GET;        # option (pair (pair string nat) bytes) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        IF_NONE
          {
            PUSH int 240; # int : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        PAIR;       # pair @some (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))
      }; # lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
    UNPAIR;     # @parameter : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
    IF_LEFT
      {
        DUP;        # @parameter%insert : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CDR;        # bytes : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SIZE;       # nat : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH nat 1000; # nat : nat : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        COMPARE;    # int : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GT;         # bool : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        IF
          {}
          {
            PUSH string "STATE_TOO_LARGE"; # string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            FAILWITH;   # FAILED
          }; # @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # @parameter%insert : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CAR;        # bytes : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH string ""; # string : bytes : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SWAP;       # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SENDER;     # @sender : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PACK;       # bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CONCAT;     # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        KECCAK;     # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SIZE;       # nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH nat 0; # nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # nat : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 3;      # nat : nat : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        COMPARE;    # int : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GT;         # bool : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        LOOP
          {
            DUP 5;      # @storage : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            GET 3;      # map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DUP 5;      # @parameter%insert : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            CAR;        # bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            SENDER;     # @sender : bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            PACK;       # bytes : bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            CONCAT;     # bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            KECCAK;     # bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            PUSH nat 1; # nat : bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DUP 4;      # nat : nat : bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            SLICE;      # option bytes : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            IF_NONE
              {
                PUSH string "Out of bonds"; # string : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
                FAILWITH;   # FAILED
              }
              {}; # @some : map bytes string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            GET;        # option string : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            IF_NONE
              {
                PUSH int 29; # int : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DIG 3;      # string : @some : nat : nat : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            CONCAT;     # string : nat : nat : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DUG 2;      # nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            PUSH nat 1; # nat : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            ADD;        # nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DUP;        # nat : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DUP 3;      # nat : nat : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            COMPARE;    # int : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            GT;         # bool : nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
          }; # nat : nat : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DROP 2;     # string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        NIL bytes;  # list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 3;      # @parameter%insert : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CDR;        # bytes : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CONS;       # list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 3;      # @parameter%insert : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CAR;        # bytes : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CONS;       # list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SENDER;     # @sender : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PACK;       # bytes : list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CONS;       # list bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CONCAT;     # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        KECCAK;     # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DIG 3;      # @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # @storage : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GET 6;      # pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GET 6;      # map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 6;      # @parameter%insert : map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CDR;        # bytes : map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SOME;       # option bytes : map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 5;      # bytes : option bytes : map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        UPDATE;     # map bytes bytes : pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        UPDATE 6;   # pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        UPDATE 6;   # @storage : bytes : string : @parameter%insert : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUG 3;      # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH nat 256; # nat : bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 4;      # string : nat : bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PAIR;       # pair string nat : bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PAIR;       # pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH bytes 0x; # bytes : pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 6;      # @storage : bytes : pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GET 9;      # bytes : bytes : pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        COMPARE;    # int : pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        NEQ;        # bool : pair (pair string nat) bytes : bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        IF
          {
            DROP;       # bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DIG 2;      # @parameter%insert : bytes : string : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DROP;       # bytes : string : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DIG 3;      # lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : bytes : string : @storage
            SWAP;       # bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : string : @storage
            PUSH nat 256; # nat : bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : string : @storage
            DIG 3;      # string : nat : bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : @storage
            PAIR;       # pair string nat : bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : @storage
            DUP 4;      # @storage : pair string nat : bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : @storage
            GET 11;     # pair (pair %label (string %data) (nat %length)) (bytes %node) : pair string nat : bytes : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : @storage
            PAIR 3;     # pair (pair (pair %label (string %data) (nat %length)) (bytes %node)) (pair (pair string nat) bytes) : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : @storage
            SWAP;       # lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : pair (pair (pair %label (string %data) (nat %length)) (bytes %node)) (pair (pair string nat) bytes) : @storage
            DUG 2;      # pair (pair (pair %label (string %data) (nat %length)) (bytes %node)) (pair (pair string nat) bytes) : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            PAIR;       # pair (pair (pair (pair %label (string %data) (nat %length)) (bytes %node)) (pair (pair string nat) bytes)) @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            EXEC;       # pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))
            UNPAIR;     # pair (pair string nat) bytes : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
          }
          {
            SWAP;       # bytes : pair (pair string nat) bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DROP;       # pair (pair string nat) bytes : string : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            SWAP;       # string : pair (pair string nat) bytes : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DROP;       # pair (pair string nat) bytes : @parameter%insert : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            SWAP;       # @parameter%insert : pair (pair string nat) bytes : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DROP;       # pair (pair string nat) bytes : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            DIG 2;      # lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : pair (pair string nat) bytes : @storage
            DROP;       # pair (pair string nat) bytes : @storage
          }; # pair (pair string nat) bytes : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        SWAP;       # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        DUP;        # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        GET 6;      # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        DUP 3;      # pair (pair string nat) bytes : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        CDR;        # bytes : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        UPDATE 3;   # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        UPDATE 6;   # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        DUP;        # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        GET 6;      # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))) : pair (pair string nat) bytes
        DIG 2;      # pair (pair string nat) bytes : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        UPDATE 5;   # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
        UPDATE 6;   # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
      }
      {
        SWAP;       # @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # @storage : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUG 2;      # @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        CAR;        # set address : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SENDER;     # @sender : set address : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        MEM;        # bool : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        IF
          {}
          {
            PUSH string "NOT_ALLOWED"; # string : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
            FAILWITH;   # FAILED
          }; # @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SWAP;       # @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # @storage : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUG 2;      # @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP;        # @storage : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GET 5;      # big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DUP 4;      # @storage : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        GET 6;      # pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes))) : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        SOME;       # option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        LEVEL;      # @level : option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DIG 5;      # @storage : @level : option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DROP;       # @level : option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        UPDATE;     # big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        UPDATE 5;   # @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        EMPTY_MAP bytes bytes; # map bytes bytes : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH (pair (pair string nat) bytes) (Pair (Pair "" 0) 0x); # pair (pair string nat) bytes : map bytes bytes : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PUSH bytes 0x; # bytes : pair (pair string nat) bytes : map bytes bytes : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        EMPTY_MAP bytes (map int (pair (pair string nat) bytes)); # map bytes (map int (pair (pair string nat) bytes)) : bytes : pair (pair string nat) bytes : map bytes bytes : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        PAIR 4;     # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : @storage : @parameter%snapshot_merkle_tree : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DIG 2;      # @parameter%snapshot_merkle_tree : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DROP;       # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : @storage : lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))))
        DIG 2;      # lambda (pair (pair (pair (pair string nat) bytes) (pair (pair string nat) bytes)) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) (pair (pair (pair string nat) bytes) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))) : pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : @storage
        DROP;       # pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))) : @storage
        UPDATE 6;   # @storage
      }; # pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
    NIL operation; # list operation : pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))))
    PAIR;       # pair (list operation) (pair (set address) (pair (map bytes string) (pair (big_map nat (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes))))) (pair (map bytes (map int (pair (pair string nat) bytes))) (pair bytes (pair (pair (pair string nat) bytes) (map bytes bytes)))))))
  };
view
  "get_proof" (pair (bytes %key) (pair (nat %level) (address %owner))) (pair (nat %level) (pair (bytes %merkle_root) (list %proof (or (bytes %Left) (bytes %Right)))))
  {
    UNPAIR;     # @parameter : @storage
    PUSH string ""; # string : @parameter : @storage
    SWAP;       # @parameter : string : @storage
    DUP;        # @parameter : @parameter : string : @storage
    CAR;        # bytes : @parameter : string : @storage
    SWAP;       # @parameter : bytes : string : @storage
    DUP;        # @parameter : @parameter : bytes : string : @storage
    DUG 3;      # @parameter : bytes : string : @parameter : @storage
    GET 4;      # address : bytes : string : @parameter : @storage
    PACK;       # bytes : bytes : string : @parameter : @storage
    CONCAT;     # bytes : string : @parameter : @storage
    KECCAK;     # bytes : string : @parameter : @storage
    SIZE;       # nat : string : @parameter : @storage
    PUSH nat 0; # nat : nat : string : @parameter : @storage
    DUP;        # nat : nat : nat : string : @parameter : @storage
    DUP 3;      # nat : nat : nat : nat : string : @parameter : @storage
    COMPARE;    # int : nat : nat : string : @parameter : @storage
    GT;         # bool : nat : nat : string : @parameter : @storage
    LOOP
      {
        DUP 5;      # @storage : nat : nat : string : @parameter : @storage
        GET 3;      # map bytes string : nat : nat : string : @parameter : @storage
        DIG 4;      # @parameter : map bytes string : nat : nat : string : @storage
        DUP;        # @parameter : @parameter : map bytes string : nat : nat : string : @storage
        CAR;        # bytes : @parameter : map bytes string : nat : nat : string : @storage
        SWAP;       # @parameter : bytes : map bytes string : nat : nat : string : @storage
        DUP;        # @parameter : @parameter : bytes : map bytes string : nat : nat : string : @storage
        DUG 6;      # @parameter : bytes : map bytes string : nat : nat : string : @parameter : @storage
        GET 4;      # address : bytes : map bytes string : nat : nat : string : @parameter : @storage
        PACK;       # bytes : bytes : map bytes string : nat : nat : string : @parameter : @storage
        CONCAT;     # bytes : map bytes string : nat : nat : string : @parameter : @storage
        KECCAK;     # bytes : map bytes string : nat : nat : string : @parameter : @storage
        PUSH nat 1; # nat : bytes : map bytes string : nat : nat : string : @parameter : @storage
        DUP 4;      # nat : nat : bytes : map bytes string : nat : nat : string : @parameter : @storage
        SLICE;      # option bytes : map bytes string : nat : nat : string : @parameter : @storage
        IF_NONE
          {
            PUSH string "Out of bonds"; # string : map bytes string : nat : nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : map bytes string : nat : nat : string : @parameter : @storage
        GET;        # option string : nat : nat : string : @parameter : @storage
        IF_NONE
          {
            PUSH int 29; # int : nat : nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : string : @parameter : @storage
        DIG 3;      # string : @some : nat : nat : @parameter : @storage
        CONCAT;     # string : nat : nat : @parameter : @storage
        DUG 2;      # nat : nat : string : @parameter : @storage
        PUSH nat 1; # nat : nat : nat : string : @parameter : @storage
        ADD;        # nat : nat : string : @parameter : @storage
        DUP;        # nat : nat : nat : string : @parameter : @storage
        DUP 3;      # nat : nat : nat : nat : string : @parameter : @storage
        COMPARE;    # int : nat : nat : string : @parameter : @storage
        GT;         # bool : nat : nat : string : @parameter : @storage
      }; # nat : nat : string : @parameter : @storage
    DROP 2;     # string : @parameter : @storage
    DUP;        # string : string : @parameter : @storage
    PUSH nat 256; # nat : string : string : @parameter : @storage
    SWAP;       # string : nat : string : @parameter : @storage
    PAIR;       # pair string nat : string : @parameter : @storage
    DUP 4;      # @storage : pair string nat : string : @parameter : @storage
    GET 5;      # big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : pair string nat : string : @parameter : @storage
    DUP 4;      # @parameter : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : pair string nat : string : @parameter : @storage
    GET 3;      # nat : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : pair string nat : string : @parameter : @storage
    GET;        # option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : pair string nat : string : @parameter : @storage
    IF_NONE
      {
        PUSH int 300; # int : pair string nat : string : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : pair string nat : string : @parameter : @storage
    DUP;        # @some : @some : pair string nat : string : @parameter : @storage
    GET 5;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    NIL (or bytes bytes); # list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    PUSH bool True; # bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    DUP;        # bool : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    LOOP
      {
        DUP 5;      # pair string nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SIZE;       # nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 4;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # pair (string %data) (nat %length) : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SIZE;       # nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP;        # nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        LT;         # bool : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {
            SWAP;       # nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP;        # nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUG 2;      # nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }
          {
            DUP;        # nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }; # nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PUSH nat 0; # nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PUSH bool False; # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # nat : nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        LT;         # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        LOOP
          {
            DUP 8;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            CAR;        # pair (string %data) (nat %length) : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            CAR;        # string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            PUSH nat 1; # nat : string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP 4;      # nat : nat : string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            SLICE;      # option string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            IF_NONE
              {
                PUSH string "OUT_OF_BOUNDS"; # string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP 11;     # pair string nat : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            CAR;        # string : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            PUSH nat 1; # nat : string : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP 5;      # nat : nat : string : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            SLICE;      # option string : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            IF_NONE
              {
                PUSH string "OUT_OF_BOUNDS"; # string : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            COMPARE;    # int : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            EQ;         # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            IF
              {
                PUSH nat 1; # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                DIG 2;      # nat : nat : bool : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                ADD;        # nat : bool : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                SWAP;       # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
              }
              {
                DROP;       # nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                PUSH bool True; # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
              }; # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP;        # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            IF
              {
                PUSH bool False; # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
              }
              {
                DUP 3;      # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                DUP 3;      # nat : nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                COMPARE;    # int : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                LT;         # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
              }; # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }; # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 10;     # pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SIZE;       # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # nat : nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        LE;         # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {
            PUSH nat 256; # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP 3;      # nat : nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            COMPARE;    # int : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            LE;         # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }
          {
            PUSH bool False; # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }; # bool : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {}
          {
            PUSH string "Bad pos"; # string : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }; # bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SWAP;       # nat : bool : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP;        # nat : nat : bool : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUG 2;      # nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PUSH string ""; # string : nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PAIR;       # pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PUSH nat 0; # nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 4;      # nat : nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        NEQ;        # bool : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {
            DUP 11;     # pair string nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            CAR;        # string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DUP 4;      # nat : string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            PUSH nat 0; # nat : nat : string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            SLICE;      # option string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            IF_NONE
              {
                PUSH string "Out of bounds"; # string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            UPDATE 1;   # pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }
          {}; # pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 12;     # pair string nat : nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SIZE;       # nat : nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SUB;        # int : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        ISNAT;      # option nat : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF_NONE
          {
            PUSH string "underflow"; # string : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 12;     # pair string nat : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 5;      # nat : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 14;     # pair string nat : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # string : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SIZE;       # nat : nat : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SUB;        # int : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        ISNAT;      # option nat : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF_NONE
          {
            PUSH string "underflow"; # string : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 6;      # nat : @some : string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SLICE;      # option string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF_NONE
          {
            PUSH string "Out of bounds"; # string : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PAIR;       # pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SWAP;       # pair string nat : pair @some @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP;        # pair string nat : pair string nat : pair @some @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUG 2;      # pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 11;     # pair (pair %label (string %data) (nat %length)) (bytes %node) : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CAR;        # pair (string %data) (nat %length) : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CDR;        # nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        SWAP;       # pair string nat : nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP;        # pair string nat : pair string nat : nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUG 2;      # pair string nat : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CDR;        # nat : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        EQ;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {}
          {
            PUSH string "NOT_FOUND"; # string : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            FAILWITH;   # FAILED
          }; # pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        PUSH nat 0; # nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP 3;      # pair @some @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        CDR;        # @some : nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        COMPARE;    # int : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        EQ;         # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        IF
          {
            DIG 8;      # bool : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            DROP 9;     # list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
            PUSH bool False; # bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
          }
          {
            DIG 12;     # pair string nat : pair string nat : pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP 2;     # pair @some @some : pair string nat : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # pair string nat : pair @some @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : bool : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # bool : pair @some @some : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : nat : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # nat : pair @some @some : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : nat : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # nat : pair @some @some : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : nat : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # nat : pair @some @some : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : nat : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # nat : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DROP;       # pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP;        # pair @some @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CDR;        # @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 0; # nat : @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            COMPARE;    # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            LT;         # bool : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF
              {}
              {
                PUSH string "EMPTY_LABEL"; # string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }; # pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP;        # pair @some @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CAR;        # @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH string "0"; # string : @some : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # @some : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 1; # nat : @some : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 0; # nat : nat : @some : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SLICE;      # option string : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH int 0; # int : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : string : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            COMPARE;    # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            EQ;         # bool : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF
              {
                PUSH int 0; # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
              }
              {
                PUSH int 1; # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
              }; # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 1; # nat : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP 3;      # pair @some @some : nat : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CDR;        # @some : nat : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SUB;        # int : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            ISNAT;      # option nat : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH int 0; # int : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP 3;      # pair @some @some : @some : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CAR;        # @some : @some : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 1; # nat : @some : @some : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DIG 4;      # pair @some @some : nat : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CDR;        # @some : nat : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SUB;        # int : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            ISNAT;      # option nat : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH int 0; # int : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH nat 1; # nat : @some : @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SLICE;      # option string : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH string "OUT_OF_BOUNDS"; # string : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PAIR;       # pair @some @some : int : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            SWAP;       # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP;        # int : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            PUSH int 0; # int : int : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            COMPARE;    # int : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            EQ;         # bool : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            IF
              {
                DIG 3;      # list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUP 6;      # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CAR;        # map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUP 6;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CDR;        # bytes : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                GET;        # option (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 333; # int : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                PUSH int 1; # int : @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                GET;        # option (pair (pair %label (string %data) (nat %length)) (bytes %node)) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 333; # int : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CDR;        # bytes : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                RIGHT bytes; # or bytes bytes : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CONS;       # list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUG 3;      # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
              }
              {
                DIG 3;      # list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUP 6;      # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CAR;        # map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUP 6;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CDR;        # bytes : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                GET;        # option (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 336; # int : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                PUSH int 0; # int : @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                GET;        # option (pair (pair %label (string %data) (nat %length)) (bytes %node)) : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 336; # int : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CDR;        # bytes : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                LEFT bytes; # or bytes bytes : list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                CONS;       # list (or bytes bytes) : int : pair @some @some : bool : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
                DUG 3;      # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
              }; # int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DUP 6;      # @some : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            CAR;        # map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : int : pair @some @some : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : string : @parameter : @storage
            DIG 5;      # pair (pair %label (string %data) (nat %length)) (bytes %node) : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            CDR;        # bytes : map bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            GET;        # option (map int (pair (pair %label (string %data) (nat %length)) (bytes %node))) : int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH int 339; # int : int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            SWAP;       # int : @some : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            GET;        # option (pair (pair %label (string %data) (nat %length)) (bytes %node)) : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            IF_NONE
              {
                PUSH int 339; # int : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair @some @some : bool : list (or bytes bytes) : @some : string : @parameter : @storage
            DUG 3;      # pair @some @some : bool : list (or bytes bytes) : @some : @some : string : @parameter : @storage
            DUG 4;      # bool : list (or bytes bytes) : @some : @some : pair @some @some : string : @parameter : @storage
          }; # bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
        DUP;        # bool : bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
      }; # bool : list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    DROP;       # list (or bytes bytes) : pair (pair %label (string %data) (nat %length)) (bytes %node) : @some : pair string nat : string : @parameter : @storage
    SWAP;       # pair (pair %label (string %data) (nat %length)) (bytes %node) : list (or bytes bytes) : @some : pair string nat : string : @parameter : @storage
    DROP;       # list (or bytes bytes) : @some : pair string nat : string : @parameter : @storage
    DIG 2;      # pair string nat : list (or bytes bytes) : @some : string : @parameter : @storage
    DROP;       # list (or bytes bytes) : @some : string : @parameter : @storage
    DIG 2;      # string : list (or bytes bytes) : @some : @parameter : @storage
    DROP;       # list (or bytes bytes) : @some : @parameter : @storage
    DIG 3;      # @storage : list (or bytes bytes) : @some : @parameter
    DROP;       # list (or bytes bytes) : @some : @parameter
    SWAP;       # @some : list (or bytes bytes) : @parameter
    GET 3;      # bytes : list (or bytes bytes) : @parameter
    DIG 2;      # @parameter : bytes : list (or bytes bytes)
    GET 3;      # nat : bytes : list (or bytes bytes)
    PAIR 3;     # pair nat (pair bytes (list (or bytes bytes)))
  };
view
  "verify_proof" (pair (nat %level) (pair (list %proof (or (bytes %Left) (bytes %Right))) (pair %state (bytes %key) (pair (bytes %owner) (bytes %value))))) unit
  {
    UNPAIR;     # @parameter : @storage
    DUP;        # @parameter : @parameter : @storage
    GET 8;      # bytes : @parameter : @storage
    NIL bytes;  # list bytes : bytes : @parameter : @storage
    SWAP;       # bytes : list bytes : @parameter : @storage
    CONS;       # list bytes : @parameter : @storage
    SWAP;       # @parameter : list bytes : @storage
    DUP;        # @parameter : @parameter : list bytes : @storage
    DUG 2;      # @parameter : list bytes : @parameter : @storage
    GET 5;      # bytes : list bytes : @parameter : @storage
    CONS;       # list bytes : @parameter : @storage
    SWAP;       # @parameter : list bytes : @storage
    DUP;        # @parameter : @parameter : list bytes : @storage
    DUG 2;      # @parameter : list bytes : @parameter : @storage
    GET 7;      # bytes : list bytes : @parameter : @storage
    CONS;       # list bytes : @parameter : @storage
    CONCAT;     # bytes : @parameter : @storage
    KECCAK;     # bytes : @parameter : @storage
    SWAP;       # @parameter : bytes : @storage
    DUP;        # @parameter : @parameter : bytes : @storage
    DUG 2;      # @parameter : bytes : @parameter : @storage
    GET 3;      # list (or (bytes %Left) (bytes %Right)) : bytes : @parameter : @storage
    ITER
      {
        IF_LEFT
          {
            CONCAT;     # bytes : @parameter : @storage
            KECCAK;     # bytes : @parameter : @storage
          }
          {
            SWAP;       # bytes : bytes : @parameter : @storage
            CONCAT;     # bytes : @parameter : @storage
            KECCAK;     # bytes : @parameter : @storage
          }; # bytes : @parameter : @storage
      }; # bytes : @parameter : @storage
    DUP 3;      # @storage : bytes : @parameter : @storage
    GET 5;      # big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes : @parameter : @storage
    DUP 3;      # @parameter : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes : @parameter : @storage
    CAR;        # nat : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes : @parameter : @storage
    MEM;        # bool : bytes : @parameter : @storage
    IF
      {
        DIG 2;      # @storage : bytes : @parameter
        GET 5;      # big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes : @parameter
        DIG 2;      # @parameter : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes
        CAR;        # nat : big_map nat (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes
        GET;        # option (pair (map %nodes bytes (map int (pair (pair %label (string %data) (nat %length)) (bytes %node)))) (pair (bytes %root) (pair (pair %root_edge (pair %label (string %data) (nat %length)) (bytes %node)) (map %states bytes bytes)))) : bytes
        IF_NONE
          {
            PUSH int 368; # int : bytes
            FAILWITH;   # FAILED
          }
          {}; # @some : bytes
        GET 3;      # bytes : bytes
        COMPARE;    # int
        EQ;         # bool
      }
      {
        DROP 3;     # 
        PUSH bool False; # bool
      }; # bool
    IF
      {}
      {
        PUSH string "PROOF_INVALID"; # string
        FAILWITH;   # FAILED
      }; # 
    UNIT;       # unit
  };