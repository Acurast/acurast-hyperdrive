parameter (or (or (list %configure (or (list %update_authorized_actions (or (pair %add (pair %function (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage)))))))))))) (pair %storage (bytes %data) (nat %version)))))) (list operation)) (pair (pair (pair %new_action_storage (bytes %data) (nat %version)) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))) (list operation))) (pair %storage (bytes %data) (nat %version))) (string %kind)) (string %remove))) (or (address %update_governance_address) (address %update_validator_address)))) (pair %fulfill (nat %jobId) (bytes %payload))) (or (pair %perform_action (string %action) (bytes %payload)) (pair %receive_messages (list %messages bytes) (pair %proof (list %leaves (pair (bytes %hash) (pair (nat %k_index) (nat %mmr_pos)))) (pair (nat %mmr_size) (pair (list %proof bytes) (nat %snapshot)))))));
storage   (pair (pair %config (big_map %authorized_actions string (pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage)))))))))))) (pair %storage (bytes %data) (nat %version)))))) (list operation)) (pair (pair (pair %new_action_storage (bytes %data) (nat %version)) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))) (list operation))) (pair %storage (bytes %data) (nat %version)))) (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (address %proof_validator) (address %validator_address))))) (pair (nat %outgoing_counter) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))));
code
  {
    UNPAIR;     
    IF_LEFT
      {
        IF_LEFT
          {
            SENDER;     
            DUP 3;      
            CAR;        
            GET 3;      
            COMPARE;    
            EQ;         
            IF
              {}
              {
                PUSH string "NOT_GOVERNANCE"; 
                FAILWITH;   
              }; 
            DUP;        
            ITER
              {
                DUP;        
                IF_LEFT
                  {
                    DUP;        
                    ITER
                      {
                        IF_LEFT
                          {
                            DIG 4;      
                            DUP;        
                            CAR;        
                            DUP;        
                            CAR;        
                            DUP 4;      
                            CAR;        
                            SOME;       
                            DIG 4;      
                            CDR;        
                            UPDATE;     
                            UPDATE 1;   
                            UPDATE 1;   
                            DUG 3;      
                          }
                          {
                            DIG 4;      
                            DUP;        
                            CAR;        
                            DUP;        
                            CAR;        
                            NONE (pair (lambda (pair (pair nat (pair address (pair bytes (pair (big_map nat (pair nat (pair bool (pair (option (set bytes)) (pair address (pair (pair nat (pair (option (set (pair bytes nat))) (pair (option nat) (pair bytes nat)))) (pair nat (pair nat (pair (set nat) (pair (pair nat (pair nat (pair nat (pair nat nat)))) (pair bytes nat))))))))))) (pair bytes nat))))) (list operation)) (pair (pair (pair bytes nat) (big_map nat (pair nat (pair bool (pair (option (set bytes)) (pair address (pair (pair nat (pair (option (set (pair bytes nat))) (pair (option nat) (pair bytes nat)))) (pair nat (pair nat (pair (set nat) (pair (pair nat (pair nat (pair nat (pair nat nat)))) (pair bytes nat)))))))))))) (list operation))) (pair bytes nat)); 
                            DIG 4;      
                            UPDATE;     
                            UPDATE 1;   
                            UPDATE 1;   
                            DUG 3;      
                          }; 
                      }; 
                    DROP 2;     
                  }
                  {
                    SWAP;       
                    DROP;       
                    IF_LEFT
                      {
                        DIG 2;      
                        DUP;        
                        CAR;        
                        DIG 2;      
                        UPDATE 3;   
                        UPDATE 1;   
                        SWAP;       
                      }
                      {
                        DIG 2;      
                        DUP;        
                        CAR;        
                        DIG 2;      
                        UPDATE 8;   
                        UPDATE 1;   
                        SWAP;       
                      }; 
                  }; 
              }; 
            DROP;       
            NIL operation; 
          }
          {
            NIL operation; 
            DUP 3;      
            GET 4;      
            DUP 3;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; 
                FAILWITH;   
              }
              {}; 
            GET 7;      
            CONTRACT %fulfill bytes; 
            IF_NONE
              {
                PUSH string "INVALID_CONTRACT"; 
                FAILWITH;   
              }
              {}; 
            PUSH mutez 0; 
            DIG 3;      
            CDR;        
            TRANSFER_TOKENS; 
            CONS;       
          }; 
      }
      {
        IF_LEFT
          {
            SWAP;       
            DUP;        
            GET 3;      
            PUSH nat 1; 
            ADD;        
            UPDATE 3;   
            SWAP;       
            NIL operation; 
            DUP 3;      
            CAR;        
            CAR;        
            DUP 3;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "ACTION_NOT_SUPPORTED"; 
                FAILWITH;   
              }
              {}; 
            CAR;        
            DUP 4;      
            CAR;        
            CAR;        
            DUP 4;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "ACTION_NOT_SUPPORTED"; 
                FAILWITH;   
              }
              {}; 
            CDR;        
            DUP 5;      
            GET 4;      
            DUP 5;      
            CDR;        
            DUP 7;      
            CAR;        
            GET 5;      
            DUP 8;      
            GET 3;      
            PAIR 5;     
            SWAP;       
            DUG 2;      
            PAIR;       
            EXEC;       
            UNPAIR;     
            DIG 3;      
            DUP 2;      
            CDR;        
            UPDATE 4;   
            DUP;        
            CAR;        
            DUP;        
            CAR;        
            DUP;        
            DIG 6;      
            CAR;        
            DUP;        
            DUG 2;      
            GET;        
            IF_NONE
              {
                PUSH int 260; 
                FAILWITH;   
              }
              {}; 
            DIG 5;      
            CAR;        
            UPDATE 2;   
            SOME;       
            SWAP;       
            UPDATE;     
            UPDATE 1;   
            UPDATE 1;   
            SWAP;       
          }
          {
            EMPTY_SET bytes; 
            DUP 2;      
            CAR;        
            ITER
              {
                SWAP;       
                PUSH bool True; 
                DIG 2;      
                KECCAK;     
                UPDATE;     
              }; 
            DUP 2;      
            GET 3;      
            ITER
              {
                DUP 2;      
                SWAP;       
                CAR;        
                MEM;        
                IF
                  {}
                  {
                    PUSH string "INVALID_PROOF"; 
                    FAILWITH;   
                  }; 
              }; 
            DROP;       
            SWAP;       
            DUP;        
            CAR;        
            GET 8;      
            DIG 2;      
            CDR;        
            VIEW "verify_proof" bool; 
            IF_NONE
              {
                PUSH string "INVALID_VIEW"; 
                FAILWITH;   
              }
              {}; 
            IF
              {}
              {
                PUSH string "INVALID_PROOF"; 
                FAILWITH;   
              }; 
            NIL operation; 
          }; 
      }; 
    NIL operation; 
    SWAP;       
    ITER
      {
        CONS;       
      }; 
    PAIR;       
  };