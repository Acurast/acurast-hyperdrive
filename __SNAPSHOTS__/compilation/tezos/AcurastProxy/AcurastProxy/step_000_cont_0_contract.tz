parameter (or (or (list %configure (or (address %update_governance_address) (or (list %update_ingoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair (bytes %payload) (pair %storage (bytes %data) (nat %version)))) (list operation)) (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair %new_action_storage (bytes %data) (nat %version))) (list operation))) (pair %storage (bytes %data) (nat %version))) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair %storage (bytes %data) (nat %version))))) (list operation)) (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair %new_action_storage (bytes %data) (nat %version))) (list operation))) (pair %storage (bytes %data) (nat %version))) (string %kind)) (string %remove))) (address %update_proof_validator)))))) (pair %fulfill (nat %job_id) (bytes %payload))) (or (pair %receive_actions (list %leaves (pair (bytes %data) (pair (nat %k_index) (nat %mmr_pos)))) (pair (nat %mmr_size) (pair (list %proof bytes) (nat %snapshot)))) (list %send_actions (pair (string %kind) (bytes %payload)))));
storage   (pair (pair (pair %config (address %governance_address) (pair (big_map %ingoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair (bytes %payload) (pair %storage (bytes %data) (nat %version)))) (list operation)) (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair %new_action_storage (bytes %data) (nat %version))) (list operation))) (pair %storage (bytes %data) (nat %version)))) (pair (address %merkle_aggregator) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair %storage (bytes %data) (nat %version))))) (list operation)) (pair (pair (pair %context (nat %action_id) (big_map %job_information nat (pair (address %destination) (set %processors address)))) (pair %new_action_storage (bytes %data) (nat %version))) (list operation))) (pair %storage (bytes %data) (nat %version)))) (address %proof_validator))))) (nat %ingoing_seq_id)) (pair (big_map %job_information nat (pair (address %destination) (set %processors address))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))));
code
  {
    UNPAIR;     
    IF_LEFT
      {
        IF_LEFT
          {
            SENDER;     
            DUP 3;      
            CAR;        
            CAR;        
            CAR;        
            COMPARE;    
            EQ;         
            IF
              {}
              {
                PUSH string "NOT_GOVERNANCE"; 
                FAILWITH;   
              }; 
            DUP;        
            ITER
              {
                DUP;        
                IF_LEFT
                  {
                    SWAP;       
                    DROP;       
                    DIG 2;      
                    UNPAIR;     
                    UNPAIR;     
                    DIG 3;      
                    UPDATE 1;   
                    PAIR;       
                    PAIR;       
                    SWAP;       
                  }
                  {
                    IF_LEFT
                      {
                        DUP;        
                        ITER
                          {
                            IF_LEFT
                              {
                                DIG 4;      
                                UNPAIR;     
                                UNPAIR;     
                                DUP;        
                                GET 3;      
                                DUP 5;      
                                CAR;        
                                SOME;       
                                DIG 5;      
                                CDR;        
                                UPDATE;     
                                UPDATE 3;   
                                PAIR;       
                                PAIR;       
                                DUG 3;      
                              }
                              {
                                DIG 4;      
                                UNPAIR;     
                                UNPAIR;     
                                DUP;        
                                GET 3;      
                                NONE (pair (lambda (pair (pair (pair nat (big_map nat (pair address (set address)))) (pair bytes (pair bytes nat))) (list operation)) (pair (pair (pair nat (big_map nat (pair address (set address)))) (pair bytes nat)) (list operation))) (pair bytes nat)); 
                                DIG 5;      
                                UPDATE;     
                                UPDATE 3;   
                                PAIR;       
                                PAIR;       
                                DUG 3;      
                              }; 
                          }; 
                        DROP 2;     
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       
                            DROP;       
                            DIG 2;      
                            UNPAIR;     
                            UNPAIR;     
                            DIG 3;      
                            UPDATE 5;   
                            PAIR;       
                            PAIR;       
                            SWAP;       
                          }
                          {
                            IF_LEFT
                              {
                                DUP;        
                                ITER
                                  {
                                    IF_LEFT
                                      {
                                        DIG 4;      
                                        UNPAIR;     
                                        UNPAIR;     
                                        DUP;        
                                        GET 7;      
                                        DUP 5;      
                                        CAR;        
                                        SOME;       
                                        DIG 5;      
                                        CDR;        
                                        UPDATE;     
                                        UPDATE 7;   
                                        PAIR;       
                                        PAIR;       
                                        DUG 3;      
                                      }
                                      {
                                        DIG 4;      
                                        UNPAIR;     
                                        UNPAIR;     
                                        DUP;        
                                        GET 7;      
                                        NONE (pair (lambda (pair (pair (pair nat (big_map nat (pair address (set address)))) (pair address (pair bytes (pair bytes nat)))) (list operation)) (pair (pair (pair nat (big_map nat (pair address (set address)))) (pair bytes nat)) (list operation))) (pair bytes nat)); 
                                        DIG 5;      
                                        UPDATE;     
                                        UPDATE 7;   
                                        PAIR;       
                                        PAIR;       
                                        DUG 3;      
                                      }; 
                                  }; 
                                DROP 2;     
                              }
                              {
                                SWAP;       
                                DROP;       
                                DIG 2;      
                                UNPAIR;     
                                UNPAIR;     
                                DIG 3;      
                                UPDATE 8;   
                                PAIR;       
                                PAIR;       
                                SWAP;       
                              }; 
                          }; 
                      }; 
                  }; 
              }; 
            DROP;       
            NIL operation; 
          }
          {
            DUP 2;      
            GET 3;      
            DUP 2;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; 
                FAILWITH;   
              }
              {}; 
            CDR;        
            SENDER;     
            MEM;        
            IF
              {}
              {
                PUSH string "NOT_JOB_PROCESSOR"; 
                FAILWITH;   
              }; 
            NIL operation; 
            DUP 3;      
            GET 3;      
            DUP 3;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; 
                FAILWITH;   
              }
              {}; 
            CAR;        
            CONTRACT %fulfill (pair (nat %job_id) (bytes %payload)); 
            IF_NONE
              {
                PUSH string "INVALID_CONTRACT"; 
                FAILWITH;   
              }
              {}; 
            PUSH mutez 0; 
            DIG 3;      
            TRANSFER_TOKENS; 
            CONS;       
          }; 
      }
      {
        IF_LEFT
          {
            DUP 2;      
            CAR;        
            CAR;        
            GET 8;      
            DUP 2;      
            GET 6;      
            DUP 3;      
            GET 5;      
            DUP 4;      
            GET 3;      
            DUP 5;      
            CAR;        
            MAP
              {
                DUP;        
                GET 4;      
                SWAP;       
                DUP;        
                GET 3;      
                SWAP;       
                CAR;        
                KECCAK;     
                PAIR 3;     
              }; 
            PAIR 4;     
            VIEW "verify_proof" bool; 
            IF_NONE
              {
                PUSH string "INVALID_VIEW"; 
                FAILWITH;   
              }
              {}; 
            IF
              {}
              {
                PUSH string "INVALID_PROOF"; 
                FAILWITH;   
              }; 
            NIL operation; 
            DUP 2;      
            CAR;        
            ITER
              {
                DUP;        
                CAR;        
                UNPACK (pair nat (pair string bytes)); 
                IF_NONE
                  {
                    DUP;        
                    CAR;        
                    PUSH string "CANNOT_DECODE_ACTION"; 
                    PAIR;       
                    FAILWITH;   
                  }
                  {
                    SWAP;       
                    DROP;       
                  }; 
                DUP 4;      
                CAR;        
                CDR;        
                DUP 2;      
                CAR;        
                COMPARE;    
                EQ;         
                IF
                  {}
                  {
                    PUSH string "WrongCondition: compute_AcurastProxy_385.value.ingoing_action_id == self.data.ingoing_seq_id"; 
                    FAILWITH;   
                  }; 
                DIG 3;      
                UNPAIR;     
                UNPAIR;     
                SWAP;       
                PUSH nat 1; 
                ADD;        
                SWAP;       
                PAIR;       
                PAIR;       
                DUG 3;      
                DUP 4;      
                CAR;        
                CAR;        
                GET 3;      
                DUP 2;      
                GET 3;      
                GET;        
                IF_NONE
                  {
                    PUSH string "INGOING_ACTION_NOT_SUPPORTED"; 
                    FAILWITH;   
                  }
                  {}; 
                CAR;        
                DUP 5;      
                CAR;        
                CAR;        
                GET 3;      
                DUP 3;      
                GET 3;      
                GET;        
                IF_NONE
                  {
                    PUSH string "INGOING_ACTION_NOT_SUPPORTED"; 
                    FAILWITH;   
                  }
                  {}; 
                CDR;        
                DUP 3;      
                GET 4;      
                DUP 7;      
                GET 3;      
                DUP 8;      
                CAR;        
                CDR;        
                PAIR;       
                PAIR 3;     
                SWAP;       
                DIG 3;      
                DIG 2;      
                PAIR;       
                EXEC;       
                UNPAIR;     
                DIG 4;      
                DIG 4;      
                DIG 3;      
                DUG 4;      
                DUG 4;      
                DUP 2;      
                CAR;        
                CDR;        
                UPDATE 3;   
                UNPAIR;     
                UNPAIR;     
                DUP;        
                GET 3;      
                DUP;        
                DIG 6;      
                GET 3;      
                DUP;        
                DUG 2;      
                GET;        
                IF_NONE
                  {
                    PUSH int 412; 
                    FAILWITH;   
                  }
                  {}; 
                DIG 6;      
                CDR;        
                UPDATE 2;   
                SOME;       
                SWAP;       
                UPDATE;     
                UPDATE 3;   
                PAIR;       
                PAIR;       
                DUG 2;      
              }; 
            SWAP;       
            DROP;       
          }
          {
            NIL operation; 
            DUP 2;      
            ITER
              {
                DIG 3;      
                DUP;        
                GET 6;      
                PUSH nat 1; 
                ADD;        
                UPDATE 6;   
                DUG 3;      
                DUP 4;      
                DUP;        
                GET 5;      
                LEVEL;      
                SOME;       
                DIG 6;      
                GET 6;      
                UPDATE;     
                UPDATE 5;   
                DUG 3;      
                DUP 4;      
                CAR;        
                CAR;        
                GET 7;      
                DUP 2;      
                CAR;        
                GET;        
                IF_NONE
                  {
                    PUSH string "OUTGOING_ACTION_NOT_SUPPORTED"; 
                    FAILWITH;   
                  }
                  {}; 
                CAR;        
                DUP 5;      
                CAR;        
                CAR;        
                GET 7;      
                DUP 3;      
                CAR;        
                GET;        
                IF_NONE
                  {
                    PUSH string "OUTGOING_ACTION_NOT_SUPPORTED"; 
                    FAILWITH;   
                  }
                  {}; 
                CDR;        
                DUP 3;      
                CDR;        
                DUP 7;      
                CAR;        
                CAR;        
                GET 5;      
                DUP 8;      
                GET 3;      
                DUP 9;      
                GET 6;      
                PAIR;       
                PAIR 4;     
                SWAP;       
                DIG 3;      
                DIG 2;      
                PAIR;       
                EXEC;       
                UNPAIR;     
                DIG 4;      
                DIG 4;      
                DIG 3;      
                DUG 4;      
                DUG 4;      
                DUP 2;      
                CAR;        
                CDR;        
                UPDATE 3;   
                UNPAIR;     
                UNPAIR;     
                DUP;        
                GET 7;      
                DUP;        
                DIG 6;      
                CAR;        
                DUP;        
                DUG 2;      
                GET;        
                IF_NONE
                  {
                    PUSH int 353; 
                    FAILWITH;   
                  }
                  {}; 
                DIG 6;      
                CDR;        
                UPDATE 2;   
                SOME;       
                SWAP;       
                UPDATE;     
                UPDATE 7;   
                PAIR;       
                PAIR;       
                DUG 2;      
              }; 
            SWAP;       
            DROP;       
          }; 
      }; 
    NIL operation; 
    SWAP;       
    ITER
      {
        CONS;       
      }; 
    PAIR;       
  };