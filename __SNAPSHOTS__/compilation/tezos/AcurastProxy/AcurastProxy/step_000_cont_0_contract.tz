parameter (or (or (list %configure (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))))) (pair %fulfill (nat %job_id) (bytes %payload))) (or (pair %receive_actions (list %leaves (pair (bytes %data) (nat %mmr_pos))) (pair (nat %mmr_size) (pair (list %proof bytes) (nat %snapshot)))) (list %send_actions (pair (string %kind) (bytes %payload)))));
storage   (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SENDER;     # @sender : @parameter%configure : @storage
            DUP 3;      # @storage : @sender : @parameter%configure : @storage
            GET 5;      # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : @sender : @parameter%configure : @storage
            CAR;        # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : @sender : @parameter%configure : @storage
            CAR;        # address : @sender : @parameter%configure : @storage
            COMPARE;    # int : @parameter%configure : @storage
            EQ;         # bool : @parameter%configure : @storage
            IF
              {}
              {
                PUSH string "NOT_GOVERNANCE"; # string : @parameter%configure : @storage
                FAILWITH;   # FAILED
              }; # @parameter%configure : @storage
            NIL operation; # list operation : @parameter%configure : @storage
            DUP 2;      # @parameter%configure : list operation : @parameter%configure : @storage
            ITER
              {
                DUP;        # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                IF_LEFT
                  {
                    SWAP;       # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : list operation : @parameter%configure : @storage
                    DROP;       # lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : list operation : @parameter%configure : @storage
                    UNIT;       # unit : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : list operation : @parameter%configure : @storage
                    SWAP;       # lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : unit : list operation : @parameter%configure : @storage
                    DIG 4;      # @storage : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : unit : list operation : @parameter%configure
                    DIG 3;      # list operation : @storage : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : unit : @parameter%configure
                    DIG 3;      # unit : list operation : @storage : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : @parameter%configure
                    PAIR 3;     # pair unit (pair (list operation) @storage) : lambda (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) : @parameter%configure
                    EXEC;       # pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))) : @parameter%configure
                    CDR;        # pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))) : @parameter%configure
                    UNPAIR;     # list operation : pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) : @parameter%configure
                    SWAP;       # pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) : list operation : @parameter%configure
                    DUG 2;      # list operation : @parameter%configure : pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : bool : list operation : @parameter%configure : @storage
                        DROP;       # bool : list operation : @parameter%configure : @storage
                        DIG 3;      # @storage : bool : list operation : @parameter%configure
                        DUP;        # @storage : @storage : bool : list operation : @parameter%configure
                        GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : bool : list operation : @parameter%configure
                        UNPAIR;     # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : bool : list operation : @parameter%configure
                        UNPAIR;     # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : bool : list operation : @parameter%configure
                        DIG 4;      # bool : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                        UPDATE 5;   # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                        PAIR;       # pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                        PAIR;       # pair (pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%configure
                        UPDATE 4;   # @storage : list operation : @parameter%configure
                        DUG 2;      # list operation : @parameter%configure : @storage
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : address : list operation : @parameter%configure : @storage
                            DROP;       # address : list operation : @parameter%configure : @storage
                            DIG 3;      # @storage : address : list operation : @parameter%configure
                            DUP;        # @storage : @storage : address : list operation : @parameter%configure
                            GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : address : list operation : @parameter%configure
                            UNPAIR;     # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                            UNPAIR;     # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                            DIG 4;      # address : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                            UPDATE 1;   # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                            PAIR;       # pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                            PAIR;       # pair (pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%configure
                            UPDATE 4;   # @storage : list operation : @parameter%configure
                            DUG 2;      # list operation : @parameter%configure : @storage
                          }
                          {
                            IF_LEFT
                              {
                                DUP;        # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                ITER
                                  {
                                    IF_LEFT
                                      {
                                        DIG 5;      # @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DUP;        # @storage : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        CAR;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DUP 3;      # pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        CAR;        # pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        SOME;       # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DIG 3;      # pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        CDR;        # string : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        UPDATE;     # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        UPDATE 1;   # @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DUG 4;      # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                      }
                                      {
                                        DIG 5;      # @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DUP;        # @storage : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        CAR;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        NONE (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes); # option (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DIG 3;      # string : option (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        UPDATE;     # big_map string (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        UPDATE 1;   # @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                        DUG 4;      # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                      }; # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                                  }; # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                DROP 2;     # list operation : @parameter%configure : @storage
                              }
                              {
                                IF_LEFT
                                  {
                                    SWAP;       # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : address : list operation : @parameter%configure : @storage
                                    DROP;       # address : list operation : @parameter%configure : @storage
                                    DIG 3;      # @storage : address : list operation : @parameter%configure
                                    DUP;        # @storage : @storage : address : list operation : @parameter%configure
                                    GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : address : list operation : @parameter%configure
                                    UNPAIR;     # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                                    UNPAIR;     # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                                    DIG 4;      # address : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                    UPDATE 3;   # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                    PAIR;       # pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                    PAIR;       # pair (pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%configure
                                    UPDATE 4;   # @storage : list operation : @parameter%configure
                                    DUG 2;      # list operation : @parameter%configure : @storage
                                  }
                                  {
                                    IF_LEFT
                                      {
                                        DUP;        # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                        ITER
                                          {
                                            IF_LEFT
                                              {
                                                DIG 5;      # @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DUP;        # @storage : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                GET 3;      # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DUP 3;      # pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                CAR;        # pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                SOME;       # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DIG 3;      # pair (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind) : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                CDR;        # string : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                UPDATE;     # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                UPDATE 3;   # @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DUG 4;      # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                              }
                                              {
                                                DIG 5;      # @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DUP;        # @storage : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                GET 3;      # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                NONE (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes); # option (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : string : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DIG 3;      # string : option (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                UPDATE;     # big_map string (pair (lambda (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) (pair bytes bytes)) (list operation)) (pair (pair (pair nat (pair (pair (pair address (pair address (pair bool address))) nat) (pair (big_map nat (pair (pair (pair bytes (pair address address)) (pair nat (pair mutez nat))) (pair (pair nat (pair (set address) mutez)) (pair nat (pair nat nat))))) (pair (big_map nat nat) nat)))) bytes) (list operation))) bytes) : @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                UPDATE 3;   # @storage : list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure
                                                DUG 4;      # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                              }; # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                                          }; # list (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove)) : or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : list operation : @parameter%configure : @storage
                                        DROP 2;     # list operation : @parameter%configure : @storage
                                      }
                                      {
                                        SWAP;       # or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator)))))) : address : list operation : @parameter%configure : @storage
                                        DROP;       # address : list operation : @parameter%configure : @storage
                                        DIG 3;      # @storage : address : list operation : @parameter%configure
                                        DUP;        # @storage : @storage : address : list operation : @parameter%configure
                                        GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : address : list operation : @parameter%configure
                                        UNPAIR;     # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                                        UNPAIR;     # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : address : list operation : @parameter%configure
                                        DIG 4;      # address : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                        UPDATE 6;   # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                        PAIR;       # pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : list operation : @parameter%configure
                                        PAIR;       # pair (pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%configure
                                        UPDATE 4;   # @storage : list operation : @parameter%configure
                                        DUG 2;      # list operation : @parameter%configure : @storage
                                      }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                                  }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                              }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                          }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                      }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : @storage
                  }; # list operation : list (or (lambda %generic (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))))) (pair unit (pair (list operation) (pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))))))) (or (bool %set_paused) (or (address %update_governance_address) (or (list %update_incoming_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (or (address %update_merkle_aggregator) (or (list %update_outgoing_actions (or (pair %add (pair %function (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) (string %kind)) (string %remove))) (address %update_proof_validator))))))) : pair (big_map %incoming_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair (big_map %outgoing_actions string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage))) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))))
              }; # list operation : @parameter%configure : @storage
            SWAP;       # @parameter%configure : list operation : @storage
            DROP;       # list operation : @storage
          }
          {
            DUP 2;      # @storage : @parameter%fulfill : @storage
            GET 7;      # big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : @parameter%fulfill : @storage
            DUP 2;      # @parameter%fulfill : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : @parameter%fulfill : @storage
            CAR;        # nat : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : @parameter%fulfill : @storage
            GET;        # option (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : @parameter%fulfill : @storage
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; # string : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%fulfill : @storage
            DUP;        # @some : @some : @parameter%fulfill : @storage
            GET 3;      # pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee)) : @some : @parameter%fulfill : @storage
            GET 3;      # set address : @some : @parameter%fulfill : @storage
            SENDER;     # @sender : set address : @some : @parameter%fulfill : @storage
            MEM;        # bool : @some : @parameter%fulfill : @storage
            IF
              {}
              {
                PUSH string "NOT_JOB_PROCESSOR"; # string : @some : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%fulfill : @storage
            DUP;        # @some : @some : @parameter%fulfill : @storage
            UNPAIR;     # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))) : @some : @parameter%fulfill : @storage
            SWAP;       # pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            UNPAIR;     # pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee)) : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            UNPAIR;     # nat : pair (set %processors address) (mutez %remaining_fee) : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            SWAP;       # pair (set %processors address) (mutez %remaining_fee) : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            UNPAIR;     # set address : mutez : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            SWAP;       # mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : @parameter%fulfill : @storage
            DIG 5;      # @some : mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            CAR;        # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            GET 5;      # mutez : mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            SWAP;       # mutez : mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            SUB_MUTEZ;  # option mutez : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            IF_NONE
              {
                PUSH int 843; # int : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : set address : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            SWAP;       # set address : @some : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            PAIR;       # pair (set address) @some : nat : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            SWAP;       # nat : pair (set address) @some : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            PAIR;       # pair nat (pair (set address) @some) : pair (nat %slots) (pair (nat %startTime) (nat %status)) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            PAIR;       # pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status))) : pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @parameter%fulfill : @storage
            SWAP;       # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status))) : @parameter%fulfill : @storage
            PAIR;       # pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            PUSH mutez 0; # mutez : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            DUP 2;      # pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : mutez : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            CAR;        # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : mutez : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            GET 5;      # mutez : mutez : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            COMPARE;    # int : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            GT;         # bool : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            IF
              {
                NIL operation; # list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                SENDER;     # @sender : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                CONTRACT unit; # option (contract unit) : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                IF_NONE
                  {
                    PUSH string "INVALID_CONTRACT"; # string : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                DUP 3;      # pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                CAR;        # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                GET 5;      # mutez : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                UNIT;       # unit : mutez : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                CONS;       # list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
              }
              {
                NIL operation; # list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
              }; # list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            DUP 2;      # pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            CAR;        # pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval))) : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            CAR;        # pair (bytes %abstract) (pair (address %creator) (address %destination)) : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            GET 4;      # address : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            CONTRACT %fulfill (pair (nat %job_id) (bytes %payload)); # option (contract (pair (nat %job_id) (bytes %payload))) : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            IF_NONE
              {
                PUSH string "INVALID_CONTRACT"; # string : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            DUP 5;      # @parameter%fulfill : mutez : @some : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            CONS;       # list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill : @storage
            DIG 3;      # @storage : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill
            DUP;        # @storage : @storage : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill
            GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill
            DUP;        # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill
            GET 3;      # big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : @parameter%fulfill
            DIG 4;      # pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status)))) : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%fulfill
            SOME;       # option (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation : @parameter%fulfill
            DIG 5;      # @parameter%fulfill : option (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation
            CAR;        # nat : option (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) @some)) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation
            UPDATE;     # big_map nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair nat (pair (set address) mutez)) (pair (nat %slots) (pair (nat %startTime) (nat %status))))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation
            UPDATE 3;   # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : list operation
            UPDATE 4;   # @storage : list operation
            SWAP;       # list operation : @storage
          }; # list operation : @storage
      }
      {
        IF_LEFT
          {
            DUP 2;      # @storage : @parameter%receive_actions : @storage
            GET 5;      # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : @parameter%receive_actions : @storage
            CAR;        # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : @parameter%receive_actions : @storage
            GET 6;      # address : @parameter%receive_actions : @storage
            DUP 2;      # @parameter%receive_actions : address : @parameter%receive_actions : @storage
            GET 6;      # nat : address : @parameter%receive_actions : @storage
            DUP 3;      # @parameter%receive_actions : nat : address : @parameter%receive_actions : @storage
            GET 5;      # list bytes : nat : address : @parameter%receive_actions : @storage
            DUP 4;      # @parameter%receive_actions : list bytes : nat : address : @parameter%receive_actions : @storage
            GET 3;      # nat : list bytes : nat : address : @parameter%receive_actions : @storage
            DUP 5;      # @parameter%receive_actions : nat : list bytes : nat : address : @parameter%receive_actions : @storage
            CAR;        # list (pair (bytes %data) (nat %mmr_pos)) : nat : list bytes : nat : address : @parameter%receive_actions : @storage
            MAP
              {
                UNPAIR;     # bytes : nat : nat : list bytes : nat : address : @parameter%receive_actions : @storage
                KECCAK;     # bytes : nat : nat : list bytes : nat : address : @parameter%receive_actions : @storage
                PAIR;       # pair bytes nat : nat : list bytes : nat : address : @parameter%receive_actions : @storage
              }; # list (pair bytes nat) : nat : list bytes : nat : address : @parameter%receive_actions : @storage
            PAIR 4;     # pair (list (pair bytes nat)) (pair nat (pair (list bytes) nat)) : address : @parameter%receive_actions : @storage
            VIEW "verify_proof" bool; # option bool : @parameter%receive_actions : @storage
            IF_NONE
              {
                PUSH string "INVALID_VIEW"; # string : @parameter%receive_actions : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%receive_actions : @storage
            IF
              {}
              {
                PUSH string "INVALID_PROOF"; # string : @parameter%receive_actions : @storage
                FAILWITH;   # FAILED
              }; # @parameter%receive_actions : @storage
            NIL operation; # list operation : @parameter%receive_actions : @storage
            DUP 2;      # @parameter%receive_actions : list operation : @parameter%receive_actions : @storage
            CAR;        # list (pair (bytes %data) (nat %mmr_pos)) : list operation : @parameter%receive_actions : @storage
            ITER
              {
                DUP;        # pair (bytes %data) (nat %mmr_pos) : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                CAR;        # bytes : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                UNPACK (pair nat (pair string bytes)); # option (pair nat (pair string bytes)) : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                IF_NONE
                  {
                    DUP;        # pair (bytes %data) (nat %mmr_pos) : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                    CAR;        # bytes : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                    PUSH string "CANNOT_DECODE_ACTION"; # string : bytes : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                    PAIR;       # pair string bytes : pair (bytes %data) (nat %mmr_pos) : list operation : @parameter%receive_actions : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    SWAP;       # pair (bytes %data) (nat %mmr_pos) : @some : list operation : @parameter%receive_actions : @storage
                    DROP;       # @some : list operation : @parameter%receive_actions : @storage
                  }; # @some : list operation : @parameter%receive_actions : @storage
                DUP 4;      # @storage : @some : list operation : @parameter%receive_actions : @storage
                GET 5;      # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : @some : list operation : @parameter%receive_actions : @storage
                CDR;        # nat : @some : list operation : @parameter%receive_actions : @storage
                DUP 2;      # @some : nat : @some : list operation : @parameter%receive_actions : @storage
                CAR;        # nat : nat : @some : list operation : @parameter%receive_actions : @storage
                COMPARE;    # int : @some : list operation : @parameter%receive_actions : @storage
                EQ;         # bool : @some : list operation : @parameter%receive_actions : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: compute_AcurastProxy_797.value.incoming_action_id == self.data.store.incoming_seq_id"; # string : @some : list operation : @parameter%receive_actions : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @parameter%receive_actions : @storage
                DIG 3;      # @storage : @some : list operation : @parameter%receive_actions
                DUP;        # @storage : @storage : @some : list operation : @parameter%receive_actions
                GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : @some : list operation : @parameter%receive_actions
                UNPAIR;     # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                UNPAIR;     # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                SWAP;       # nat : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                PUSH nat 1; # nat : nat : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                ADD;        # nat : pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                SWAP;       # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                PAIR;       # pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat : pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)) : @storage : @some : list operation : @parameter%receive_actions
                PAIR;       # pair (pair (pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) nat) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : @some : list operation : @parameter%receive_actions
                UPDATE 4;   # @storage : @some : list operation : @parameter%receive_actions
                DUG 3;      # @some : list operation : @parameter%receive_actions : @storage
                DUP 4;      # @storage : @some : list operation : @parameter%receive_actions : @storage
                CAR;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 2;      # @some : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @some : list operation : @parameter%receive_actions : @storage
                GET 3;      # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @some : list operation : @parameter%receive_actions : @storage
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @some : list operation : @parameter%receive_actions : @storage
                IF_NONE
                  {
                    PUSH string "INCOMING_ACTION_NOT_SUPPORTED"; # string : @some : list operation : @parameter%receive_actions : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : list operation : @parameter%receive_actions : @storage
                CAR;        # lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 5;      # @storage : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                CAR;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 3;      # @some : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                GET 3;      # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                IF_NONE
                  {
                    PUSH string "INCOMING_ACTION_NOT_SUPPORTED"; # string : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                CDR;        # bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 3;      # @some : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                GET 4;      # bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 7;      # @storage : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                DUP 8;      # @storage : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                GET 5;      # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                CDR;        # nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                PAIR;       # pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                PAIR 3;     # pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : list operation : @parameter%receive_actions : @storage
                SWAP;       # lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : @some : list operation : @parameter%receive_actions : @storage
                DIG 3;      # list operation : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : @some : @parameter%receive_actions : @storage
                DIG 2;      # pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : list operation : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : @parameter%receive_actions : @storage
                PAIR;       # pair (pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes)) (list operation) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : @some : @parameter%receive_actions : @storage
                EXEC;       # pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation) : @some : @parameter%receive_actions : @storage
                UNPAIR;     # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @some : @parameter%receive_actions : @storage
                DIG 4;      # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @some : @parameter%receive_actions
                DIG 4;      # @parameter%receive_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @some
                DIG 3;      # list operation : @parameter%receive_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some
                DUG 4;      # @parameter%receive_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation
                DUG 4;      # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                DUP 2;      # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                CAR;        # pair (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                CDR;        # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                UPDATE 4;   # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                DUP;        # @storage : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                CAR;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                DUP;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : list operation : @parameter%receive_actions
                DIG 4;      # @some : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                GET 3;      # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                DUP;        # string : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                DUG 2;      # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                IF_NONE
                  {
                    PUSH int 826; # int : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%receive_actions
                DIG 4;      # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                CDR;        # bytes : @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                UPDATE 2;   # @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                SOME;       # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                SWAP;       # string : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                UPDATE;     # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%receive_actions
                UPDATE 1;   # @storage : list operation : @parameter%receive_actions
                DUG 2;      # list operation : @parameter%receive_actions : @storage
              }; # list operation : @parameter%receive_actions : @storage
            SWAP;       # @parameter%receive_actions : list operation : @storage
            DROP;       # list operation : @storage
          }
          {
            DUP 2;      # @storage : @parameter%send_actions : @storage
            GET 5;      # pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id) : @parameter%send_actions : @storage
            CAR;        # pair (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator))) : @parameter%send_actions : @storage
            GET 5;      # bool : @parameter%send_actions : @storage
            IF
              {
                PUSH string "CONTRACT_PAUSED"; # string : @parameter%send_actions : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%send_actions : @storage
            NIL operation; # list operation : @parameter%send_actions : @storage
            DUP 2;      # @parameter%send_actions : list operation : @parameter%send_actions : @storage
            ITER
              {
                DIG 3;      # @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUP;        # @storage : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUP;        # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                GET 6;      # nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                PUSH nat 1; # nat : nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                ADD;        # nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE 6;   # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE 4;   # @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUG 3;      # pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 4;      # @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP;        # @storage : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP;        # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 5;      # big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                LEVEL;      # @level : big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                SOME;       # option nat : big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DIG 7;      # @storage : option nat : big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                GET 10;     # nat : option nat : big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE;     # big_map nat nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE 5;   # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE 4;   # @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUG 3;      # pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 4;      # @storage : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 3;      # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 2;      # pair (string %kind) (bytes %payload) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                CAR;        # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                IF_NONE
                  {
                    PUSH string "OUTGOING_ACTION_NOT_SUPPORTED"; # string : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                CAR;        # lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 5;      # @storage : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 3;      # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 3;      # pair (string %kind) (bytes %payload) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                CAR;        # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                IF_NONE
                  {
                    PUSH string "OUTGOING_ACTION_NOT_SUPPORTED"; # string : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                CDR;        # bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 3;      # pair (string %kind) (bytes %payload) : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                CDR;        # bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 7;      # @storage : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 4;      # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DUP 8;      # @storage : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                GET 10;     # nat : pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                PAIR;       # pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))) : bytes : bytes : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                PAIR 3;     # pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                SWAP;       # lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions : @storage
                DIG 3;      # list operation : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : pair (string %kind) (bytes %payload) : @parameter%send_actions : @storage
                DIG 2;      # pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes) : list operation : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : @parameter%send_actions : @storage
                PAIR;       # pair (pair (pair nat (pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair bytes bytes)) (list operation) : lambda (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation)) : pair (string %kind) (bytes %payload) : @parameter%send_actions : @storage
                EXEC;       # pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation) : pair (string %kind) (bytes %payload) : @parameter%send_actions : @storage
                UNPAIR;     # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : pair (string %kind) (bytes %payload) : @parameter%send_actions : @storage
                DIG 4;      # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : pair (string %kind) (bytes %payload) : @parameter%send_actions
                DIG 4;      # @parameter%send_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : pair (string %kind) (bytes %payload)
                DIG 3;      # list operation : @parameter%send_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload)
                DUG 4;      # @parameter%send_actions : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation
                DUG 4;      # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUP 2;      # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                CAR;        # pair (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id)))) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                CDR;        # pair (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                UPDATE 4;   # @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUP;        # @storage : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                GET 3;      # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DUP;        # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : pair (string %kind) (bytes %payload) : list operation : @parameter%send_actions
                DIG 4;      # pair (string %kind) (bytes %payload) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                CAR;        # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                DUP;        # string : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                DUG 2;      # string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                GET;        # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                IF_NONE
                  {
                    PUSH int 765; # int : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : list operation : @parameter%send_actions
                DIG 4;      # pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage) : @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                CDR;        # bytes : @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                UPDATE 2;   # @some : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                SOME;       # option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : string : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                SWAP;       # string : option (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                UPDATE;     # big_map string (pair (lambda %function (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (pair (bytes %payload) (bytes %storage))) (list operation)) (pair (pair (pair %context (nat %action_id) (pair %store (pair (pair %config (address %governance_address) (pair (address %merkle_aggregator) (pair (bool %paused) (address %proof_validator)))) (nat %incoming_seq_id)) (pair (big_map %job_information nat (pair (pair (pair (bytes %abstract) (pair (address %creator) (address %destination))) (pair (nat %endTime) (pair (mutez %expected_fullfilment_fee) (nat %interval)))) (pair (pair (nat %maximum_reward) (pair (set %processors address) (mutez %remaining_fee))) (pair (nat %slots) (pair (nat %startTime) (nat %status)))))) (pair (big_map %outgoing_registry nat nat) (nat %outgoing_seq_id))))) (bytes %new_action_storage)) (list operation))) (bytes %storage)) : @storage : list operation : @parameter%send_actions
                UPDATE 3;   # @storage : list operation : @parameter%send_actions
                DUG 2;      # list operation : @parameter%send_actions : @storage
              }; # list operation : @parameter%send_actions : @storage
            SWAP;       # @parameter%send_actions : list operation : @storage
            DROP;       # list operation : @storage
          }; # list operation : @storage
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };