parameter (or (list %configure (or (list %update_authorized_actions (or (pair %add (pair %function (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage)))))))))))) (pair %storage (bytes %data) (nat %version)))))) (list operation)) (pair (pair (pair %new_action_storage (bytes %data) (nat %version)) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))) (list operation))) (pair %storage (bytes %data) (nat %version))) (string %kind)) (string %remove))) (address %update_governance_address))) (or (pair %fulfill (nat %jobId) (bytes %payload)) (pair %perform_action (string %action) (bytes %payload))));
storage   (pair (pair %config (pair (big_map %authorized_actions string (pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (pair (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage)))))))))))) (pair %storage (bytes %data) (nat %version)))))) (list operation)) (pair (pair (pair %new_action_storage (bytes %data) (nat %version)) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))) (list operation))) (pair %storage (bytes %data) (nat %version)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator))) (pair (nat %outgoing_counter) (big_map %registry nat (pair (nat %level) (pair %metadata (bool %allowOnlyVerifiedSources) (pair (option %allowedSources (set bytes)) (pair (address %destination) (pair (pair %extra (nat %expectedFulfillmentFee) (pair %requirements (option %instantMatch (set (pair (bytes %source) (nat %startDelay)))) (pair (option %minReputation nat) (pair (bytes %reward) (nat %slots))))) (pair (nat %memory) (pair (nat %networkRequests) (pair (set %requiredModules nat) (pair (pair %schedule (nat %duration) (pair (nat %endTime) (pair (nat %interval) (pair (nat %maxStartDelay) (nat %startTime))))) (pair (bytes %script) (nat %storage))))))))))))));
code
  {
    UNPAIR;     
    IF_LEFT
      {
        SENDER;     
        DUP 3;      
        CAR;        
        CAR;        
        CDR;        
        COMPARE;    
        EQ;         
        IF
          {}
          {
            PUSH string "NOT_GOVERNANCE"; 
            FAILWITH;   
          }; 
        DUP;        
        ITER
          {
            DUP;        
            IF_LEFT
              {
                DUP;        
                ITER
                  {
                    IF_LEFT
                      {
                        DIG 4;      
                        DUP;        
                        CAR;        
                        UNPAIR;     
                        UNPAIR;     
                        DUP 5;      
                        CAR;        
                        SOME;       
                        DIG 5;      
                        CDR;        
                        UPDATE;     
                        PAIR;       
                        PAIR;       
                        UPDATE 1;   
                        DUG 3;      
                      }
                      {
                        DIG 4;      
                        DUP;        
                        CAR;        
                        UNPAIR;     
                        UNPAIR;     
                        NONE (pair (lambda (pair (pair nat (pair address (pair bytes (pair (big_map nat (pair nat (pair bool (pair (option (set bytes)) (pair address (pair (pair nat (pair (option (set (pair bytes nat))) (pair (option nat) (pair bytes nat)))) (pair nat (pair nat (pair (set nat) (pair (pair nat (pair nat (pair nat (pair nat nat)))) (pair bytes nat))))))))))) (pair bytes nat))))) (list operation)) (pair (pair (pair bytes nat) (big_map nat (pair nat (pair bool (pair (option (set bytes)) (pair address (pair (pair nat (pair (option (set (pair bytes nat))) (pair (option nat) (pair bytes nat)))) (pair nat (pair nat (pair (set nat) (pair (pair nat (pair nat (pair nat (pair nat nat)))) (pair bytes nat)))))))))))) (list operation))) (pair bytes nat)); 
                        DIG 5;      
                        UPDATE;     
                        PAIR;       
                        PAIR;       
                        UPDATE 1;   
                        DUG 3;      
                      }; 
                  }; 
                DROP 2;     
              }
              {
                SWAP;       
                DROP;       
                DIG 2;      
                DUP;        
                CAR;        
                UNPAIR;     
                CAR;        
                DIG 3;      
                SWAP;       
                PAIR;       
                PAIR;       
                UPDATE 1;   
                SWAP;       
              }; 
          }; 
        DROP;       
        NIL operation; 
      }
      {
        IF_LEFT
          {
            NIL operation; 
            DUP 3;      
            GET 4;      
            DUP 3;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; 
                FAILWITH;   
              }
              {}; 
            GET 7;      
            CONTRACT %fulfill bytes; 
            IF_NONE
              {
                PUSH string "INVALID_CONTRACT"; 
                FAILWITH;   
              }
              {}; 
            PUSH mutez 0; 
            DIG 3;      
            CDR;        
            TRANSFER_TOKENS; 
            CONS;       
          }
          {
            SWAP;       
            DUP;        
            GET 3;      
            PUSH nat 1; 
            ADD;        
            UPDATE 3;   
            SWAP;       
            NIL operation; 
            DUP 3;      
            CAR;        
            CAR;        
            CAR;        
            DUP 3;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "ACTION_NOT_SUPPORTED"; 
                FAILWITH;   
              }
              {}; 
            CAR;        
            DUP 4;      
            CAR;        
            CAR;        
            CAR;        
            DUP 4;      
            CAR;        
            GET;        
            IF_NONE
              {
                PUSH string "ACTION_NOT_SUPPORTED"; 
                FAILWITH;   
              }
              {}; 
            CDR;        
            DUP 5;      
            GET 4;      
            DUP 5;      
            CDR;        
            DIG 6;      
            DUP;        
            CAR;        
            GET 3;      
            SWAP;       
            DUP;        
            DUG 8;      
            GET 3;      
            PAIR 5;     
            SWAP;       
            DUG 2;      
            PAIR;       
            EXEC;       
            UNPAIR;     
            DUP;        
            DIG 4;      
            SWAP;       
            CDR;        
            UPDATE 4;   
            DUP;        
            CAR;        
            UNPAIR;     
            UNPAIR;     
            DUP;        
            DIG 7;      
            CAR;        
            DUP;        
            DUG 2;      
            GET;        
            IF_NONE
              {
                PUSH int 258; 
                FAILWITH;   
              }
              {}; 
            DIG 6;      
            CAR;        
            UPDATE 2;   
            SOME;       
            SWAP;       
            UPDATE;     
            PAIR;       
            PAIR;       
            UPDATE 1;   
            SWAP;       
          }; 
      }; 
    NIL operation; 
    SWAP;       
    ITER
      {
        CONS;       
      }; 
    PAIR;       
  };