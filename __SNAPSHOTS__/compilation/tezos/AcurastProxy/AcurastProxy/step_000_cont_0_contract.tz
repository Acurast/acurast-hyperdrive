parameter (or (list %configure (or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address))) (or (pair %fulfill (bytes %payload) (pair (address %requester) (bytes %script))) (pair %perform_action (string %action) (bytes %payload))));
storage   (pair (pair %config (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator))) (pair (nat %outgoing_counter) (big_map %registry (pair address bytes) address)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SENDER;     # @sender : @parameter%configure : @storage
        DUP 3;      # @storage : @sender : @parameter%configure : @storage
        CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : @sender : @parameter%configure : @storage
        CAR;        # pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address) : @sender : @parameter%configure : @storage
        CDR;        # address : @sender : @parameter%configure : @storage
        COMPARE;    # int : @parameter%configure : @storage
        EQ;         # bool : @parameter%configure : @storage
        IF
          {}
          {
            PUSH string "NOT_GOVERNANCE"; # string : @parameter%configure : @storage
            FAILWITH;   # FAILED
          }; # @parameter%configure : @storage
        DUP;        # @parameter%configure : @parameter%configure : @storage
        ITER
          {
            DUP;        # or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure : @storage
            IF_LEFT
              {
                DUP;        # list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure : @storage
                ITER
                  {
                    IF_LEFT
                      {
                        DIG 4;      # @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DUP;        # @storage : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UNPAIR;     # pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address) : pair (address %merkle_aggregator) (address %proof_validator) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UNPAIR;     # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DUP 5;      # pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        CAR;        # lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        SOME;       # option (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DIG 5;      # pair (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind) : option (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        CDR;        # string : option (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UPDATE;     # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        PAIR;       # pair (big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        PAIR;       # pair (pair (big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UPDATE 1;   # @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DUG 3;      # list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure : @storage
                      }
                      {
                        DIG 4;      # @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DUP;        # @storage : @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UNPAIR;     # pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address) : pair (address %merkle_aggregator) (address %proof_validator) : @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UNPAIR;     # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        NONE (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))); # option (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : string : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DIG 5;      # string : option (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UPDATE;     # big_map string (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        PAIR;       # pair (big_map string (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        PAIR;       # pair (pair (big_map string (lambda (pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        UPDATE 1;   # @storage : list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure
                        DUG 3;      # list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure : @storage
                      }; # list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : list (or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address)) : @storage
                  }; # list (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove)) : or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : @parameter%configure : @storage
                DROP 2;     # @parameter%configure : @storage
              }
              {
                SWAP;       # or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address) : address : @parameter%configure : @storage
                DROP;       # address : @parameter%configure : @storage
                DIG 2;      # @storage : address : @parameter%configure
                DUP;        # @storage : @storage : address : @parameter%configure
                CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : address : @parameter%configure
                UNPAIR;     # pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address) : pair (address %merkle_aggregator) (address %proof_validator) : @storage : address : @parameter%configure
                CAR;        # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : pair (address %merkle_aggregator) (address %proof_validator) : @storage : address : @parameter%configure
                DIG 3;      # address : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : pair (address %merkle_aggregator) (address %proof_validator) : @storage : @parameter%configure
                SWAP;       # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : @parameter%configure
                PAIR;       # pair (big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address : pair (address %merkle_aggregator) (address %proof_validator) : @storage : @parameter%configure
                PAIR;       # pair (pair (big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) address) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : @parameter%configure
                UPDATE 1;   # @storage : @parameter%configure
                SWAP;       # @parameter%configure : @storage
              }; # list (or (list %update_authorized_actions (or (pair %add (lambda %function (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) (string %kind)) (string %remove))) (address %update_governance_address)) : @storage
          }; # @parameter%configure : @storage
        DROP;       # @storage
        NIL operation; # list operation : @storage
      }
      {
        IF_LEFT
          {
            NIL operation; # list operation : @parameter%fulfill : @storage
            DUP 3;      # @storage : list operation : @parameter%fulfill : @storage
            GET 4;      # big_map (pair address bytes) address : list operation : @parameter%fulfill : @storage
            DIG 2;      # @parameter%fulfill : big_map (pair address bytes) address : list operation : @storage
            DUP;        # @parameter%fulfill : @parameter%fulfill : big_map (pair address bytes) address : list operation : @storage
            GET 4;      # bytes : @parameter%fulfill : big_map (pair address bytes) address : list operation : @storage
            SWAP;       # @parameter%fulfill : bytes : big_map (pair address bytes) address : list operation : @storage
            DUP;        # @parameter%fulfill : @parameter%fulfill : bytes : big_map (pair address bytes) address : list operation : @storage
            DUG 4;      # @parameter%fulfill : bytes : big_map (pair address bytes) address : list operation : @parameter%fulfill : @storage
            GET 3;      # address : bytes : big_map (pair address bytes) address : list operation : @parameter%fulfill : @storage
            PAIR;       # pair address bytes : big_map (pair address bytes) address : list operation : @parameter%fulfill : @storage
            GET;        # option address : list operation : @parameter%fulfill : @storage
            IF_NONE
              {
                PUSH string "JOB_UNKNOWN"; # string : list operation : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%fulfill : @storage
            CONTRACT %fulfill bytes; # option (contract bytes) : list operation : @parameter%fulfill : @storage
            IF_NONE
              {
                PUSH string "INVALID_CONTRACT"; # string : list operation : @parameter%fulfill : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%fulfill : @storage
            PUSH mutez 0; # mutez : @some : list operation : @parameter%fulfill : @storage
            DIG 3;      # @parameter%fulfill : mutez : @some : list operation : @storage
            CAR;        # bytes : mutez : @some : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
          }
          {
            SWAP;       # @storage : @parameter%perform_action
            DUP;        # @storage : @storage : @parameter%perform_action
            GET 3;      # nat : @storage : @parameter%perform_action
            PUSH nat 1; # nat : nat : @storage : @parameter%perform_action
            ADD;        # nat : @storage : @parameter%perform_action
            UPDATE 3;   # @storage : @parameter%perform_action
            SWAP;       # @parameter%perform_action : @storage
            NIL operation; # list operation : @parameter%perform_action : @storage
            DUP 3;      # @storage : list operation : @parameter%perform_action : @storage
            CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : list operation : @parameter%perform_action : @storage
            CAR;        # pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address) : list operation : @parameter%perform_action : @storage
            CAR;        # big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : list operation : @parameter%perform_action : @storage
            DUP 3;      # @parameter%perform_action : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : list operation : @parameter%perform_action : @storage
            CAR;        # string : big_map string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : list operation : @parameter%perform_action : @storage
            GET;        # option (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation))) : list operation : @parameter%perform_action : @storage
            IF_NONE
              {
                PUSH string "ACTION_NOT_SUPPORTED"; # string : list operation : @parameter%perform_action : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%perform_action : @storage
            DUP 4;      # @storage : @some : list operation : @parameter%perform_action : @storage
            GET 4;      # big_map (pair address bytes) address : @some : list operation : @parameter%perform_action : @storage
            DUP 4;      # @parameter%perform_action : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action : @storage
            CDR;        # bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action : @storage
            DIG 5;      # @storage : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            DUP;        # @storage : @storage : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            CAR;        # pair (pair (big_map %authorized_actions string (lambda (pair (pair (nat %action_number) (pair (address %merkle_aggregator) (pair (bytes %payload) (big_map %registry (pair address bytes) address)))) (list operation)) (pair (big_map (pair address bytes) address) (list operation)))) (address %governance_address)) (pair (address %merkle_aggregator) (address %proof_validator)) : @storage : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            GET 3;      # address : @storage : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            SWAP;       # @storage : address : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            DUP;        # @storage : @storage : address : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action
            DUG 7;      # @storage : address : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action : @storage
            GET 3;      # nat : address : bytes : big_map (pair address bytes) address : @some : list operation : @parameter%perform_action : @storage
            PAIR 4;     # pair nat (pair address (pair bytes (big_map (pair address bytes) address))) : @some : list operation : @parameter%perform_action : @storage
            DIG 3;      # @parameter%perform_action : pair nat (pair address (pair bytes (big_map (pair address bytes) address))) : @some : list operation : @storage
            DROP;       # pair nat (pair address (pair bytes (big_map (pair address bytes) address))) : @some : list operation : @storage
            SWAP;       # @some : pair nat (pair address (pair bytes (big_map (pair address bytes) address))) : list operation : @storage
            DUG 2;      # pair nat (pair address (pair bytes (big_map (pair address bytes) address))) : list operation : @some : @storage
            PAIR;       # pair (pair nat (pair address (pair bytes (big_map (pair address bytes) address)))) (list operation) : @some : @storage
            EXEC;       # pair (big_map (pair address bytes) address) (list operation) : @storage
            UNPAIR;     # big_map (pair address bytes) address : list operation : @storage
            DIG 2;      # @storage : big_map (pair address bytes) address : list operation
            SWAP;       # big_map (pair address bytes) address : @storage : list operation
            UPDATE 4;   # @storage : list operation
            SWAP;       # list operation : @storage
          }; # list operation : @storage
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };